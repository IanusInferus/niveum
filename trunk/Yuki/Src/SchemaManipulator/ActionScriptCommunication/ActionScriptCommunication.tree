$Comment
    ==========================================================================

      File:        ActionScriptCommunication.tree
      Location:    Yuki.SchemaManipulator <Tree>
      Description: 对象类型结构ActionScript3.0通讯模板数据
      Version:     2012.02.09.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
        $List String
            break
            case
            continue
            default
            do
            while
            else
            for
            in
            each
            if
            label
            return
            super
            switch
            throw
            try
            catch
            finally
            while
            with
            dynamic
            final
            internal
            native
            override
            private
            protected
            public
            static
            class
            const
            extends
            function
            get
            implements
            interface
            namespace
            package
            set
            var
            import
            include
            AS3
            flash_proxy
            object_proxy
            false
            null
            this
            true
    PrimitiveMappings
        PrimitiveMapping
            Name Boolean
            PlatformName Boolean
        PrimitiveMapping
            Name String
            PlatformName String
        PrimitiveMapping
            Name Int
            PlatformName int
        PrimitiveMapping
            Name Real
            PlatformName Number
        PrimitiveMapping
            Name Type
            PlatformName Error
        PrimitiveMapping
            Name List
            PlatformName Vector
        PrimitiveMapping
            Name Set
            PlatformName Error
        PrimitiveMapping
            Name Map
            PlatformName Error
    Templates
        Template
            Name Main
            //Parameters: ${PackageName}, ${Imports}, ${Type}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    package [[${PackageName}]]
                    {
                    	import flash.errors.IllegalOperationError;
                    	import flash.utils.Dictionary;
                    	import com.utils.json.JSON;
                    	import ${Imports};

                    	${Type}
                    }

                $End
        Template
            Name Field
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public var [[${name}]]:[[${Type}]];
        Template
            Name Record
            //Parameters: ${Name}, ${Fields}, ${FieldFroms}, ${FieldTos}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                    	${Fields}

                    	public function [[${Name}]]()
                    	{
                    	}
                    	public static function fromJson(jo:*):[[${Name}]]
                    	{
                    		var o:[[${Name}]] = new [[${Name}]]();
                    		${FieldFroms}
                    		return o;
                    	}
                    	public static function toJson(o:[[${Name}]]):*
                    	{
                    		var jo:* = new Object();
                    		${FieldTos}
                    		return jo;
                    	}
                    }
        Template
            Name Alternative
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public var [[${name}]]:[[${Type}]];
        Template
            Name AlternativeCreate
            //Parameters: ${TaggedUnionName}, ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static function [[create${Name}]](value:[[${Type}]]):[[${TaggedUnionName}]]
                    {
                    	var r:[[${TaggedUnionName}]] = new [[${TaggedUnionName}]]();
                    	r._tag = [[${TaggedUnionName}Tag.${NAME}]];
                    	r.[[${name}]] = value;
                    	return r;
                    }
        Template
            Name AlternativeCreateUnit
            //Parameters: ${TaggedUnionName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static function [[create${Name}]]():[[${TaggedUnionName}]]
                    {
                    	var r:[[${TaggedUnionName}]] = new [[${TaggedUnionName}]]();
                    	r._tag = [[${TaggedUnionName}Tag.${NAME}]];
                    	r.[[${name}]] = new Unit();
                    	return r;
                    }
        Template
            Name AlternativePredicate
            //Parameters: ${TaggedUnionName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public function get [[on${Name}]]():Boolean { return _tag == [[${TaggedUnionName}Tag.${NAME}]]; }
        Template
            Name TaggedUnion
            //Parameters: ${Name}, ${Alternatives}, ${AlternativeCreates}, ${AlternativePredicates}, ${AlternativeFroms}, ${AlternativeTos}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                    	public var _tag:int;

                    	${Alternatives}

                    	${AlternativeCreates}

                    	${AlternativePredicates}

                    	public function [[${Name}]]()
                    	{
                    	}
                    	public static function fromJson(jo:*):[[${Name}]]
                    	{
                    		var o:[[${Name}]] = new [[${Name}]]();
                    		o._tag = JsonTranslator.[[${name}TagFromJson]](jo._tag);
                    		${AlternativeFroms}
                    		throw new flash.errors.IllegalOperationError();
                    	}
                    	public static function toJson(o:[[${Name}]]):*
                    	{
                    		var jo:* = new Object();
                    		jo._tag = JsonTranslator.[[${name}TagToJson]](o._tag);
                    		${AlternativeTos}
                    		throw new flash.errors.IllegalOperationError();
                    	}
                    }
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static const [[${NAME}]]:int = [[${Value}]];
        Template
            Name Enum
            //Parameters: ${Name}, ${Literals}, ${Comment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                    	${Literals}

                    	public function [[${Name}]]()
                    	{
                    	}
                    }
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /**
                     * ${Description}
                     * */
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /** ${Description} */
        Template
            Name ISender
            Value
                $String
                    public interface ISender 
                    {
                    	function send(commandName:String, params:String):void;
                    }
        Template
            Name IClientImplementation
            //Parameters: ${Commands}
            Value
                $String
                    public interface IClientImplementation
                    {
                    	${Commands}
                    }
        Template
            Name IClientImplementation_ServerCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    function [[${name}]](e:[[${Name}Event]]):void;
        Template
            Name Client
            //Parameters: ${NumClientCommand}, ${Hash}, ${Client_ServerCommandHandles}, ${Client_ClientCommandHandles}, ${Client_ClientCommandDeques}, ${Client_ClientCommands}
            Value
                $String
                    public class Client
                    {
                    	private var s:ISender;
                    	private var ci:IClientImplementation;
                    	private var requests:Vector.<Vector.<Function>>;
                    	
                    	public function Client(s:ISender, ci:IClientImplementation)
                    	{
                    		this.s = s;
                    		this.ci = ci;
                    		requests = new Vector.<Vector.<Function>>();
                    		for (var k:int = 0; k < ${NumClientCommand}; k += 1)
                    		{
                    			requests.push(new Vector.<Function>());
                    		}
                    	}
                    	
                    	public function get Hash():String
                    	{
                    		return "${Hash}";
                    	}

                    	public function handleResult(commandName:String, params:String):void
                    	{
                    		switch (commandName)
                    		{
                    			${Client_ServerCommandHandles}
                    		}
                    		var callback:Function = dequeueCallback(commandName);
                    		if (callback == null) { return; }
                    		switch (commandName)
                    		{
                    			${Client_ClientCommandHandles}
                    		}
                    		throw new IllegalOperationError(commandName);
                    	}
                    
                    	public function dequeueCallback(commandName:String):Function {
                    		switch (commandName)
                    		{
                    			${Client_ClientCommandDeques}
                    			default:
                    				throw new IllegalOperationError(commandName);
                    		}
                    	}
                    	
                    	${Client_ClientCommands}
                    }
        Template
            Name Client_ServerCommandHandle
            //Parameters: ${Name}
            Value
                $String
                    case "${Name}":
                    	ci.[[${name}]](JsonTranslator.[[${name}EventFromJson]](JSON.decode(params)));
                    	return;
        Template
            Name Client_ClientCommandHandle
            //Parameters: ${Name}
            Value
                $String
                    case "${Name}":
                    	callback(JsonTranslator.[[${name}ReplyFromJson]](JSON.decode(params)));
                    	return;
        Template
            Name Client_ClientCommandDeque
            //Parameters: ${Name}, ${ClientCommandIndex}
            Value
                $String
                    case "${Name}":
                    	var [[r${ClientCommandIndex}]]:Vector.<Function> = requests[${ClientCommandIndex}];
                    	return [[r${ClientCommandIndex}]].shift();
        Template
            Name Client_ClientCommand
            //Parameters: ${Name}, ${ClientCommandIndex}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public function [[${name}]](r:[[${Name}Request]], callback:Function):void
                    {
                    	var ra:Vector.<Function> = requests[${ClientCommandIndex}];
                    	s.send("${Name}", JSON.encode(JsonTranslator.[[${name}RequestToJson]](r)));
                    	ra.push(callback);
                    }
        Template
            Name JsonTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    public class JsonTranslator
                    {
                    	public static function unitFromJson(j:*):Unit { return new Unit(); }
                    	public static function unitToJson(v:Unit):* { return v; }

                    	public static function booleanFromJson(j:*):Boolean { return j; }
                    	public static function booleanToJson(v:Boolean):* { return v; }

                    	public static function stringFromJson(j:*):String { return j; }
                    	public static function stringToJson(v:String):* { return v; }

                    	public static function intFromJson(j:*):int { return j; }
                    	public static function intToJson(v:int):* { return v; }

                    	public static function realFromJson(j:*):Number { return j; }
                    	public static function realToJson(v:Number):* { return v; }

                    	${Serializers}
                    }
        Template
            Name JsonTranslator_Record
            //Parameters: ${Name}
            Value
                $String
                    public static function [[${name}FromJson]](jo:*):[[${Name}]] { return [[${Name}]].fromJson(jo); }
                    public static function [[${name}ToJson]](o:[[${Name}]]):* { return [[${Name}]].toJson(o); }
        Template
            Name JsonTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    o.[[${name}]] = JsonTranslator.[[${typeFriendlyName}FromJson]](jo.[[${name}]]);
        Template
            Name JsonTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    jo.[[${name}]] = JsonTranslator.[[${typeFriendlyName}ToJson]](o.[[${name}]]);
        Template
            Name JsonTranslator_TaggedUnion
            //Parameters: ${Name}
            Value
                $String
                    public static function [[${name}FromJson]](jo:*):[[${Name}]] { return [[${Name}]].fromJson(jo); }
                    public static function [[${name}ToJson]](o:[[${Name}]]):* { return [[${Name}]].toJson(o); }
        Template
            Name JsonTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._tag == [[${TaggedUnionName}Tag.${NAME}]])
                    {
                    	o.[[${name}]] = JsonTranslator.[[${typeFriendlyName}FromJson]](jo.[[${name}]]);
                    	return o;
                    }
        Template
            Name JsonTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._tag == [[${TaggedUnionName}Tag.${NAME}]])
                    {
                    	jo.[[${name}]] = JsonTranslator.[[${typeFriendlyName}ToJson]](o.[[${name}]]);
                    	return jo;
                    }
        Template
            Name JsonTranslator_Enum
            //Parameters: ${Name}
            Value
                $String
                    public static function [[${name}FromJson]](j:*):int { return j; }
                    public static function [[${name}ToJson]](v:int):* { return v; }
        Template
            Name JsonTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    public static function [[${typeFriendlyName}FromJson]](j:*):[[${TypeString}]]
                    {
                    	var l:[[${TypeString}]] = new [[${TypeString}]]();
                    	for (var k:int = 0; k < j.length; k += 1)
                    	{
                    		l.push([[${elementTypeFriendlyName}FromJson]](j[k]));
                    	}
                    	return l;
                    }
                    public static function [[${typeFriendlyName}ToJson]](l:[[${TypeString}]]):*
                    {
                    	var jl:Array = new Array();
                    	for (var k:int = 0; k < l.length; k += 1)
                    	{
                    		jl.push([[${elementTypeFriendlyName}ToJson]](l[k]));
                    	}
                    	return jl;
                    }
