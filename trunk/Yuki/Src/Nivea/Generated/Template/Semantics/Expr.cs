//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Nivea.Template.Semantics
{
    public enum TemplateExprTag
    {
        /// <summary>模板行</summary>
        Line = 0,
        /// <summary>缩进的表达式</summary>
        IndentedExpr = 1
    }
    /// <summary>模板表达式</summary>
    [TaggedUnion]
    public sealed class TemplateExpr
    {
        [Tag] public TemplateExprTag _Tag;

        /// <summary>模板行</summary>
        public List<TemplateSpan> Line;
        /// <summary>缩进的表达式</summary>
        public IndentedExpr IndentedExpr;

        /// <summary>模板行</summary>
        public static TemplateExpr CreateLine(List<TemplateSpan> Value) { return new TemplateExpr { _Tag = TemplateExprTag.Line, Line = Value }; }
        /// <summary>缩进的表达式</summary>
        public static TemplateExpr CreateIndentedExpr(IndentedExpr Value) { return new TemplateExpr { _Tag = TemplateExprTag.IndentedExpr, IndentedExpr = Value }; }

        /// <summary>模板行</summary>
        public Boolean OnLine { get { return _Tag == TemplateExprTag.Line; } }
        /// <summary>缩进的表达式</summary>
        public Boolean OnIndentedExpr { get { return _Tag == TemplateExprTag.IndentedExpr; } }
    }
    public enum TemplateSpanTag
    {
        /// <summary>字面量</summary>
        Literal = 0,
        /// <summary>过滤器</summary>
        Filter = 1,
        /// <summary>表达式</summary>
        Expr = 2
    }
    /// <summary>模板块</summary>
    [TaggedUnion]
    public sealed class TemplateSpan
    {
        [Tag] public TemplateSpanTag _Tag;

        /// <summary>字面量</summary>
        public String Literal;
        /// <summary>过滤器</summary>
        public FilterExpr Filter;
        /// <summary>表达式</summary>
        public Expr Expr;

        /// <summary>字面量</summary>
        public static TemplateSpan CreateLiteral(String Value) { return new TemplateSpan { _Tag = TemplateSpanTag.Literal, Literal = Value }; }
        /// <summary>过滤器</summary>
        public static TemplateSpan CreateFilter(FilterExpr Value) { return new TemplateSpan { _Tag = TemplateSpanTag.Filter, Filter = Value }; }
        /// <summary>表达式</summary>
        public static TemplateSpan CreateExpr(Expr Value) { return new TemplateSpan { _Tag = TemplateSpanTag.Expr, Expr = Value }; }

        /// <summary>字面量</summary>
        public Boolean OnLiteral { get { return _Tag == TemplateSpanTag.Literal; } }
        /// <summary>过滤器</summary>
        public Boolean OnFilter { get { return _Tag == TemplateSpanTag.Filter; } }
        /// <summary>表达式</summary>
        public Boolean OnExpr { get { return _Tag == TemplateSpanTag.Expr; } }
    }
    /// <summary>过滤器表达式</summary>
    [Record]
    public sealed class FilterExpr
    {
        /// <summary>过滤器名称</summary>
        public String Name;
        /// <summary>内容块</summary>
        public List<TemplateSpan> Spans;
    }
    /// <summary>缩进的表达式</summary>
    [Record]
    public sealed class IndentedExpr
    {
        /// <summary>缩进空格数</summary>
        public Int IndentSpace;
        /// <summary>表达式</summary>
        public Expr Expr;
    }
    public enum EmbeddedExprTag
    {
        /// <summary>嵌入块</summary>
        Span = 0,
        /// <summary>嵌入行</summary>
        Line = 1,
        /// <summary>缩进的表达式</summary>
        IndentedExpr = 2
    }
    /// <summary>嵌入表达式</summary>
    [TaggedUnion]
    public sealed class EmbeddedExpr
    {
        [Tag] public EmbeddedExprTag _Tag;

        /// <summary>嵌入块</summary>
        public String Span;
        /// <summary>嵌入行</summary>
        public String Line;
        /// <summary>缩进的表达式</summary>
        public IndentedExpr IndentedExpr;

        /// <summary>嵌入块</summary>
        public static EmbeddedExpr CreateSpan(String Value) { return new EmbeddedExpr { _Tag = EmbeddedExprTag.Span, Span = Value }; }
        /// <summary>嵌入行</summary>
        public static EmbeddedExpr CreateLine(String Value) { return new EmbeddedExpr { _Tag = EmbeddedExprTag.Line, Line = Value }; }
        /// <summary>缩进的表达式</summary>
        public static EmbeddedExpr CreateIndentedExpr(IndentedExpr Value) { return new EmbeddedExpr { _Tag = EmbeddedExprTag.IndentedExpr, IndentedExpr = Value }; }

        /// <summary>嵌入块</summary>
        public Boolean OnSpan { get { return _Tag == EmbeddedExprTag.Span; } }
        /// <summary>嵌入行</summary>
        public Boolean OnLine { get { return _Tag == EmbeddedExprTag.Line; } }
        /// <summary>缩进的表达式</summary>
        public Boolean OnIndentedExpr { get { return _Tag == EmbeddedExprTag.IndentedExpr; } }
    }
    public enum ExprTag
    {
        /// <summary>错误</summary>
        Error = 0,
        /// <summary>歧义</summary>
        Ambiguous = 1,
        /// <summary>序列</summary>
        Sequence = 2,
        /// <summary>生成</summary>
        Yield = 3,
        /// <summary>多行生成</summary>
        YieldMany = 4,
        /// <summary>嵌入表达式</summary>
        Embedded = 5,
        /// <summary>内嵌模板生成</summary>
        YieldTemplate = 6,
        /// <summary>抛出异常</summary>
        Throw = 7,
        /// <summary>不变量定义</summary>
        Let = 8,
        /// <summary>变量定义</summary>
        Var = 9,
        /// <summary>条件</summary>
        If = 10,
        /// <summary>匹配</summary>
        Match = 11,
        /// <summary>枚举循环</summary>
        For = 12,
        /// <summary>条件循环</summary>
        While = 13,
        /// <summary>下一次循环</summary>
        Continue = 14,
        /// <summary>终止循环</summary>
        Break = 15,
        /// <summary>返回</summary>
        Return = 16,
        /// <summary>赋值</summary>
        Assign = 17,
        /// <summary>递增</summary>
        Increase = 18,
        /// <summary>递减</summary>
        Decrease = 19,
        /// <summary>Lambda表达式</summary>
        Lambda = 20,
        /// <summary>空字面量</summary>
        Null = 21,
        /// <summary>默认值字面量</summary>
        Default = 22,
        /// <summary>基元字面量</summary>
        PrimitiveLiteral = 23,
        /// <summary>记录字面量</summary>
        RecordLiteral = 24,
        /// <summary>标签联合字面量</summary>
        TaggedUnionLiteral = 25,
        /// <summary>枚举字面量</summary>
        EnumLiteral = 26,
        /// <summary>元组字面量</summary>
        TupleLiteral = 27,
        /// <summary>列表字面量</summary>
        ListLiteral = 28,
        /// <summary>类型字面量</summary>
        TypeLiteral = 29,
        /// <summary>变量引用</summary>
        VariableRef = 30,
        /// <summary>函数调用</summary>
        FunctionCall = 31,
        /// <summary>转换</summary>
        Cast = 32
    }
    /// <summary>表达式</summary>
    [TaggedUnion]
    public sealed class Expr
    {
        [Tag] public ExprTag _Tag;

        /// <summary>错误</summary>
        public Unit Error;
        /// <summary>歧义</summary>
        public List<Expr> Ambiguous;
        /// <summary>序列</summary>
        public List<Expr> Sequence;
        /// <summary>生成</summary>
        public Expr Yield;
        /// <summary>多行生成</summary>
        public Expr YieldMany;
        /// <summary>嵌入表达式</summary>
        public List<EmbeddedExpr> Embedded;
        /// <summary>内嵌模板生成</summary>
        public List<TemplateExpr> YieldTemplate;
        /// <summary>抛出异常</summary>
        public Optional<Expr> Throw;
        /// <summary>不变量定义</summary>
        public LetExpr Let;
        /// <summary>变量定义</summary>
        public VarExpr Var;
        /// <summary>条件</summary>
        public IfExpr If;
        /// <summary>匹配</summary>
        public MatchExpr Match;
        /// <summary>枚举循环</summary>
        public ForExpr For;
        /// <summary>条件循环</summary>
        public WhileExpr While;
        /// <summary>下一次循环</summary>
        public Optional<Int> Continue;
        /// <summary>终止循环</summary>
        public Optional<Int> Break;
        /// <summary>返回</summary>
        public Optional<Expr> Return;
        /// <summary>赋值</summary>
        public AssignExpr Assign;
        /// <summary>递增</summary>
        public IncreaseExpr Increase;
        /// <summary>递减</summary>
        public DecreaseExpr Decrease;
        /// <summary>Lambda表达式</summary>
        public LambdaExpr Lambda;
        /// <summary>空字面量</summary>
        public Unit Null;
        /// <summary>默认值字面量</summary>
        public Unit Default;
        /// <summary>基元字面量</summary>
        public PrimitiveLiteralExpr PrimitiveLiteral;
        /// <summary>记录字面量</summary>
        public RecordLiteralExpr RecordLiteral;
        /// <summary>标签联合字面量</summary>
        public TaggedUnionLiteralExpr TaggedUnionLiteral;
        /// <summary>枚举字面量</summary>
        public EnumLiteralExpr EnumLiteral;
        /// <summary>元组字面量</summary>
        public TupleLiteralExpr TupleLiteral;
        /// <summary>列表字面量</summary>
        public ListLiteralExpr ListLiteral;
        /// <summary>类型字面量</summary>
        public TypeSpec TypeLiteral;
        /// <summary>变量引用</summary>
        public VariableRef VariableRef;
        /// <summary>函数调用</summary>
        public FunctionCallExpr FunctionCall;
        /// <summary>转换</summary>
        public CastExpr Cast;

        /// <summary>错误</summary>
        public static Expr CreateError() { return new Expr { _Tag = ExprTag.Error, Error = default(Unit) }; }
        /// <summary>歧义</summary>
        public static Expr CreateAmbiguous(List<Expr> Value) { return new Expr { _Tag = ExprTag.Ambiguous, Ambiguous = Value }; }
        /// <summary>序列</summary>
        public static Expr CreateSequence(List<Expr> Value) { return new Expr { _Tag = ExprTag.Sequence, Sequence = Value }; }
        /// <summary>生成</summary>
        public static Expr CreateYield(Expr Value) { return new Expr { _Tag = ExprTag.Yield, Yield = Value }; }
        /// <summary>多行生成</summary>
        public static Expr CreateYieldMany(Expr Value) { return new Expr { _Tag = ExprTag.YieldMany, YieldMany = Value }; }
        /// <summary>嵌入表达式</summary>
        public static Expr CreateEmbedded(List<EmbeddedExpr> Value) { return new Expr { _Tag = ExprTag.Embedded, Embedded = Value }; }
        /// <summary>内嵌模板生成</summary>
        public static Expr CreateYieldTemplate(List<TemplateExpr> Value) { return new Expr { _Tag = ExprTag.YieldTemplate, YieldTemplate = Value }; }
        /// <summary>抛出异常</summary>
        public static Expr CreateThrow(Optional<Expr> Value) { return new Expr { _Tag = ExprTag.Throw, Throw = Value }; }
        /// <summary>不变量定义</summary>
        public static Expr CreateLet(LetExpr Value) { return new Expr { _Tag = ExprTag.Let, Let = Value }; }
        /// <summary>变量定义</summary>
        public static Expr CreateVar(VarExpr Value) { return new Expr { _Tag = ExprTag.Var, Var = Value }; }
        /// <summary>条件</summary>
        public static Expr CreateIf(IfExpr Value) { return new Expr { _Tag = ExprTag.If, If = Value }; }
        /// <summary>匹配</summary>
        public static Expr CreateMatch(MatchExpr Value) { return new Expr { _Tag = ExprTag.Match, Match = Value }; }
        /// <summary>枚举循环</summary>
        public static Expr CreateFor(ForExpr Value) { return new Expr { _Tag = ExprTag.For, For = Value }; }
        /// <summary>条件循环</summary>
        public static Expr CreateWhile(WhileExpr Value) { return new Expr { _Tag = ExprTag.While, While = Value }; }
        /// <summary>下一次循环</summary>
        public static Expr CreateContinue(Optional<Int> Value) { return new Expr { _Tag = ExprTag.Continue, Continue = Value }; }
        /// <summary>终止循环</summary>
        public static Expr CreateBreak(Optional<Int> Value) { return new Expr { _Tag = ExprTag.Break, Break = Value }; }
        /// <summary>返回</summary>
        public static Expr CreateReturn(Optional<Expr> Value) { return new Expr { _Tag = ExprTag.Return, Return = Value }; }
        /// <summary>赋值</summary>
        public static Expr CreateAssign(AssignExpr Value) { return new Expr { _Tag = ExprTag.Assign, Assign = Value }; }
        /// <summary>递增</summary>
        public static Expr CreateIncrease(IncreaseExpr Value) { return new Expr { _Tag = ExprTag.Increase, Increase = Value }; }
        /// <summary>递减</summary>
        public static Expr CreateDecrease(DecreaseExpr Value) { return new Expr { _Tag = ExprTag.Decrease, Decrease = Value }; }
        /// <summary>Lambda表达式</summary>
        public static Expr CreateLambda(LambdaExpr Value) { return new Expr { _Tag = ExprTag.Lambda, Lambda = Value }; }
        /// <summary>空字面量</summary>
        public static Expr CreateNull() { return new Expr { _Tag = ExprTag.Null, Null = default(Unit) }; }
        /// <summary>默认值字面量</summary>
        public static Expr CreateDefault() { return new Expr { _Tag = ExprTag.Default, Default = default(Unit) }; }
        /// <summary>基元字面量</summary>
        public static Expr CreatePrimitiveLiteral(PrimitiveLiteralExpr Value) { return new Expr { _Tag = ExprTag.PrimitiveLiteral, PrimitiveLiteral = Value }; }
        /// <summary>记录字面量</summary>
        public static Expr CreateRecordLiteral(RecordLiteralExpr Value) { return new Expr { _Tag = ExprTag.RecordLiteral, RecordLiteral = Value }; }
        /// <summary>标签联合字面量</summary>
        public static Expr CreateTaggedUnionLiteral(TaggedUnionLiteralExpr Value) { return new Expr { _Tag = ExprTag.TaggedUnionLiteral, TaggedUnionLiteral = Value }; }
        /// <summary>枚举字面量</summary>
        public static Expr CreateEnumLiteral(EnumLiteralExpr Value) { return new Expr { _Tag = ExprTag.EnumLiteral, EnumLiteral = Value }; }
        /// <summary>元组字面量</summary>
        public static Expr CreateTupleLiteral(TupleLiteralExpr Value) { return new Expr { _Tag = ExprTag.TupleLiteral, TupleLiteral = Value }; }
        /// <summary>列表字面量</summary>
        public static Expr CreateListLiteral(ListLiteralExpr Value) { return new Expr { _Tag = ExprTag.ListLiteral, ListLiteral = Value }; }
        /// <summary>类型字面量</summary>
        public static Expr CreateTypeLiteral(TypeSpec Value) { return new Expr { _Tag = ExprTag.TypeLiteral, TypeLiteral = Value }; }
        /// <summary>变量引用</summary>
        public static Expr CreateVariableRef(VariableRef Value) { return new Expr { _Tag = ExprTag.VariableRef, VariableRef = Value }; }
        /// <summary>函数调用</summary>
        public static Expr CreateFunctionCall(FunctionCallExpr Value) { return new Expr { _Tag = ExprTag.FunctionCall, FunctionCall = Value }; }
        /// <summary>转换</summary>
        public static Expr CreateCast(CastExpr Value) { return new Expr { _Tag = ExprTag.Cast, Cast = Value }; }

        /// <summary>错误</summary>
        public Boolean OnError { get { return _Tag == ExprTag.Error; } }
        /// <summary>歧义</summary>
        public Boolean OnAmbiguous { get { return _Tag == ExprTag.Ambiguous; } }
        /// <summary>序列</summary>
        public Boolean OnSequence { get { return _Tag == ExprTag.Sequence; } }
        /// <summary>生成</summary>
        public Boolean OnYield { get { return _Tag == ExprTag.Yield; } }
        /// <summary>多行生成</summary>
        public Boolean OnYieldMany { get { return _Tag == ExprTag.YieldMany; } }
        /// <summary>嵌入表达式</summary>
        public Boolean OnEmbedded { get { return _Tag == ExprTag.Embedded; } }
        /// <summary>内嵌模板生成</summary>
        public Boolean OnYieldTemplate { get { return _Tag == ExprTag.YieldTemplate; } }
        /// <summary>抛出异常</summary>
        public Boolean OnThrow { get { return _Tag == ExprTag.Throw; } }
        /// <summary>不变量定义</summary>
        public Boolean OnLet { get { return _Tag == ExprTag.Let; } }
        /// <summary>变量定义</summary>
        public Boolean OnVar { get { return _Tag == ExprTag.Var; } }
        /// <summary>条件</summary>
        public Boolean OnIf { get { return _Tag == ExprTag.If; } }
        /// <summary>匹配</summary>
        public Boolean OnMatch { get { return _Tag == ExprTag.Match; } }
        /// <summary>枚举循环</summary>
        public Boolean OnFor { get { return _Tag == ExprTag.For; } }
        /// <summary>条件循环</summary>
        public Boolean OnWhile { get { return _Tag == ExprTag.While; } }
        /// <summary>下一次循环</summary>
        public Boolean OnContinue { get { return _Tag == ExprTag.Continue; } }
        /// <summary>终止循环</summary>
        public Boolean OnBreak { get { return _Tag == ExprTag.Break; } }
        /// <summary>返回</summary>
        public Boolean OnReturn { get { return _Tag == ExprTag.Return; } }
        /// <summary>赋值</summary>
        public Boolean OnAssign { get { return _Tag == ExprTag.Assign; } }
        /// <summary>递增</summary>
        public Boolean OnIncrease { get { return _Tag == ExprTag.Increase; } }
        /// <summary>递减</summary>
        public Boolean OnDecrease { get { return _Tag == ExprTag.Decrease; } }
        /// <summary>Lambda表达式</summary>
        public Boolean OnLambda { get { return _Tag == ExprTag.Lambda; } }
        /// <summary>空字面量</summary>
        public Boolean OnNull { get { return _Tag == ExprTag.Null; } }
        /// <summary>默认值字面量</summary>
        public Boolean OnDefault { get { return _Tag == ExprTag.Default; } }
        /// <summary>基元字面量</summary>
        public Boolean OnPrimitiveLiteral { get { return _Tag == ExprTag.PrimitiveLiteral; } }
        /// <summary>记录字面量</summary>
        public Boolean OnRecordLiteral { get { return _Tag == ExprTag.RecordLiteral; } }
        /// <summary>标签联合字面量</summary>
        public Boolean OnTaggedUnionLiteral { get { return _Tag == ExprTag.TaggedUnionLiteral; } }
        /// <summary>枚举字面量</summary>
        public Boolean OnEnumLiteral { get { return _Tag == ExprTag.EnumLiteral; } }
        /// <summary>元组字面量</summary>
        public Boolean OnTupleLiteral { get { return _Tag == ExprTag.TupleLiteral; } }
        /// <summary>列表字面量</summary>
        public Boolean OnListLiteral { get { return _Tag == ExprTag.ListLiteral; } }
        /// <summary>类型字面量</summary>
        public Boolean OnTypeLiteral { get { return _Tag == ExprTag.TypeLiteral; } }
        /// <summary>变量引用</summary>
        public Boolean OnVariableRef { get { return _Tag == ExprTag.VariableRef; } }
        /// <summary>函数调用</summary>
        public Boolean OnFunctionCall { get { return _Tag == ExprTag.FunctionCall; } }
        /// <summary>转换</summary>
        public Boolean OnCast { get { return _Tag == ExprTag.Cast; } }
    }
    /// <summary>不变量定义</summary>
    [Record]
    public sealed class LetExpr
    {
        /// <summary>左</summary>
        public List<LeftValueDef> Left;
        /// <summary>右</summary>
        public Expr Right;
    }
    /// <summary>变量定义</summary>
    [Record]
    public sealed class VarExpr
    {
        /// <summary>左</summary>
        public List<LeftValueDef> Left;
        /// <summary>右</summary>
        public Optional<Expr> Right;
    }
    /// <summary>条件</summary>
    [Record]
    public sealed class IfExpr
    {
        /// <summary>分支</summary>
        public List<IfBranch> Branches;
    }
    /// <summary>匹配</summary>
    [Record]
    public sealed class MatchExpr
    {
        /// <summary>目标</summary>
        public Expr Target;
        /// <summary>选择</summary>
        public List<MatchAlternative> Alternatives;
    }
    /// <summary>枚举循环</summary>
    [Record]
    public sealed class ForExpr
    {
        /// <summary>集合</summary>
        public Expr Enumerable;
        /// <summary>变量</summary>
        public List<LeftValueDef> EnumeratedValue;
        /// <summary>循环体</summary>
        public Expr Body;
    }
    /// <summary>条件循环</summary>
    [Record]
    public sealed class WhileExpr
    {
        /// <summary>条件</summary>
        public Expr Condition;
        /// <summary>循环体</summary>
        public Expr Body;
    }
    /// <summary>赋值</summary>
    [Record]
    public sealed class AssignExpr
    {
        /// <summary>左</summary>
        public List<LeftValueRef> Left;
        /// <summary>右</summary>
        public Expr Right;
    }
    /// <summary>递增</summary>
    [Record]
    public sealed class IncreaseExpr
    {
        /// <summary>左</summary>
        public List<LeftValueRef> Left;
        /// <summary>右</summary>
        public Expr Right;
    }
    /// <summary>递减</summary>
    [Record]
    public sealed class DecreaseExpr
    {
        /// <summary>左</summary>
        public List<LeftValueRef> Left;
        /// <summary>右</summary>
        public Expr Right;
    }
    /// <summary>Lambda表达式</summary>
    [Record]
    public sealed class LambdaExpr
    {
        /// <summary>参数</summary>
        public List<LeftValueDef> Parameters;
        /// <summary>函数体</summary>
        public Expr Body;
    }
    /// <summary>基元字面量</summary>
    [Record]
    public sealed class PrimitiveLiteralExpr
    {
        /// <summary>类型</summary>
        public TypeSpec Type;
        /// <summary>值</summary>
        public Optional<String> Value;
    }
    /// <summary>记录字面量</summary>
    [Record]
    public sealed class RecordLiteralExpr
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>字段赋值</summary>
        public List<FieldAssign> FieldAssigns;
    }
    /// <summary>标签联合字面量</summary>
    [Record]
    public sealed class TaggedUnionLiteralExpr
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>选择</summary>
        public String Alternative;
        /// <summary>表达式</summary>
        public Optional<Expr> Expr;
    }
    /// <summary>枚举字面量</summary>
    [Record]
    public sealed class EnumLiteralExpr
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>名称</summary>
        public String Name;
    }
    /// <summary>元组字面量</summary>
    [Record]
    public sealed class TupleLiteralExpr
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>元素</summary>
        public List<Expr> Elements;
    }
    /// <summary>列表字面量</summary>
    [Record]
    public sealed class ListLiteralExpr
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>元素</summary>
        public List<Expr> Elements;
    }
    public enum VariableRefTag
    {
        /// <summary>名称</summary>
        Name = 0,
        /// <summary>当前对象</summary>
        This = 1,
        /// <summary>成员访问（静态和动态）</summary>
        MemberAccess = 2,
        /// <summary>索引器访问</summary>
        IndexerAccess = 3,
        /// <summary>泛型函数特化</summary>
        GenericFunctionSpec = 4
    }
    /// <summary>变量引用</summary>
    [TaggedUnion]
    public sealed class VariableRef
    {
        [Tag] public VariableRefTag _Tag;

        /// <summary>名称</summary>
        public String Name;
        /// <summary>当前对象</summary>
        public Unit This;
        /// <summary>成员访问（静态和动态）</summary>
        public MemberAccess MemberAccess;
        /// <summary>索引器访问</summary>
        public IndexerAccess IndexerAccess;
        /// <summary>泛型函数特化</summary>
        public GenericFunctionSpec GenericFunctionSpec;

        /// <summary>名称</summary>
        public static VariableRef CreateName(String Value) { return new VariableRef { _Tag = VariableRefTag.Name, Name = Value }; }
        /// <summary>当前对象</summary>
        public static VariableRef CreateThis() { return new VariableRef { _Tag = VariableRefTag.This, This = default(Unit) }; }
        /// <summary>成员访问（静态和动态）</summary>
        public static VariableRef CreateMemberAccess(MemberAccess Value) { return new VariableRef { _Tag = VariableRefTag.MemberAccess, MemberAccess = Value }; }
        /// <summary>索引器访问</summary>
        public static VariableRef CreateIndexerAccess(IndexerAccess Value) { return new VariableRef { _Tag = VariableRefTag.IndexerAccess, IndexerAccess = Value }; }
        /// <summary>泛型函数特化</summary>
        public static VariableRef CreateGenericFunctionSpec(GenericFunctionSpec Value) { return new VariableRef { _Tag = VariableRefTag.GenericFunctionSpec, GenericFunctionSpec = Value }; }

        /// <summary>名称</summary>
        public Boolean OnName { get { return _Tag == VariableRefTag.Name; } }
        /// <summary>当前对象</summary>
        public Boolean OnThis { get { return _Tag == VariableRefTag.This; } }
        /// <summary>成员访问（静态和动态）</summary>
        public Boolean OnMemberAccess { get { return _Tag == VariableRefTag.MemberAccess; } }
        /// <summary>索引器访问</summary>
        public Boolean OnIndexerAccess { get { return _Tag == VariableRefTag.IndexerAccess; } }
        /// <summary>泛型函数特化</summary>
        public Boolean OnGenericFunctionSpec { get { return _Tag == VariableRefTag.GenericFunctionSpec; } }
    }
    /// <summary>函数调用</summary>
    [Record]
    public sealed class FunctionCallExpr
    {
        /// <summary>函数</summary>
        public Expr Func;
        /// <summary>参数</summary>
        public List<Expr> Parameters;
    }
    /// <summary>转换</summary>
    [Record]
    public sealed class CastExpr
    {
        /// <summary>运算数</summary>
        public Expr Operand;
        /// <summary>目标类型</summary>
        public TypeSpec Type;
    }
    public enum LeftValueDefTag
    {
        /// <summary>变量</summary>
        Variable = 0,
        /// <summary>忽略</summary>
        Ignore = 1
    }
    /// <summary>左值定义</summary>
    [TaggedUnion]
    public sealed class LeftValueDef
    {
        [Tag] public LeftValueDefTag _Tag;

        /// <summary>变量</summary>
        public LocalVariableDef Variable;
        /// <summary>忽略</summary>
        public Optional<TypeSpec> Ignore;

        /// <summary>变量</summary>
        public static LeftValueDef CreateVariable(LocalVariableDef Value) { return new LeftValueDef { _Tag = LeftValueDefTag.Variable, Variable = Value }; }
        /// <summary>忽略</summary>
        public static LeftValueDef CreateIgnore(Optional<TypeSpec> Value) { return new LeftValueDef { _Tag = LeftValueDefTag.Ignore, Ignore = Value }; }

        /// <summary>变量</summary>
        public Boolean OnVariable { get { return _Tag == LeftValueDefTag.Variable; } }
        /// <summary>忽略</summary>
        public Boolean OnIgnore { get { return _Tag == LeftValueDefTag.Ignore; } }
    }
    /// <summary>条件分支</summary>
    [Record]
    public sealed class IfBranch
    {
        /// <summary>条件</summary>
        public Expr Condition;
        /// <summary>表达式</summary>
        public Expr Expr;
    }
    /// <summary>匹配选择</summary>
    [Record]
    public sealed class MatchAlternative
    {
        /// <summary>模式</summary>
        public MatchPattern Pattern;
        /// <summary>条件</summary>
        public Optional<Expr> Condition;
        /// <summary>表达式</summary>
        public Expr Expr;
    }
    public enum LeftValueRefTag
    {
        /// <summary>变量</summary>
        Variable = 0,
        /// <summary>忽略</summary>
        Ignore = 1
    }
    /// <summary>左值引用</summary>
    [TaggedUnion]
    public sealed class LeftValueRef
    {
        [Tag] public LeftValueRefTag _Tag;

        /// <summary>变量</summary>
        public VariableRef Variable;
        /// <summary>忽略</summary>
        public Unit Ignore;

        /// <summary>变量</summary>
        public static LeftValueRef CreateVariable(VariableRef Value) { return new LeftValueRef { _Tag = LeftValueRefTag.Variable, Variable = Value }; }
        /// <summary>忽略</summary>
        public static LeftValueRef CreateIgnore() { return new LeftValueRef { _Tag = LeftValueRefTag.Ignore, Ignore = default(Unit) }; }

        /// <summary>变量</summary>
        public Boolean OnVariable { get { return _Tag == LeftValueRefTag.Variable; } }
        /// <summary>忽略</summary>
        public Boolean OnIgnore { get { return _Tag == LeftValueRefTag.Ignore; } }
    }
    /// <summary>局部变量定义</summary>
    [Record]
    public sealed class LocalVariableDef
    {
        /// <summary>名称</summary>
        public String Name;
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
    }
    /// <summary>成员访问</summary>
    [Record]
    public sealed class MemberAccess
    {
        /// <summary>父结点</summary>
        public Expr Parent;
        /// <summary>子结点</summary>
        public VariableRef Child;
    }
    /// <summary>索引器访问</summary>
    [Record]
    public sealed class IndexerAccess
    {
        /// <summary>表达式</summary>
        public Expr Expr;
        /// <summary>索引</summary>
        public List<Expr> Index;
    }
    /// <summary>泛型函数特化</summary>
    [Record]
    public sealed class GenericFunctionSpec
    {
        /// <summary>函数</summary>
        public VariableRef Func;
        /// <summary>泛型参数</summary>
        public List<TypeSpec> Parameters;
    }
    /// <summary>字段赋值</summary>
    [Record]
    public sealed class FieldAssign
    {
        /// <summary>名称</summary>
        public String Name;
        /// <summary>表达式</summary>
        public Expr Expr;
    }
    public enum MatchPatternTag
    {
        /// <summary>错误</summary>
        Error = 0,
        /// <summary>歧义</summary>
        Ambiguous = 1,
        /// <summary>不变量定义</summary>
        Let = 2,
        /// <summary>忽略</summary>
        Ignore = 3,
        /// <summary>基元字面量</summary>
        PrimitiveLiteral = 4,
        /// <summary>记录模式</summary>
        RecordLiteral = 5,
        /// <summary>标签联合模式</summary>
        TaggedUnionLiteral = 6,
        /// <summary>枚举字面量</summary>
        EnumLiteral = 7,
        /// <summary>元组模式</summary>
        TupleLiteral = 8,
        /// <summary>列表模式</summary>
        ListLiteral = 9,
        /// <summary>变量引用</summary>
        VariableRef = 10
    }
    /// <summary>匹配模式</summary>
    [TaggedUnion]
    public sealed class MatchPattern
    {
        [Tag] public MatchPatternTag _Tag;

        /// <summary>错误</summary>
        public Unit Error;
        /// <summary>歧义</summary>
        public List<MatchPattern> Ambiguous;
        /// <summary>不变量定义</summary>
        public LeftValueDef Let;
        /// <summary>忽略</summary>
        public Unit Ignore;
        /// <summary>基元字面量</summary>
        public PrimitiveLiteralExpr PrimitiveLiteral;
        /// <summary>记录模式</summary>
        public RecordLiteralPattern RecordLiteral;
        /// <summary>标签联合模式</summary>
        public TaggedUnionLiteralPattern TaggedUnionLiteral;
        /// <summary>枚举字面量</summary>
        public EnumLiteralExpr EnumLiteral;
        /// <summary>元组模式</summary>
        public TupleLiteralPattern TupleLiteral;
        /// <summary>列表模式</summary>
        public ListLiteralPattern ListLiteral;
        /// <summary>变量引用</summary>
        public VariableRef VariableRef;

        /// <summary>错误</summary>
        public static MatchPattern CreateError() { return new MatchPattern { _Tag = MatchPatternTag.Error, Error = default(Unit) }; }
        /// <summary>歧义</summary>
        public static MatchPattern CreateAmbiguous(List<MatchPattern> Value) { return new MatchPattern { _Tag = MatchPatternTag.Ambiguous, Ambiguous = Value }; }
        /// <summary>不变量定义</summary>
        public static MatchPattern CreateLet(LeftValueDef Value) { return new MatchPattern { _Tag = MatchPatternTag.Let, Let = Value }; }
        /// <summary>忽略</summary>
        public static MatchPattern CreateIgnore() { return new MatchPattern { _Tag = MatchPatternTag.Ignore, Ignore = default(Unit) }; }
        /// <summary>基元字面量</summary>
        public static MatchPattern CreatePrimitiveLiteral(PrimitiveLiteralExpr Value) { return new MatchPattern { _Tag = MatchPatternTag.PrimitiveLiteral, PrimitiveLiteral = Value }; }
        /// <summary>记录模式</summary>
        public static MatchPattern CreateRecordLiteral(RecordLiteralPattern Value) { return new MatchPattern { _Tag = MatchPatternTag.RecordLiteral, RecordLiteral = Value }; }
        /// <summary>标签联合模式</summary>
        public static MatchPattern CreateTaggedUnionLiteral(TaggedUnionLiteralPattern Value) { return new MatchPattern { _Tag = MatchPatternTag.TaggedUnionLiteral, TaggedUnionLiteral = Value }; }
        /// <summary>枚举字面量</summary>
        public static MatchPattern CreateEnumLiteral(EnumLiteralExpr Value) { return new MatchPattern { _Tag = MatchPatternTag.EnumLiteral, EnumLiteral = Value }; }
        /// <summary>元组模式</summary>
        public static MatchPattern CreateTupleLiteral(TupleLiteralPattern Value) { return new MatchPattern { _Tag = MatchPatternTag.TupleLiteral, TupleLiteral = Value }; }
        /// <summary>列表模式</summary>
        public static MatchPattern CreateListLiteral(ListLiteralPattern Value) { return new MatchPattern { _Tag = MatchPatternTag.ListLiteral, ListLiteral = Value }; }
        /// <summary>变量引用</summary>
        public static MatchPattern CreateVariableRef(VariableRef Value) { return new MatchPattern { _Tag = MatchPatternTag.VariableRef, VariableRef = Value }; }

        /// <summary>错误</summary>
        public Boolean OnError { get { return _Tag == MatchPatternTag.Error; } }
        /// <summary>歧义</summary>
        public Boolean OnAmbiguous { get { return _Tag == MatchPatternTag.Ambiguous; } }
        /// <summary>不变量定义</summary>
        public Boolean OnLet { get { return _Tag == MatchPatternTag.Let; } }
        /// <summary>忽略</summary>
        public Boolean OnIgnore { get { return _Tag == MatchPatternTag.Ignore; } }
        /// <summary>基元字面量</summary>
        public Boolean OnPrimitiveLiteral { get { return _Tag == MatchPatternTag.PrimitiveLiteral; } }
        /// <summary>记录模式</summary>
        public Boolean OnRecordLiteral { get { return _Tag == MatchPatternTag.RecordLiteral; } }
        /// <summary>标签联合模式</summary>
        public Boolean OnTaggedUnionLiteral { get { return _Tag == MatchPatternTag.TaggedUnionLiteral; } }
        /// <summary>枚举字面量</summary>
        public Boolean OnEnumLiteral { get { return _Tag == MatchPatternTag.EnumLiteral; } }
        /// <summary>元组模式</summary>
        public Boolean OnTupleLiteral { get { return _Tag == MatchPatternTag.TupleLiteral; } }
        /// <summary>列表模式</summary>
        public Boolean OnListLiteral { get { return _Tag == MatchPatternTag.ListLiteral; } }
        /// <summary>变量引用</summary>
        public Boolean OnVariableRef { get { return _Tag == MatchPatternTag.VariableRef; } }
    }
    /// <summary>记录模式</summary>
    [Record]
    public sealed class RecordLiteralPattern
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>字段赋值</summary>
        public List<FieldAssignPattern> FieldAssigns;
    }
    /// <summary>标签联合模式</summary>
    [Record]
    public sealed class TaggedUnionLiteralPattern
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>选择</summary>
        public String Alternative;
        /// <summary>表达式</summary>
        public Optional<MatchPattern> Expr;
    }
    /// <summary>元组模式</summary>
    [Record]
    public sealed class TupleLiteralPattern
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>元素</summary>
        public List<MatchPattern> Elements;
    }
    /// <summary>列表模式</summary>
    [Record]
    public sealed class ListLiteralPattern
    {
        /// <summary>类型</summary>
        public Optional<TypeSpec> Type;
        /// <summary>元素</summary>
        public List<MatchPattern> Elements;
    }
    /// <summary>字段赋值模式</summary>
    [Record]
    public sealed class FieldAssignPattern
    {
        /// <summary>名称</summary>
        public String Name;
        /// <summary>表达式</summary>
        public MatchPattern Expr;
    }
}
