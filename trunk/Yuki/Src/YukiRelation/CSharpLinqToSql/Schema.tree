$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 对象类型结构C# Linq to SQL数据库模板数据
      Version:     2012.12.13.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
        PrimitiveMapping
            Name Boolean
            PlatformName System.Boolean
        PrimitiveMapping
            Name String
            PlatformName System.String
        PrimitiveMapping
            Name Int
            PlatformName System.Int32
        PrimitiveMapping
            Name Real
            PlatformName System.Double
        PrimitiveMapping
            Name Binary
            PlatformName System.Byte[]
    Templates
        Template
            Name Main
            //Parameters: ${EntityNamespaceName}, ${ContextNamespaceName}, ${Imports}, ${Primitives}, ${EntityComplexTypes}, ${ContextComplexTypes}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using ${Imports};
                    using [[${EntityNamespaceName}]];
                    ${Primitives}

                    namespace [[${EntityNamespaceName}]]
                    {
                        ${EntityComplexTypes}
                    }

                    namespace [[${ContextNamespaceName}]]
                    {
                        ${ContextComplexTypes}
                    }

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
        Template
            Name Primitive
            //Parameters: ${Name}, ${PlatformName}
            Value
                $String
                    using [[${Name}]] = ${PlatformName};
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${Name}]] = ${Value},
        Template
            Name Enum
            //Parameters: ${Name}, ${UnderlyingType}, ${Literals}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public enum [[${Name}]] : ${UnderlyingType}
                    {
                        ${Literals}
                    }
        Template
            Name Table
            //Parameters: ${RecordName}, ${TableName}, ${StorageFields}, ${Properties}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Table(Name = "${TableName}")]
                    public sealed class [[${RecordName}]] : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
                    {
                        ${StorageFields}

                        ${Properties}

                        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
                        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

                        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
                        private void SendPropertyChanging()
                        {
                            if ((PropertyChanging != null))
                            {
                                PropertyChanging(this, emptyChangingEventArgs);
                            }
                        }
                        private void SendPropertyChanged(String propertyName)
                        {
                            if ((PropertyChanged != null))
                            {
                                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                            }
                        }
                    }
        Template
            Name SimpleStorageField
            //Parameters: ${Name}, ${StorageType}
            Value
                $String
                    private [[${StorageType}]] [[_${Name}]];
        Template
            Name OneStorageField
            //Parameters: ${Name}, ${StorageType}
            Value
                $String
                    private [[${StorageType}]] [[_${Name}]] = default([[${StorageType}]]);
        Template
            Name ManyStorageField
            //Parameters: ${Name}, ${StorageType}
            Value
                $String
                    private [[${StorageType}]] [[_${Name}]] = new [[${StorageType}]]();
        Template
            Name ColumnProperty
            //Parameters: ${Name}, ${ColumnParameters}, ${PropertyType}, ${AssociationChecks}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Column(${ColumnParameters})]
                    public [[${PropertyType}]] [[${Name}]]
                    {
                        get
                        {
                            return [[_${Name}]];
                        }
                        set
                        {
                            if ([[_${Name}]] != value)
                            {
                                ${AssociationChecks}
                                SendPropertyChanging();
                                [[_${Name}]] = value;
                                SendPropertyChanged("${Name}");
                            }
                        }
                    }
        Template
            Name AssociationCheck
            //Parameters: ${AssociationName}
            Value
                $String
                    if ([[_${AssociationName}]].HasLoadedOrAssignedValue) { throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException(); }
        Template
            Name OneAssociationProperty
            //Parameters: ${Name}, ${AssociationParameters}, ${PropertyType}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Association(${AssociationParameters})]
                    public [[${PropertyType}]] [[${Name}]]
                    {
                        get
                        {
                            return [[_${Name}]].Entity;
                        }
                        set
                        {
                            if ([[_${Name}]].Entity != value)
                            {
                                SendPropertyChanging();
                                [[_${Name}]].Entity = value;
                                SendPropertyChanged("${Name}");
                            }
                        }
                    }
        Template
            Name ManyAssociationProperty
            //Parameters: ${Name}, ${AssociationParameters}, ${PropertyType}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Association(${AssociationParameters})]
                    public [[${PropertyType}]] [[${Name}]]
                    {
                        get
                        {
                            return [[_${Name}]];
                        }
                        set
                        {
                            [[_${Name}]].Assign(value);
                        }
                    }
        Template
            Name TwoWayForeignKeyOneAssociationProperty
            //Parameters: ${Name}, ${AssociationParameters}, ${PropertyType}, ${KeyColumnAssignments}, ${ThisKeyColumnsClear}, ${OtherMember}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Association(${AssociationParameters})]
                    public [[${PropertyType}]] [[${Name}]]
                    {
                        get
                        {
                            return [[_${Name}]].Entity;
                        }
                        set
                        {
                            var previousValue = [[_${Name}]].Entity;
                            if (previousValue != value || ![[_${Name}]].HasLoadedOrAssignedValue)
                            {
                                SendPropertyChanging();
                                if ((previousValue != null))
                                {
                                    [[_${Name}]].Entity = null;
                                    previousValue.[[${OtherMember}]] = null;
                                }
                                [[_${Name}]].Entity = value;
                                if ((value != null))
                                {
                                    value.[[${OtherMember}]] = this;
                                    ${KeyColumnAssignments}
                                }
                                else
                                {
                                    ${ThisKeyColumnsClear}
                                }
                                SendPropertyChanged("${Name}");
                            }
                        }
                    }
        Template
            Name TwoWayForeignKeyManyAssociationProperty
            //Parameters: ${Name}, ${AssociationParameters}, ${PropertyType}, ${KeyColumnAssignments}, ${ThisKeyColumnsClear}, ${OtherMember}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [System.Data.Linq.Mapping.Association(${AssociationParameters})]
                    public [[${PropertyType}]] [[${Name}]]
                    {
                        get
                        {
                            return [[_${Name}]].Entity;
                        }
                        set
                        {
                            var previousValue = [[_${Name}]].Entity;
                            if (previousValue != value || ![[_${Name}]].HasLoadedOrAssignedValue)
                            {
                                SendPropertyChanging();
                                if ((previousValue != null))
                                {
                                    [[_${Name}]].Entity = null;
                                    previousValue.[[${OtherMember}]].Remove(this);
                                }
                                [[_${Name}]].Entity = value;
                                if ((value != null))
                                {
                                    value.[[${OtherMember}]].Add(this);
                                    ${KeyColumnAssignments}
                                }
                                else
                                {
                                    ${ThisKeyColumnsClear}
                                }
                                SendPropertyChanged("${Name}");
                            }
                        }
                    }
        Template
            Name KeyColumnAssignment
            //Parameters: ${Name}, ${OtherMember}
            Value
                $String
                    [[_${Name}]] = value.[[${OtherMember}]];
        Template
            Name KeyColumnAssignmentNull
            //Parameters: ${Name}, ${StorageType}
            Value
                $String
                    [[_${Name}]] = default([[${StorageType}]]);
        Template
            Name Context
            //Parameters: ${DatabaseName}, ${ContextClassName}, ${TableGetters}
            Value
                $String
                    [System.Data.Linq.Mapping.Database(Name = "${DatabaseName}")]
                    public partial class [[${ContextClassName}]] : System.Data.Linq.DataContext, IReadonlyContext
                    {
                        public [[${ContextClassName}]](System.Data.IDbConnection connection) :
                            base(connection)
                        {
                        }

                        ${TableGetters}
                    }
        Template
            Name TableGetter
            //Parameters: ${RecordName}, ${TableName}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public System.Data.Linq.Table<[[${RecordName}]]> [[${TableName}]] { get { return this.GetTable<[[${RecordName}]]>(); } }
                    IQueryable<[[${RecordName}]]> IReadonlyContext.[[${TableName}]] { get { return [[${TableName}]]; } }
        Template
            Name StaticDataContext
            //Parameters: ${ContextClassName}, ${TableGetters}, ${StaticDataLoadWiths}, ${StaticDataTableSets}
            Value
                $String
                    public partial class StaticDataContext : IReadonlyContext
                    {
                        public StaticDataContext(${ContextClassName} Context)
                        {
                            var LoadOptions = new System.Data.Linq.DataLoadOptions();
                            ${StaticDataLoadWiths}
                            Context.LoadOptions = LoadOptions;
                            ${StaticDataTableSets}
                        }

                        ${TableGetters}
                    }
        Template
            Name StaticDataTableGetter
            //Parameters: ${RecordName}, ${TableName}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public IQueryable<[[${RecordName}]]> [[${TableName}]] { get; private set; }
        Template
            Name StaticDataLoadWith
            //Parameters: ${RecordName}, ${AssociationFieldName}
            Value
                $String
                    LoadOptions.LoadWith<[[${RecordName}]]>(o => o.[[${AssociationFieldName}]]);
        Template
            Name StaticDataTableSet
            //Parameters: ${TableName}
            Value
                $String
                    this.[[${TableName}]] = Context.[[${TableName}]].ToArray().AsQueryable();
        Template
            Name IReadonlyContext
            //Parameters: ${TableGetters}
            Value
                $String
                    public interface IReadonlyContext
                    {
                        ${TableGetters}
                    }
        Template
            Name IReadonlyContextTableGetter
            //Parameters: ${RecordName}, ${TableName}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    IQueryable<[[${RecordName}]]> [[${TableName}]] { get; }
        Template
            Name DbExtensions
            //Parameters: ${Methods}
            Value
                $String
                    public static class DbExtensions
                    {
                        ${Methods}
                    }
        Template
            Name WhereKeyIs
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static IQueryable<[[${RecordName}]]> [[Where${KeyFriendlyName}Is]](this IQueryable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions};
                    }
                    public static IEnumerable<[[${RecordName}]]> [[Where${KeyFriendlyName}Is]](this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions};
                    }
        Template
            Name ByKey
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static [[${RecordName}]] [[By${KeyFriendlyName}]](this IQueryable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions}.Single();
                    }
                    public static [[${RecordName}]] [[By${KeyFriendlyName}]](this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions}.Single();
                    }
        Template
            Name ByKeyT
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static _T [[By${KeyFriendlyName}]]<_T>(this IQueryable<[[${RecordName}]]> _This, ${KeyParameters}, Func<[[${RecordName}]], _T> _Projector)
                    {
                        return _This.${KeyWhereExpressions}.Select(_Projector).Single();
                    }
                    public static _T [[By${KeyFriendlyName}]]<_T>(this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters}, Func<[[${RecordName}]], _T> _Projector)
                    {
                        return _This.${KeyWhereExpressions}.Select(_Projector).Single();
                    }
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /// <summary>
                    /// ${Description}
                    /// </summary>
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /// <summary>${Description}</summary>
