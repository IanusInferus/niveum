$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C# Krustallos代码模板数据
      Version:     2014.10.23.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters: ${EntityNamespaceName}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Collections.Concurrent;
                    using System.Linq;
                    using System.Diagnostics;
                    using System.Data;
                    using Krustallos;
                    using ${EntityNamespaceName};
        Template
            Name Data
            //Parameters: ${Indices}
            Value
                $String
                    public class KrustallosData
                    {
                        ${Indices}
                    }
        Template
            Name Data_Index
            //Parameters: ${IndexName}, ${IndexType}, ${KeyComparer}
            Value
                $String
                    public VersionedStore<[[${IndexType}]]> [[${IndexName}]] = new VersionedStore<[[${IndexType}]]>(() => new [[${IndexType}]](${KeyComparer}));
        Template
            Name DataAccessBase
            //Parameters:
            Value
                $String
                    public partial class KrustallosDataAccess : IDataAccess
                    {
                        private Instance Instance;
                        private KrustallosData Data;
                        private Transaction Transaction;
                        private ITransactionLock TransactionLock;
                        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
                        {
                            this.Instance = Instance;
                            this.Data = Data;
                            this.Transaction = new Transaction(Instance, IsolationLevel);
                            this.TransactionLock = TransactionLock;
                        }
                        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
                        {
                            this.Instance = Instance;
                            this.Data = Data;
                            this.Transaction = new Transaction(Instance, IsolationLevel);
                            this.TransactionLock = TransactionLockFactory(Transaction);
                        }

                        public void Dispose()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Revert();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                        }

                        public void Complete()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Commit();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                        }
                    }
        Template
            Name DataAccessClones
            //Parameters: ${Clones}
            Value
                $String
                    public partial class KrustallosDataAccess
                    {
                        ${Clones}
                    }
        Template
            Name DataAccessClone
            //Parameters: ${EntityName}, ${FieldClones}
            Value
                $String
                    private static [[${EntityName}]] Clone([[${EntityName}]] v)
                    {
                        var nv = new [[${EntityName}]]();
                        ${FieldClones}
                        return nv;
                    }
        Template
            Name DataAccessClone_Field
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]];
        Template
            Name DataAccessClone_BinaryField
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]].ToList();
        Template
            Name DataAccessClone_OptionalBinaryField
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]].OnHasValue ? v.[[${FieldName}]].Value.ToList() : v.[[${FieldName}]];
        Template
            Name DataAccess
            //Parameters: ${Queries}
            Value
                $String
                    public partial class KrustallosDataAccess
                    {
                        ${Queries}
                    }
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    public ${Signature}
                    {
                        ${Content}
                    }
        Template
            Name SelectLock_Optional
            //Parameters: ${Function}, ${IndexName}, ${LockingStatement}, ${Parameters}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    var _l_ = Transaction.[[${Function}]](this.Data.[[${IndexName}]], _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
                    if (_l_.Count == 0) { return null; }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    return _l_.Single();
        Template
            Name SelectLock_One
            //Parameters: ${Function}, ${IndexName}, ${LockingStatement}, ${Parameters}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    var _l_ = Transaction.[[${Function}]](this.Data.[[${IndexName}]], _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
                    if (_l_.Count == 0)
                    {
                        throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    return _l_.Single();
        Template
            Name SelectLock_ManyAllRange
            //Parameters: ${Function}, ${IndexName}, ${LockingStatement}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Transaction.[[${Function}]](this.Data.[[${IndexName}]], _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
        Template
            Name SelectLock_Count
            //Parameters: ${Function}, ${IndexName}, ${LockingStatement}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Transaction.[[${Function}]](this.Data.[[${IndexName}]], _d_ => _d_${Filters});
        Template
            Name Lock_LockingStatement
            //Parameters: ${EntityNameAndParameterAndValues}
            Value
                $String
                    if (TransactionLock != null) { TransactionLock.Enter(new Object[] { ${EntityNameAndParameterAndValues} }); }
        Template
            Name InsertUpdateUpsert_OptionalOne
            //Parameters: ${UpdateStatements}
            Value
                $String
                    var _v_ = Clone(v);
                    ${UpdateStatements}
        Template
            Name InsertUpdateUpsert_Many
            //Parameters: ${UpdateStatements}
            Value
                $String
                    foreach (var v in l)
                    {
                        var _v_ = Clone(v);
                        ${UpdateStatements}
                    }
        Template
            Name InsertUpdateUpsert_UpdateStatement
            //Parameters: ${Index}, ${IndexName}, ${Function}, ${Key}
            Value
                $String
                    Transaction.UpdateVersioned(new String[] { ${Index} }, this.Data.[[${IndexName}]], _d_ => _d_.[[${Function}]](new Key(${Key}), _v_));
        Template
            Name Delete_Optional
            //Parameters: ${IndexName}, ${Parameters}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckCurrentVersioned(this.Data.[[${IndexName}]], _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0) { return; }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    var v = _l_.Single();
                    ${UpdateStatements}
        Template
            Name Delete_One
            //Parameters: ${IndexName}, ${Parameters}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckCurrentVersioned(this.Data.[[${IndexName}]], _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0)
                    {
                        throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    var v = _l_.Single();
                    ${UpdateStatements}
        Template
            Name Delete_ManyRange
            //Parameters: ${IndexName}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckCurrentVersioned(this.Data.[[${IndexName}]], _d_ => _d_${Filters}).ToList();
                    ${UpdateStatements}
        Template
            Name Delete_All
            //Parameters: ${UpdateStatements}
            Value
                $String
                    ${UpdateStatements}
        Template
            Name Delete_UpdateStatement_OptionalOne
            //Parameters: ${Index}, ${IndexName}, ${Function}, ${Key}
            Value
                $String
                    Transaction.UpdateVersioned(new String[] { ${Index} }, this.Data.[[${IndexName}]], _d_ => _d_.[[${Function}]](new Key(${Key})));
        Template
            Name Delete_UpdateStatement_ManyRange
            //Parameters: ${Index}, ${IndexName}, ${Function}, ${Key}
            Value
                $String
                    Transaction.UpdateVersioned(new String[] { ${Index} }, this.Data.[[${IndexName}]], _d_ => _d_.[[${Function}]](_l_.Select(v => new Key(${Key}))));
        Template
            Name Delete_UpdateStatement_All
            //Parameters: ${Index}, ${IndexName}, ${Function}
            Value
                $String
                    Transaction.UpdateVersioned(new String[] { ${Index} }, this.Data.[[${IndexName}]], _d_ => _d_.[[${Function}]]());
        Template
            Name DataAccessPool
            //Parameters: ${Hash}
            Value
                $String
                    public class KrustallosDataAccessPool
                    {
                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        private static ConcurrentDictionary<String, KeyValuePair<Instance, KrustallosData>> Instances = new ConcurrentDictionary<String, KeyValuePair<Instance, KrustallosData>>();

                        public IDataAccess Create(String ConnectionString)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel)
                        {
                            return Create(ConnectionString, IsolationLevel, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel, t => TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
                        {
                            var Pair = Instances.GetOrAdd(ConnectionString, Key => new KeyValuePair<Instance, KrustallosData>(new Instance(), new KrustallosData()));
                            return new KrustallosDataAccess(Pair.Key, Pair.Value, IsolationLevel, TransactionLockFactory);
                        }
                    }
