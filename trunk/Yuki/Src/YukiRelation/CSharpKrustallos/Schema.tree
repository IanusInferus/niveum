$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C# Krustallos代码模板数据
      Version:     2015.05.02.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}
                    using Version = Krustallos.Version;

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}
                    using Version = Krustallos.Version;

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters: ${EntityNamespaceName}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Collections.Concurrent;
                    using System.Linq;
                    using System.Diagnostics;
                    using System.Data;
                    using Firefly;
                    using Firefly.Mapping;
                    using Firefly.Mapping.Binary;
                    using Firefly.Streaming;
                    using Firefly.TextEncoding;
                    using Krustallos;
                    using ${EntityNamespaceName};
        Template
            Name Data
            //Parameters: ${IndiceDefinitions}, ${IndiceInitializations}
            Value
                $String
                    public class KrustallosData
                    {
                        ${IndiceDefinitions}

                        public KrustallosData(int NumPartition)
                        {
                            if (NumPartition < 1) { throw new ArgumentException(); }
                            ${IndiceInitializations}
                        }
                    }
        Template
            Name Data_IndexDefinition
            //Parameters: ${IndexName}, ${IndexType}
            Value
                $String
                    public VersionedStore<[[${IndexType}]]> [[${IndexName}]];
        Template
            Name Data_IndexInitialization
            //Parameters: ${Index}, ${IndexName}, ${IndexType}, ${KeyComparer}, ${NumPartition}
            Value
                $String
                    this.[[${IndexName}]] = new VersionedStore<[[${IndexType}]]>(new String[] { ${Index} }, () => new [[${IndexType}]](${KeyComparer}), ${NumPartition});
        Template
            Name DataAccessBase
            //Parameters:
            Value
                $String
                    public partial class KrustallosDataAccess : IDataAccess
                    {
                        private Instance Instance;
                        private KrustallosData Data;
                        private Transaction Transaction;
                        private ITransactionLock TransactionLock;
                        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
                        {
                            this.Instance = Instance;
                            this.Data = Data;
                            this.Transaction = new Transaction(this.Instance, IsolationLevel);
                            this.TransactionLock = TransactionLock;
                        }
                        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
                        {
                            this.Instance = Instance;
                            this.Data = Data;
                            this.Transaction = new Transaction(this.Instance, IsolationLevel);
                            this.TransactionLock = TransactionLockFactory(Transaction);
                        }

                        public void Dispose()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Revert();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                        }

                        public void Complete()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Commit();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                        }
                    }
        Template
            Name DataAccessClones
            //Parameters: ${Clones}
            Value
                $String
                    public partial class KrustallosDataAccess
                    {
                        ${Clones}
                    }
        Template
            Name DataAccessClone
            //Parameters: ${EntityName}, ${FieldClones}
            Value
                $String
                    private static [[${EntityName}]] Clone([[${EntityName}]] v)
                    {
                        var nv = new [[${EntityName}]]();
                        ${FieldClones}
                        return nv;
                    }
        Template
            Name DataAccessClone_Field
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]];
        Template
            Name DataAccessClone_BinaryField
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]].ToList();
        Template
            Name DataAccessClone_OptionalBinaryField
            //Parameters: ${FieldName}
            Value
                $String
                    nv.[[${FieldName}]] = v.[[${FieldName}]].OnHasValue ? v.[[${FieldName}]].Value.ToList() : v.[[${FieldName}]];
        Template
            Name DataAccess
            //Parameters: ${Queries}
            Value
                $String
                    public partial class KrustallosDataAccess
                    {
                        ${Queries}
                    }
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    public ${Signature}
                    {
                        ${Content}
                    }
        Template
            Name SelectLock_Optional
            //Parameters: ${IndexName}, ${LockingStatement}, ${Parameters}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
                    if (_l_.Count == 0) { return null; }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    return _l_.Single();
        Template
            Name SelectLock_One
            //Parameters: ${IndexName}, ${LockingStatement}, ${Parameters}, ${PartitionIndex}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
                    if (_l_.Count == 0)
                    {
                        throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    return _l_.Single();
        Template
            Name SelectLock_ManyAllRange
            //Parameters: ${IndexName}, ${LockingStatement}, ${PartitionIndex}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}.Select(_e_ => Clone(_e_))).ToList();
        Template
            Name SelectLock_AllRange_Partitioned
            //Parameters: ${IndexName}, ${LockingStatement}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Enumerable.Range(0, this.Data.[[${IndexName}]].NumPartition).SelectMany(_i_ => Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], _i_, _d_ => _d_${Filters}.Select(_e_ => Clone(_e_)))).ToList();
        Template
            Name SelectLock_Count
            //Parameters: ${IndexName}, ${LockingStatement}, ${PartitionIndex}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters});
        Template
            Name SelectLock_Count_Partitioned
            //Parameters: ${IndexName}, ${LockingStatement}, ${Filters}
            Value
                $String
                    ${LockingStatement}
                    return Enumerable.Range(0, this.Data.[[${IndexName}]].NumPartition).Sum(_i_ => Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], _i_, _d_ => _d_${Filters}));
        Template
            Name Lock_LockingStatement
            //Parameters: ${EntityNameAndParameterAndValues}
            Value
                $String
                    if (TransactionLock != null) { TransactionLock.Enter(new Object[] { ${EntityNameAndParameterAndValues} }); }
        Template
            Name Insert_OptionalOne
            //Parameters: ${UpdateStatements}
            Value
                $String
                    var _v_ = Clone(v);
                    ${UpdateStatements}
        Template
            Name Insert_Many
            //Parameters: ${UpdateStatements}
            Value
                $String
                    foreach (var v in l)
                    {
                        var _v_ = Clone(v);
                        ${UpdateStatements}
                    }
        Template
            Name Insert_UpdateStatement
            //Parameters: ${IndexName}, ${Function}, ${PartitionIndex}, ${Key}
            Value
                $String
                    Transaction.UpdateVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_.[[${Function}]](new Key(${Key}), _v_));
        Template
            Name Update_Optional
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${DeleteStatements}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0) { return; }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    ${DeleteStatements}
                    {
                        var _v_ = Clone(v);
                        ${UpdateStatements}
                    }
        Template
            Name Update_One
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${DeleteStatements}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0)
                    {
                        throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    ${DeleteStatements}
                    {
                        var _v_ = Clone(v);
                        ${UpdateStatements}
                    }
        Template
            Name Update_Many
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${DeleteStatements}, ${UpdateStatements}
            Value
                $String
                    foreach (var v in l)
                    {
                        var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                        if (_l_.Count == 0)
                        {
                            throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                        }
                        if (_l_.Count > 1)
                        {
                            throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                        }
                        ${DeleteStatements}
                        {
                            var _v_ = Clone(v);
                            ${UpdateStatements}
                        }
                    }
        Template
            Name Upsert_One
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${DeleteStatements}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 0)
                    {
                        ${DeleteStatements}
                    }
                    {
                        var _v_ = Clone(v);
                        ${UpdateStatements}
                    }
        Template
            Name Upsert_Many
            //Parameters: ${IndexName}, ${PartitionIndex}, ${Filters}, ${DeleteStatements}, ${UpdateStatements}
            Value
                $String
                    foreach (var v in l)
                    {
                        var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                        if (_l_.Count > 1)
                        {
                            throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                        }
                        if (_l_.Count > 0)
                        {
                            ${DeleteStatements}
                        }
                        {
                            var _v_ = Clone(v);
                            ${UpdateStatements}
                        }
                    }
        Template
            Name Delete_Optional
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0) { return; }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    var _v_ = _l_.Single();
                    ${UpdateStatements}
        Template
            Name Delete_One
            //Parameters: ${IndexName}, ${Parameters}, ${PartitionIndex}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0)
                    {
                        throw new InvalidOperationException("NoValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    if (_l_.Count > 1)
                    {
                        throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { ${Parameters} }).Select(o => o.ToString()).ToArray()) + ")");
                    }
                    var _v_ = _l_.Single();
                    ${UpdateStatements}
        Template
            Name Delete_ManyRange
            //Parameters: ${IndexName}, ${PartitionIndex}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_${Filters}).ToList();
                    if (_l_.Count == 0) { return; }
                    ${UpdateStatements}

        Template
            Name Delete_ManyRange_Partitioned
            //Parameters: ${IndexName}, ${Filters}, ${UpdateStatements}
            Value
                $String
                    var _l_ = Enumerable.Range(0, this.Data.[[${IndexName}]].NumPartition).SelectMany(_i_ => Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], _i_, _d_ => _d_${Filters})).ToList();
                    if (_l_.Count == 0) { return; }
                    ${UpdateStatements}
        Template
            Name Delete_All
            //Parameters: ${UpdateStatements}
            Value
                $String
                    ${UpdateStatements}
        Template
            Name Delete_UpdateStatement_OptionalOne
            //Parameters: ${IndexName}, ${PartitionIndex}, ${Function}, ${Key}
            Value
                $String
                    Transaction.UpdateVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_.[[${Function}]](new Key(${Key})));
        Template
            Name Delete_UpdateStatement_ManyRange
            //Parameters: ${IndexName}, ${PartitionIndex}, ${Function}, ${Key}
            Value
                $String
                    foreach (var _v_ in _l_)
                    {
                        Transaction.UpdateVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_.[[${Function}]](new Key(${Key})));
                    }
        Template
            Name Delete_UpdateStatement_All
            //Parameters: ${IndexName}, ${PartitionIndex}, ${Function}
            Value
                $String
                    Transaction.UpdateVersioned(this.Data.[[${IndexName}]], ${PartitionIndex}, _d_ => _d_.[[${Function}]]());
        Template
            Name Delete_UpdateStatement_All_Partitioned
            //Parameters: ${IndexName}, ${Function}
            Value
                $String
                    for (int _i_ = 0; _i_ < this.Data.[[${IndexName}]].NumPartition; _i_ += 1)
                    {
                        Transaction.UpdateVersioned(this.Data.[[${IndexName}]], _i_, _d_ => _d_.[[${Function}]]());
                    }
        Template
            Name LoadSave
            //Parameters: ${Hash}, ${Loads}, ${Saves}
            Value
                $String
                    public partial class KrustallosDataAccess
                    {
                        private const UInt64 Hash = 0x${Hash};
                        public Version GetReaderVersion()
                        {
                            return Transaction.GetReaderVersion();
                        }
                        public Yuki.RelationSchema.Schema Load(IBinaryReader<IReadableStream> sbr, IBinaryReader<IReadableStream> br, String Path)
                        {
                            using (var s = Streams.OpenReadable(Path))
                            {
                                return Load(sbr, br, s);
                            }
                        }
                        public void Save(IBinaryWriter<IWritableStream> sbw, IBinaryWriter<IWritableStream> bw, String Path, Yuki.RelationSchema.Schema Schema)
                        {
                            using (var s = Streams.CreateResizable(Path))
                            {
                                Save(sbw, bw, s, Schema);
                            }
                        }
                        public Yuki.RelationSchema.Schema Load(IBinaryReader<IReadableStream> sbr, IBinaryReader<IReadableStream> br, IReadableStream s)
                        {
                            var Hash = s.ReadUInt64();
                            if (Hash != KrustallosDataAccess.Hash) { throw new InvalidOperationException(); }
                            var Schema = sbr.Read<Yuki.RelationSchema.Schema>(s);
                            ${Loads}
                            return Schema;
                        }
                        public void Save(IBinaryWriter<IWritableStream> sbw, IBinaryWriter<IWritableStream> bw, IWritableStream s, Yuki.RelationSchema.Schema Schema)
                        {
                            s.WriteUInt64(KrustallosDataAccess.Hash);
                            sbw.Write(Schema, s);
                            ${Saves}
                        }
                    }
        Template
            Name LoadSave_Load
            //Parameters: ${IndexNames}, ${Partitions}, ${Updates}, ${EntityName}
            Value
                $String
                    {
                        var Count = s.ReadInt32();
                        for (int _k_ = 0; _k_ < Count; _k_ += 1)
                        {
                            var v = br.Read<[[${EntityName}]]>(s);
                            ${Partitions}
                            var [[${IndexNames}]] = [[p${IndexNames}]].GetLastVersionContent();
                            ${Updates}
                            [[p${IndexNames}]].PutVersion(new Version(0), [[${IndexNames}]]);
                        }
                    }
        Template
            Name LoadSave_Partition
            //Parameters: ${PartitionIndex}, ${IndexName}
            Value
                $String
                    var [[p${IndexName}]] = this.Data.[[${IndexName}]].GetPartition(${PartitionIndex});
        Template
            Name LoadSave_Update
            //Parameters: ${IndexName}, ${Key}
            Value
                $String
                    [[${IndexName}]] = [[${IndexName}]].AddOrSetItem(new Key(${Key}), v);
        Template
            Name LoadSave_Save
            //Parameters: ${IndexName}
            Value
                $String
                    {
                        var Partitions = Enumerable.Range(0, this.Data.[[${IndexName}]].NumPartition).Select(_i_ => Transaction.CheckReaderVersioned(this.Data.[[${IndexName}]], _i_, _d_ => _d_)).ToList();
                        var Count = Partitions.Select(_p_ => _p_.Count).Sum();
                        s.WriteInt32(Count);
                        foreach (var v in Partitions.SelectMany(_d_ => _d_).Select(_v_ => _v_.Value))
                        {
                            bw.Write(v, s);
                        }
                    }
        Template
            Name Serializer
            //Parameters:
            Value
                $String
                    public class KrustallosSerializer
                    {
                        public static BinarySerializer Create()
                        {
                            var bs = new BinarySerializer();
                            var st = new StringTranslator();
                            bs.PutReaderTranslator(st);
                            bs.PutWriterTranslator(st);
                            bs.PutCounterTranslator(st);
                            return bs;
                        }
                    
                        private class StringTranslator : IProjectorToProjectorDomainTranslator<String, Byte[]>, IProjectorToProjectorRangeTranslator<String, Byte[]>
                        {
                            public Func<String, R> TranslateProjectorToProjectorDomain<R>(Func<Byte[], R> Projector)
                            {
                                return s => Projector(TextEncoding.UTF16.GetBytes(s));
                            }
                    
                            public Func<D, String> TranslateProjectorToProjectorRange<D>(Func<D, Byte[]> Projector)
                            {
                                return k => TextEncoding.UTF16.GetString(Projector(k));
                            }
                        }
                    }
        Template
            Name DataAccessPool
            //Parameters: ${Hash}
            Value
                $String
                    public class KrustallosDataAccessPool
                    {
                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        private Dictionary<String, Lazy<KeyValuePair<Instance, KrustallosData>>> Instances = new Dictionary<String, Lazy<KeyValuePair<Instance, KrustallosData>>>();

                        public IDataAccess Create(String ConnectionString)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel)
                        {
                            return Create(ConnectionString, IsolationLevel, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel, t => TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
                        {
                            return Create(ConnectionString, IsolationLevel, TransactionLockFactory, 16);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, ITransactionLock TransactionLock, int NumPartition)
                        {
                            return Create(ConnectionString, IsolationLevel, t => TransactionLock, NumPartition);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory, int NumPartition)
                        {
                            Lazy<KeyValuePair<Instance, KrustallosData>> LazyPair;
                            lock (Instances)
                            {
                                if (Instances.ContainsKey(ConnectionString))
                                {
                                    LazyPair = Instances[ConnectionString];
                                }
                                else
                                {
                                    LazyPair = new Lazy<KeyValuePair<Instance, KrustallosData>>(() => new KeyValuePair<Instance, KrustallosData>(new Instance(), new KrustallosData(NumPartition)));
                                    Instances.Add(ConnectionString, LazyPair);
                                }
                            }
                            var Pair = LazyPair.Value;
                            return new KrustallosDataAccess(Pair.Key, Pair.Value, IsolationLevel, TransactionLockFactory);
                        }
                    }
