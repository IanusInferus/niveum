$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C# PostgreSQL代码模板数据
      Version:     2013.10.31.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters: ${EntityNamespaceName}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using System.Data;
                    using Npgsql;
                    using NpgsqlTypes;
                    using ${EntityNamespaceName};
        Template
            Name DataAccessBase
            //Parameters:
            Value
                $String
                    public partial class PostgreSqlDataAccess : IDataAccess
                    {
                        private NpgsqlConnection Connection;
                        private NpgsqlTransaction Transaction;
                        private ITransactionLock TransactionLock;
                        public PostgreSqlDataAccess(String ConnectionString)
                        {
                            Connection = new NpgsqlConnection(ConnectionString);
                            Connection.Open();
                            Transaction = Connection.BeginTransaction();
                        }
                        public PostgreSqlDataAccess(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            Connection = new NpgsqlConnection(ConnectionString);
                            Connection.Open();
                            Transaction = Connection.BeginTransaction();
                            this.TransactionLock = TransactionLock;
                        }

                        public static IDataAccess Create(String ConnectionString)
                        {
                            return new PostgreSqlDataAccess(ConnectionString);
                        }
                        public static IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            return new PostgreSqlDataAccess(ConnectionString, TransactionLock);
                        }

                        public void Dispose()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Rollback();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                            if (Connection != null)
                            {
                                Connection.Dispose();
                                Connection = null;
                            }
                        }

                        public void Complete()
                        {
                            if (Transaction != null)
                            {
                                Transaction.Commit();
                                Transaction.Dispose();
                                Transaction = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                            if (TransactionLock != null)
                            {
                                TransactionLock.ExitAll();
                                TransactionLock = null;
                            }
                            if (Connection != null)
                            {
                                Connection.Dispose();
                                Connection = null;
                            }
                            else
                            {
                                throw new InvalidOperationException();
                            }
                        }

                        private NpgsqlCommand CreateTextCommand()
                        {
                            var cmd = Connection.CreateCommand();
                            cmd.Transaction = Transaction;
                            cmd.CommandType = CommandType.Text;
                            return cmd;
                        }

                        private static void Add(NpgsqlCommand cmd, String ParameterName, Boolean Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.NpgsqlDbType = NpgsqlDbType.Bit;
                            p.Value = new BitString(Value);
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, String Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.String;
                            p.Value = Value;
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Int Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Int32;
                            p.Value = Value;
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Real Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Single;
                            p.Value = (Single)(Value);
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, List<Byte> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Binary;
                            p.Value = Value.ToArray();
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<Boolean> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.NpgsqlDbType = NpgsqlDbType.Bit;
                            if (Value.OnHasValue)
                            {
                                p.Value = new BitString(Value.HasValue);
                            }
                            else
                            {
                                p.Value = DBNull.Value;
                            }
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<String> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.String;
                            if (Value.OnHasValue)
                            {
                                p.Value = Value.HasValue;
                            }
                            else
                            {
                                p.Value = DBNull.Value;
                            }
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<Int> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Int32;
                            if (Value.OnHasValue)
                            {
                                p.Value = Value.HasValue;
                            }
                            else
                            {
                                p.Value = DBNull.Value;
                            }
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<Real> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Single;
                            if (Value.OnHasValue)
                            {
                                p.Value = (Single)(Value.HasValue);
                            }
                            else
                            {
                                p.Value = DBNull.Value;
                            }
                            cmd.Parameters.Add(p);
                        }
                        private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<List<Byte>> Value)
                        {
                            var p = cmd.CreateParameter();
                            p.ParameterName = ParameterName;
                            p.DbType = DbType.Binary;
                            if (Value.OnHasValue)
                            {
                                p.Value = Value.HasValue.ToArray();
                            }
                            else
                            {
                                p.Value = DBNull.Value;
                            }
                            cmd.Parameters.Add(p);
                        }
                        private static Boolean GetBoolean(NpgsqlDataReader dr, String FieldName)
                        {
                            return dr.GetBitString(dr.GetOrdinal(FieldName)).Single();
                        }
                        private static String GetString(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { throw new InvalidOperationException(); }
                            return (String)(v);
                        }
                        private static Int GetInt(NpgsqlDataReader dr, String FieldName)
                        {
                            return dr.GetInt32(dr.GetOrdinal(FieldName));
                        }
                        private static Real GetReal(NpgsqlDataReader dr, String FieldName)
                        {
                            return dr.GetFloat(dr.GetOrdinal(FieldName));
                        }
                        private static List<Byte> GetBinary(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { throw new InvalidOperationException(); }
                            return new List<Byte>((Byte[])(v));
                        }
                        private static Optional<Boolean> GetOptionalOfBoolean(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { return Optional<Boolean>.Empty; }
                            return ((BitString)(v)).Single();
                        }
                        private static Optional<String> GetOptionalOfString(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { return Optional<String>.Empty; }
                            return (String)(v);
                        }
                        private static Optional<Int> GetOptionalOfInt(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { return Optional<Int>.Empty; }
                            return (Int)(v);
                        }
                        private static Optional<Real> GetOptionalOfReal(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { return Optional<Real>.Empty; }
                            return (Real)(Single)(v);
                        }
                        private static Optional<List<Byte>> GetOptionalOfBinary(NpgsqlDataReader dr, String FieldName)
                        {
                            var v = dr.GetValue(dr.GetOrdinal(FieldName));
                            if (v == DBNull.Value) { return Optional<List<Byte>>.Empty; }
                            return new List<Byte>((Byte[])(v));
                        }
                    }
        Template
            Name DataAccessEnums
            //Parameters: ${Enums}
            Value
                $String
                    public partial class PostgreSqlDataAccess
                    {
                        ${Enums}
                    }
        Template
            Name DataAccessEnum
            //Parameters: ${EnumName}
            Value
                $String
                    private static [[${EnumName}]] [[Get${EnumName}]](NpgsqlDataReader dr, String FieldName)
                    {
                        return ([[${EnumName}]])(GetInt(dr, FieldName));
                    }
                    private static Optional<[[${EnumName}]]> [[GetOptionalOf${EnumName}]](NpgsqlDataReader dr, String FieldName)
                    {
                        var v = GetOptionalOfInt(dr, FieldName);
                        if (v.OnNotHasValue) { return Optional<[[${EnumName}]]>.Empty; }
                        return ([[${EnumName}]])(v.HasValue);
                    }
                    private static void Add(NpgsqlCommand cmd, String ParameterName, [[${EnumName}]] Value)
                    {
                        Add(cmd, ParameterName, (Int)(Value));
                    }
                    private static void Add(NpgsqlCommand cmd, String ParameterName, Optional<[[${EnumName}]]> Value)
                    {
                        if (Value.OnNotHasValue)
                        {
                            Add(cmd, ParameterName, Optional<Int>.Empty);
                        }
                        else
                        {
                            Add(cmd, ParameterName, (Int)(Value.HasValue));
                        }
                    }
        Template
            Name DataAccess
            //Parameters: ${Queries}
            Value
                $String
                    public partial class PostgreSqlDataAccess
                    {
                        ${Queries}
                    }
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    public ${Signature}
                    {
                        ${Content}
                    }
        Template
            Name SelectLock_Optional
            //Parameters: ${EntityName}, ${LockingStatement}, ${SQL}, ${ParameterAdds}, ${ResultSets}
            Value
                $String
                    ${LockingStatement}
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    var v = Optional<[[${EntityName}]]>.Empty;
                    using (var dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            v = new [[${EntityName}]]
                            {
                                ${ResultSets}
                            };
                        }
                        if (dr.Read())
                        {
                            throw new InvalidOperationException();
                        }
                    }
                    return v;
        Template
            Name SelectLock_One
            //Parameters: ${EntityName}, ${LockingStatement}, ${SQL}, ${ParameterAdds}, ${ResultSets}
            Value
                $String
                    ${LockingStatement}
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    [[${EntityName}]] v = null;
                    using (var dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            v = new [[${EntityName}]]
                            {
                                ${ResultSets}
                            };
                        }
                        if (dr.Read())
                        {
                            throw new InvalidOperationException();
                        }
                    }
                    if (v == null) { throw new InvalidOperationException(); }
                    return v;
        Template
            Name SelectLock_ManyAllRange
            //Parameters: ${EntityName}, ${LockingStatement}, ${SQL}, ${ParameterAdds}, ${ResultSets}
            Value
                $String
                    ${LockingStatement}
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    var l = new List<[[${EntityName}]]>();
                    using (var dr = cmd.ExecuteReader())
                    {
                        while (dr.Read())
                        {
                            var v = new [[${EntityName}]]
                            {
                                ${ResultSets}
                            };
                            l.Add(v);
                        }
                    }
                    return l;
        Template
            Name SelectLock_Count
            //Parameters: ${EntityName}, ${LockingStatement}, ${SQL}, ${ParameterAdds}
            Value
                $String
                    ${LockingStatement}
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    return Convert.ToInt32(cmd.ExecuteScalar());
        Template
            Name InsertUpdateUpsert_One
            //Parameters: ${SQL}, ${ParameterAdds}
            Value
                $String
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    if (cmd.ExecuteNonQuery() != 1)
                    {
                        throw new InvalidOperationException();
                    }
        Template
            Name InsertUpdateUpsert_Many
            //Parameters: ${SQL}, ${ParameterAdds}
            Value
                $String
                    foreach (var v in l)
                    {
                        var cmd = CreateTextCommand();
                        cmd.CommandText = @"${SQL}";
                        ${ParameterAdds}
                        if (cmd.ExecuteNonQuery() != 1)
                        {
                            throw new InvalidOperationException();
                        }
                    }
        Template
            Name InsertWithIdentity_One
            //Parameters: ${SQL}, ${ParameterAdds}, ${ResultSets}
            Value
                $String
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    using (var dr = cmd.ExecuteReader())
                    {
                        if (dr.Read())
                        {
                            ${ResultSets}
                        }
                        if (dr.Read())
                        {
                            throw new InvalidOperationException();
                        }
                    }
        Template
            Name InsertWithIdentity_Many
            //Parameters: ${SQL}, ${ParameterAdds}, ${ResultSets}
            Value
                $String
                    foreach (var v in l)
                    {
                        var cmd = CreateTextCommand();
                        cmd.CommandText = @"${SQL}";
                        ${ParameterAdds}
                        using (var dr = cmd.ExecuteReader())
                        {
                            if (dr.Read())
                            {
                                ${ResultSets}
                            }
                            if (dr.Read())
                            {
                                throw new InvalidOperationException();
                            }
                        }
                    }
        Template
            Name Delete_Optional
            //Parameters: ${SQL}, ${ParameterAdds}
            Value
                $String
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    var Count = cmd.ExecuteNonQuery();
                    if (Count != 0 && Count != 1)
                    {
                        throw new InvalidOperationException();
                    }
        Template
            Name Delete_One
            //Parameters: ${SQL}, ${ParameterAdds}
            Value
                $String
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    if (cmd.ExecuteNonQuery() != 1)
                    {
                        throw new InvalidOperationException();
                    }
        Template
            Name Delete_ManyAll
            //Parameters: ${SQL}, ${ParameterAdds}
            Value
                $String
                    var cmd = CreateTextCommand();
                    cmd.CommandText = @"${SQL}";
                    ${ParameterAdds}
                    cmd.ExecuteNonQuery();
        Template
            Name Lock_LockingStatement
            //Parameters: ${EntityNameAndParameterAndValues}
            Value
                $String
                    if (TransactionLock != null) { TransactionLock.Enter(new Object[] { ${EntityNameAndParameterAndValues} }); }
        Template
            Name SelectLockDelete_ParameterAdd
            //Parameters: ${ParameterName}
            Value
                $String
                    Add(cmd, "${parametername}", [[${ParameterName}]]);
        Template
            Name InsertUpdateUpsert_ParameterAdd
            //Parameters: ${ParameterName}
            Value
                $String
                    Add(cmd, "${parametername}", v.[[${ParameterName}]]);
        Template
            Name SelectLock_ResultSet
            //Parameters: ${ParameterName}, ${TypeGet}
            Value
                $String
                    [[${ParameterName}]] = [[${TypeGet}]](dr, "${parametername}"),
        Template
            Name SelectLock_ResultSet_Last
            //Parameters: ${ParameterName}, ${TypeGet}
            Value
                $String
                    [[${ParameterName}]] = [[${TypeGet}]](dr, "${parametername}")
        Template
            Name Insert_ResultSet
            //Parameters: ${ParameterName}, ${TypeGet}
            Value
                $String
                    v.[[${ParameterName}]] = [[${TypeGet}]](dr, "${parametername}");
        Template
            Name DataAccessPool
            //Parameters: ${Hash}
            Value
                $String
                    public class PostgreSqlDataAccessPool : IDataAccessPool
                    {
                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        public IDataAccess Create(String ConnectionString)
                        {
                            return PostgreSqlDataAccess.Create(ConnectionString);
                        }
                        public IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            return PostgreSqlDataAccess.Create(ConnectionString, TransactionLock);
                        }
                        public void Dispose()
                        {
                        }
                    }
