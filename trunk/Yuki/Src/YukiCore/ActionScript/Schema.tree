$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构ActionScript3.0模板数据
      Version:     2013.03.31.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
        $List String
            break
            case
            continue
            default
            do
            while
            else
            for
            in
            each
            if
            label
            return
            super
            switch
            throw
            try
            catch
            finally
            while
            with
            dynamic
            final
            internal
            native
            override
            private
            protected
            public
            static
            class
            const
            extends
            function
            get
            implements
            interface
            namespace
            package
            set
            var
            import
            include
            AS3
            flash_proxy
            object_proxy
            false
            null
            this
            true
    PrimitiveMappings
        PrimitiveMapping
            Name Unit
            PlatformName Unit
        PrimitiveMapping
            Name Boolean
            PlatformName Boolean
        PrimitiveMapping
            Name String
            PlatformName String
        PrimitiveMapping
            Name Int
            PlatformName int
        PrimitiveMapping
            Name Real
            PlatformName Number
        PrimitiveMapping
            Name Byte
            PlatformName uint
        PrimitiveMapping
            Name UInt8
            PlatformName uint
        PrimitiveMapping
            Name UInt16
            PlatformName uint
        PrimitiveMapping
            Name UInt32
            PlatformName uint
        PrimitiveMapping
            Name UInt64
            PlatformName Error
        PrimitiveMapping
            Name Int8
            PlatformName int
        PrimitiveMapping
            Name Int16
            PlatformName int
        PrimitiveMapping
            Name Int32
            PlatformName int
        PrimitiveMapping
            Name Int64
            PlatformName Error
        PrimitiveMapping
            Name Float32
            PlatformName Number
        PrimitiveMapping
            Name Float64
            PlatformName Number
        PrimitiveMapping
            Name Type
            PlatformName Error
        PrimitiveMapping
            Name List
            PlatformName Vector
        PrimitiveMapping
            Name Set
            PlatformName Vector
        PrimitiveMapping
            Name Map
            PlatformName Vector
    Templates
        Template
            Name Main
            //Parameters: ${PackageName}, ${Imports}, ${Type}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    package [[${PackageName}]]
                    {
                        import ${Imports};
                        ${Type}
                    }

                $End
        Template
            Name Alias
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                        public var value:[[${Type}]];

                        public function [[${Name}]]()
                        {
                        }
                    }
        Template
            Name TupleElement
            //Parameters: ${NameIndex}, ${Type}
            Value
                $String
                    public var [[item${NameIndex}]]:[[${Type}]];
        Template
            Name Tuple
            //Parameters: ${Name}, ${TupleElements}
            Value
                $String
                    /* Tuple */
                    public class [[${Name}]]
                    {
                        ${TupleElements}

                        public function [[${Name}]]()
                        {
                        }
                    }
        Template
            Name Field
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public var [[${name}]]:[[${Type}]];
        Template
            Name Record
            //Parameters: ${Name}, ${Fields}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                        ${Fields}

                        public function [[${Name}]]()
                        {
                        }
                    }
        Template
            Name Alternative
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public var [[${name}]]:[[${Type}]];
        Template
            Name AlternativeCreate
            //Parameters: ${TaggedUnionName}, ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static function [[create${Name}]](value:[[${Type}]]):[[${TaggedUnionName}]]
                    {
                        var r:[[${TaggedUnionName}]] = new [[${TaggedUnionName}]]();
                        r._tag = [[${TaggedUnionName}Tag.${NAME}]];
                        r.[[${name}]] = value;
                        return r;
                    }
        Template
            Name AlternativeCreateUnit
            //Parameters: ${TaggedUnionName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static function [[create${Name}]]():[[${TaggedUnionName}]]
                    {
                        var r:[[${TaggedUnionName}]] = new [[${TaggedUnionName}]]();
                        r._tag = [[${TaggedUnionName}Tag.${NAME}]];
                        r.[[${name}]] = new Unit();
                        return r;
                    }
        Template
            Name AlternativePredicate
            //Parameters: ${TaggedUnionName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public function get [[on${Name}]]():Boolean { return _tag == [[${TaggedUnionName}Tag.${NAME}]]; }
        Template
            Name TaggedUnion
            //Parameters: ${Name}, ${Alternatives}, ${AlternativeCreates}, ${AlternativePredicates}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                        public var _tag:int;

                        ${Alternatives}

                        ${AlternativeCreates}

                        ${AlternativePredicates}

                        public function [[${Name}]]()
                        {
                        }
                    }
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static const [[${NAME}]]:int = [[${Value}]];
        Template
            Name Enum
            //Parameters: ${Name}, ${Literals}, ${Comment}
            Value
                $String
                    ${XmlComment}
                    public class [[${Name}]]
                    {
                        ${Literals}

                        public function [[${Name}]]()
                        {
                        }
                    }
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /**
                     * ${Description}
                     * */
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /** ${Description} */
        Template
            Name IApplicationClient
            //Parameters: ${Hash}, ${Commands}
            Value
                $String
                    public interface IApplicationClient
                    {
                        function get hash():String;
                        function dequeueCallback(commandName:String):void;

                        ${Commands}
                    }
        Template
            Name IApplicationClient_ClientCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    function [[${name}]](r:[[${Name}Request]], callback:Function):void
        Template
            Name IApplicationClient_ClientCommandCallback
            //Parameters: ${Name}
            Value
                $String
                    @param callback function(r:[[${Name}Reply]]):void
        Template
            Name IApplicationClient_ServerCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    function set [[${name}]](callback:Function):void;
        Template
            Name IApplicationClient_ServerCommandFunction
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    @param callback function(e:[[${Name}Event]]):void
