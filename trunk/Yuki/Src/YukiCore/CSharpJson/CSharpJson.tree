$Comment
    ==========================================================================

      File:        CSharpJson.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构C# JSON通讯模板数据
      Version:     2012.04.15.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:
                    //System.Runtime.Serialization.dll
                    //Newtonsoft.Json.dll

                    using System;
                    using System.Collections.Generic;
                    using System.Runtime.Serialization;
                    using Newtonsoft.Json;
                    using Newtonsoft.Json.Linq;
        Template
            Name JsonServer
            //Parameters: ${Hash}, ${Commands}
            Value
                $String
                    public sealed class JsonServer<TContext>
                    {
                        private Dictionary<String, Func<TContext, String, String>> ClientCommands;

                        public JsonServer(IServerImplementation<TContext> i)
                        {
                            ClientCommands = new Dictionary<String, Func<TContext, String, String>>(StringComparer.OrdinalIgnoreCase);
                            ${Commands}
                        }

                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        public Boolean HasCommand(String CommandName)
                        {
                            return ClientCommands.ContainsKey(CommandName);
                        }

                        public String ExecuteCommand(TContext c, String CommandName, String Parameters)
                        {
                            var cmd = ClientCommands[CommandName];
                            return cmd(c, Parameters);
                        }

                        public delegate void ServerEventDelegate(TContext c, String CommandName, String Parameters);
                        public event ServerEventDelegate ServerEvent;
                        private void OnServerEvent(TContext c, String CommandName, String Parameters)
                        {
                            if (ServerEvent != null) { ServerEvent(c, CommandName, Parameters); }
                        }
                    }
        Template
            Name JsonServer_ClientCommand
            //Parameters: ${Name}
            Value
                $String
                    ClientCommands.Add(@"${Name}", (c, p) => JsonTranslator.[[${Name}ReplyToJson]](i.[[${Name}]](c, JsonTranslator.[[${Name}RequestFromJson]](JToken.Parse(p)))).ToString(Formatting.None));
        Template
            Name JsonServer_ServerCommand
            //Parameters: ${Name}
            Value
                $String
                    i.${Name} += (c, e) => OnServerEvent(c, @"${Name}", JsonTranslator.[[${Name}EventToJson]](e).ToString(Formatting.None));
        Template
            Name IJsonSender
            Value
                $String
                    public interface IJsonSender
                    {
                        void Send(String CommandName, String Parameters);
                    }
        Template
            Name JsonClient
            //Parameters: ${Hash}, ${ClientCommands}, ${ServerCommands}
            Value
                $String
                    public sealed class JsonClient<TContext>
                    {
                        private IJsonSender s;
                        private IClientImplementation<TContext> i;
                        private Dictionary<String, Queue<Action<TContext, String>>> ClientCommandCallbacks;
                        private Dictionary<String, Action<TContext, String>> ServerCommands;

                        public JsonClient(IJsonSender s, IClientImplementation<TContext> i)
                        {
                            this.s = s;
                            this.i = i;
                            ClientCommandCallbacks = new Dictionary<String, Queue<Action<TContext, String>>>(StringComparer.OrdinalIgnoreCase);
                            ServerCommands = new Dictionary<String, Action<TContext, String>>(StringComparer.OrdinalIgnoreCase);
                            ${ServerCommands}
                        }

                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        public void HandleResult(TContext c, String CommandName, String Parameters)
                        {
                            if (ClientCommandCallbacks.ContainsKey(CommandName))
                            {
                                var q = ClientCommandCallbacks[CommandName];
                                if (q.Count == 0)
                                {
                                    throw new InvalidOperationException(CommandName);
                                }
                                var Callback = q.Dequeue();
                                Callback(c, Parameters);
                                return;
                            }

                            if (ServerCommands.ContainsKey(CommandName))
                            {
                                var a = ServerCommands[CommandName];
                                a(c, Parameters);
                                return;
                            }

                            throw new InvalidOperationException(CommandName);
                        }

                        private void AddCallback(String CommandName, Action<TContext, String> Callback)
                        {
                            if (ClientCommandCallbacks.ContainsKey(CommandName))
                            {
                                ClientCommandCallbacks[CommandName].Enqueue(Callback);
                            }
                            else
                            {
                                var q = new Queue<Action<TContext, String>>();
                                q.Enqueue(Callback);
                                ClientCommandCallbacks.Add(CommandName, q);
                            }
                        }

                        ${ClientCommands}
                    }
        Template
            Name JsonClient_ClientCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public void [[${Name}]]([[${Name}Request]] r, Action<TContext, [[${Name}Reply]]> Callback)
                    {
                        var Request = JsonTranslator.[[${Name}RequestToJson]](r).ToString(Formatting.None);
                        AddCallback(@"${Name}", (c, Parameters) => Callback(c, JsonTranslator.[[${Name}ReplyFromJson]](JToken.Parse(Parameters))));
                        s.Send(@"${Name}", Request);
                    }
        Template
            Name JsonClient_ServerCommand
            //Parameters: ${Name}
            Value
                $String
                    ServerCommands.Add(@"${Name}", (c, Parameters) => i.[[${Name}]](c, JsonTranslator.[[${Name}EventFromJson]](JToken.Parse(Parameters))));
        Template
            Name JsonTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    public static class JsonTranslator
                    {
                        ${Serializers}
                    }
        Template
            Name JsonTranslator_Primitive_Unit
            Value
                $String
                    public static Unit UnitFromJson(JToken j)
                    {
                        return new Unit();
                    }
                    public static JObject UnitToJson(Unit v)
                    {
                        return new JObject();
                    }
        Template
            Name JsonTranslator_Primitive_Boolean
            Value
                $String
                    public static Boolean BooleanFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Boolean) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToBoolean(jv.Value);
                    }
                    public static JValue BooleanToJson(Boolean v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_String
            Value
                $String
                    public static String StringFromJson(JToken j)
                    {
                        if (j.Type != JTokenType.String) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToString(jv.Value);
                    }
                    public static JValue StringToJson(String v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int
            Value
                $String
                    public static Int IntFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToInt32(jv.Value);
                    }
                    public static JValue IntToJson(Int v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Real
            Value
                $String
                    public static Real RealFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Float) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToDouble(jv.Value);
                    }
                    public static JValue RealToJson(Real v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Type
            Value
                $String
                    public static Type TypeFromJson(JToken j)
                    {
                        throw new NotSupportedException();
                    }
                    public static JValue TypeToJson(Type v)
                    {
                        throw new NotSupportedException();
                    }
        Template
            Name JsonTranslator_Alias
            //Parameters: ${Name}, ${ValueTypeFriendlyName}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        return new [[${Name}]] { Value = [[${ValueTypeFriendlyName}FromJson]](j) };
                    }
                    public static JValue [[${Name}ToJson]]([[${Name}]] o)
                    {
                        return [[${ValueTypeFriendlyName}ToJson]](o.Value);
                    }
        Template
            Name JsonTranslator_Record
            //Parameters: ${Name}, ${FieldFroms}, ${FieldTos}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${Name}]]();
                        ${FieldFroms}
                        return o;
                    }
                    public static JObject [[${Name}ToJson]]([[${Name}]] o)
                    {
                        var jo = new JObject();
                        ${FieldTos}
                        return jo;
                    }
        Template
            Name JsonTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    o.[[${Name}]] = [[${TypeFriendlyName}FromJson]](jo[@"${name}"]);
        Template
            Name JsonTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    jo.Add(@"${name}", [[${TypeFriendlyName}ToJson]](o.[[${Name}]]));
        Template
            Name JsonTranslator_TaggedUnion
            //Parameters: ${Name}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${Name}]]();
                        o._Tag = [[${Name}TagFromJson]](jo[@"_tag"]);
                        ${AlternativeFroms}
                        throw new InvalidOperationException();
                    }
                    public static JObject [[${Name}ToJson]]([[${Name}]] o)
                    {
                        var jo = new JObject();
                        jo.Add(@"_tag", [[${Name}TagToJson]](o._Tag));
                        ${AlternativeTos}
                        throw new InvalidOperationException();
                    }
        Template
            Name JsonTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._Tag == [[${TaggedUnionName}Tag.${Name}]])
                    {
                        o.[[${Name}]] = [[${TypeFriendlyName}FromJson]](jo[@"${name}"]);
                        return o;
                    }
        Template
            Name JsonTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._Tag == [[${TaggedUnionName}Tag.${Name}]])
                    {
                        jo.Add(@"${name}", [[${TypeFriendlyName}ToJson]](o.[[${Name}]]));
                        return jo;
                    }
        Template
            Name JsonTranslator_Enum
            //Parameters: ${Name}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Integer) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return ([[${Name}]])(Convert.ToInt64(jv.Value));
                    }
                    public static JValue [[${Name}ToJson]]([[${Name}]] o)
                    {
                        return new JValue(Convert.ToInt64(o));
                    }
        Template
            Name JsonTranslator_Tuple
            //Parameters: ${TypeFriendlyName}, ${TupleElementFroms}, ${TupleElementTos}
            Value
                $String
                    public static [[${TypeFriendlyName}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }
                        var ja = j as JObject;
                        var t = new [[${TypeFriendlyName}]]();
                        ${TupleElementFroms}
                        return t;
                    }
                    public static JArray [[${TypeFriendlyName}ToJson]]([[${TypeFriendlyName}]] t)
                    {
                        var ja = new JArray();
                        ${TupleElementTos}
                        return ja;
                    }
        Template
            Name JsonTranslator_TupleElementFrom
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    t.[[Item${NameIndex}]] = [[${TypeFriendlyName}FromJson]](ja[${NameIndex}]);
        Template
            Name JsonTranslator_TupleElementTo
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    ja.Add([[${TypeFriendlyName}ToJson]](t.[[Item${NameIndex}]]));
        Template
            Name JsonTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    public static [[${TypeString}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }
                        var ja = j as JArray;
                        var a = new [[${TypeString}]]();
                        foreach (var e in ja.Children())
                        {
                            a.Add([[${ElementTypeFriendlyName}FromJson]](e));
                        }
                        return a;
                    }
                    public static JArray [[${TypeFriendlyName}ToJson]]([[${TypeString}]] l)
                    {
                        var ja = new JArray();
                        foreach (var e in l)
                        {
                            ja.Add([[${ElementTypeFriendlyName}ToJson]](e));
                        }
                        return ja;
                    }
        Template
            Name JsonTranslator_Optional
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[${TypeString}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${TypeString}]]();
                        o._Tag = OptionalTagFromJson(jo[@"_tag"]);
                        ${AlternativeFroms}
                        throw new InvalidOperationException();
                    }
                    public static JObject [[${TypeFriendlyName}ToJson]]([[${TypeString}]] o)
                    {
                        var jo = new JObject();
                        jo.Add(@"_tag", OptionalTagToJson(o._Tag));
                        ${AlternativeTos}
                        throw new InvalidOperationException();
                    }
