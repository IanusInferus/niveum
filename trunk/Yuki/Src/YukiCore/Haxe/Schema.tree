$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构Haxe模板数据
      Version:     2014.11.26.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
        $List String
            abstract
            break
            callback
            case
            cast
            catch
            class
            continue
            default
            do
            dynamic
            else
            enum
            extends
            extern
            false
            for
            function
            here
            if
            implements
            import
            in
            inline
            interface
            never
            new
            null
            override
            package
            private
            public
            return
            static
            super
            switch
            this
            throw
            trace
            true
            try
            typedef
            untyped
            using
            var
            while
            Dynamic
    PrimitiveMappings
        PrimitiveMapping
            Name Unit
            PlatformName Unit
        PrimitiveMapping
            Name Boolean
            PlatformName Bool
        PrimitiveMapping
            Name String
            PlatformName String
        PrimitiveMapping
            Name Int
            PlatformName Int
        PrimitiveMapping
            Name Real
            PlatformName Float
        PrimitiveMapping
            Name Byte
            PlatformName Int
        PrimitiveMapping
            Name UInt8
            PlatformName Int
        PrimitiveMapping
            Name UInt16
            PlatformName Int
        PrimitiveMapping
            Name UInt32
            PlatformName Int
        PrimitiveMapping
            Name UInt64
            PlatformName Int
        PrimitiveMapping
            Name Int8
            PlatformName Int
        PrimitiveMapping
            Name Int16
            PlatformName Int
        PrimitiveMapping
            Name Int32
            PlatformName Int
        PrimitiveMapping
            Name Int64
            PlatformName Float
        PrimitiveMapping
            Name Float32
            PlatformName Float
        PrimitiveMapping
            Name Float64
            PlatformName Float
        PrimitiveMapping
            Name Type
            PlatformName Error
        PrimitiveMapping
            Name Optional
            PlatformName Null
        PrimitiveMapping
            Name List
            PlatformName Array
        PrimitiveMapping
            Name Set
            PlatformName Set
        PrimitiveMapping
            Name Map
            PlatformName Map
    Templates
        Template
            Name Main
            //Parameters: ${Header}, ${PackageName}, ${Imports}, ${Types}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    package [[${PackageName}]];
                    import ${Imports};

                    ${Types}

                $End
        Template
            Name PredefinedTypes
            //Parameters:
            Value
                $String
                    typedef Unit = {}

                    typedef Set<T> = Map<T, Unit>

                $End
        Template
            Name Primitive
            //Parameters: ${Name}, ${PlatformName}
            Value
                $String
                    typedef [[${Name}]] = ${PlatformName}
        Template
            Name Alias
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    typedef [[${Name}]] = ${Type}
        Template
            Name TupleElement
            //Parameters: ${NameIndex}, ${Type}
            Value
                $String
                    var [[item${NameIndex}]] : [[${Type}]];
        Template
            Name Tuple
            //Parameters: ${Name}, ${TupleElements}
            Value
                $String
                    /* Tuple */
                    typedef [[${Name}]] =
                    {
                        ${TupleElements}
                    }
        Template
            Name Field
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    var [[${name}]] : [[${Type}]];
        Template
            Name Record
            //Parameters: ${Name}, ${Fields}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    typedef [[${Name}]] =
                    {
                        ${Fields}
                    }
        Template
            Name Alternative
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${name}]](v : [[${Type}]]);
        Template
            Name AlternativeUnit
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${name}]];
        Template
            Name TaggedUnion
            //Parameters: ${Name}, ${Alternatives}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    enum [[${Name}]]
                    {
                        ${Alternatives}
                    }
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${UnderlyingType}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public static inline var [[${NAME}]] : ${UnderlyingType} = ${Value};
        Template
            Name Enum
            //Parameters: ${Name}, ${UnderlyingType}, ${Literals}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    class [[${Name}]] /* ${UnderlyingType} */
                    {
                        ${Literals}
                    }
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /**
                     * ${Description}
                     * */
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /** ${Description} */
        Template
            Name IApplicationClient
            //Parameters: ${Hash}, ${Commands}
            Value
                $String
                    interface IApplicationClient
                    {
                        var hash(get, null) : String;
                        function dequeueCallback(commandName : String) : Void;

                        ${Commands}
                    }
        Template
            Name IApplicationClient_ClientCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    function [[${name}]](r : [[${Name}Request]], _callback : [[${Name}Reply]] -> Void) : Void;
        Template
            Name IApplicationClient_ServerCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    var [[${name}]] : [[${Name}Event]] -> Void;
