$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构VB.Net模板数据
      Version:     2013.03.31.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
        $List String
            AddHandler
            AddressOf
            Alias
            And
            AndAlso
            As
            Boolean
            ByRef
            Byte
            ByVal
            Call
            Case
            Catch
            CBool
            CByte
            CChar
            CDate
            CDec
            CDbl
            Char
            CInt
            Class
            CLng
            CObj
            Const
            Continue
            CSByte
            CShort
            CSng
            CStr
            CType
            CUInt
            CULng
            CUShort
            Date
            Decimal
            Declare
            Default
            Delegate
            Dim
            DirectCast
            Do
            Double
            Each
            Else
            ElseIf
            End
            EndIf
            Enum
            Erase
            Error
            Event
            Exit
            False
            Finally
            For
            Friend
            Function
            Get
            GetType
            GetXMLNamespace
            Global
            GoSub
            GoTo
            Handles
            If
            Implements
            Imports
            In
            Inherits
            Integer
            Interface
            Is
            IsNot
            Let
            Lib
            Like
            Long
            Loop
            Me
            Mod
            Module
            MustInherit
            MustOverride
            MyBase
            MyClass
            Namespace
            Narrowing
            New
            Next
            Not
            Nothing
            NotInheritable
            NotOverridable
            Object
            Of
            On
            Operator
            Option
            Optional
            Or
            OrElse
            Overloads
            Overridable
            Overrides
            ParamArray
            Partial
            Private
            Property
            Protected
            Public
            RaiseEvent
            ReadOnly
            ReDim
            REM
            RemoveHandler
            Resume
            Return
            SByte
            Select
            Set
            Shadows
            Shared
            Short
            Single
            Static
            Step
            Stop
            String
            Structure
            Sub
            SyncLock
            Then
            Throw
            To
            True
            Try
            TryCast
            TypeOf
            Variant
            Wend
            UInteger
            ULong
            UShort
            Using
            When
            While
            Widening
            With
            WithEvents
            WriteOnly
            Xor
    PrimitiveMappings
        PrimitiveMapping
            Name Unit
            PlatformName Unit
        PrimitiveMapping
            Name Boolean
            PlatformName System.Boolean
        PrimitiveMapping
            Name String
            PlatformName System.String
        PrimitiveMapping
            Name Int
            PlatformName System.Int32
        PrimitiveMapping
            Name Real
            PlatformName System.Double
        PrimitiveMapping
            Name Byte
            PlatformName System.Byte
        PrimitiveMapping
            Name UInt8
            PlatformName System.Byte
        PrimitiveMapping
            Name UInt16
            PlatformName System.UInt16
        PrimitiveMapping
            Name UInt32
            PlatformName System.UInt32
        PrimitiveMapping
            Name UInt64
            PlatformName System.UInt64
        PrimitiveMapping
            Name Int8
            PlatformName System.SByte
        PrimitiveMapping
            Name Int16
            PlatformName System.Int16
        PrimitiveMapping
            Name Int32
            PlatformName System.Int32
        PrimitiveMapping
            Name Int64
            PlatformName System.Int64
        PrimitiveMapping
            Name Float32
            PlatformName System.Single
        PrimitiveMapping
            Name Float64
            PlatformName System.Double
        PrimitiveMapping
            Name Type
            PlatformName System.Type
        PrimitiveMapping
            Name Optional
            PlatformName Optional
        PrimitiveMapping
            Name List
            PlatformName System.Collections.Generic.List
        PrimitiveMapping
            Name Set
            PlatformName System.Collections.Generic.HashSet
        PrimitiveMapping
            Name Map
            PlatformName System.Collections.Generic.Dictionary
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    Imports ${Imports}
                    ${Primitives}

                    Namespace [[${NamespaceName}]]
                        ${ComplexTypes}
                    End Namespace

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    Imports ${Imports}
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name PredefinedTypes
            //Parameters:
            Value
                $String
                    <Record()>
                    Public Structure Unit
                    End Structure

                    Public Class RecordAttribute
                        Inherits Attribute
                    End Class

                    Public Class AliasAttribute
                        Inherits Attribute
                    End Class

                    Public Class TaggedUnionAttribute
                        Inherits Attribute
                    End Class

                    Public Class TagAttribute
                        Inherits Attribute
                    End Class

                    Public Class TupleAttribute
                        Inherits Attribute
                    End Class

                $End
        Template
            Name PredefinedTypes_WithFirefly
            //Parameters:
            Value
                $String
                    <Record()>
                    Public Structure Unit
                    End Structure

                    Public Class RecordAttribute
                        Inherits Firefly.Mapping.MetaSchema.RecordAttribute
                    End Class

                    Public Class AliasAttribute
                        Inherits Firefly.Mapping.MetaSchema.AliasAttribute
                    End Class

                    Public Class TaggedUnionAttribute
                        Inherits Firefly.Mapping.MetaSchema.TaggedUnionAttribute
                    End Class

                    Public Class TagAttribute
                        Inherits Firefly.Mapping.MetaSchema.TagAttribute
                    End Class

                    Public Class TupleAttribute
                        Inherits Firefly.Mapping.MetaSchema.TupleAttribute
                    End Class

                $End
        Template
            Name PredefinedType_Optional
            //Parameters:
            Value
                $String
                    Public Enum OptionalTag
                        NotHasValue = 0
                        HasValue = 1
                    End Enum
                    <TaggedUnion>
                    Public Structure [Optional](Of T)
                        <Tag> Public Property _Tag As OptionalTag

                        Public Property NotHasValue As Unit
                        Public Property HasValue As T

                        Public Shared Function CreateNotHasValue() As [Optional](Of T)
                            Return New [Optional](Of T) With {._Tag = OptionalTag.NotHasValue, .NotHasValue = New Unit()}
                        End Function
                        Public Shared Function CreateHasValue(ByVal Value As T) As [Optional](Of T)
                            Return New [Optional](Of T) With {._Tag = OptionalTag.HasValue, .HasValue = Value}
                        End Function

                        Public ReadOnly Property OnNotHasValue As Boolean
                            Get
                                Return _Tag = OptionalTag.NotHasValue
                            End Get
                        End Property
                        Public ReadOnly Property OnHasValue As Boolean
                            Get
                                Return _Tag = OptionalTag.HasValue
                            End Get
                        End Property

                        Public Shared ReadOnly Property Empty As [Optional](Of T)
                            Get
                                Return CreateNotHasValue()
                            End Get
                        End Property
                        Public Shared Widening Operator CType(ByVal v As T) As [Optional](Of T)
                            If v Is Nothing Then Return CreateNotHasValue()
                            Return CreateHasValue(v)
                        End Operator
                        Public Shared Narrowing Operator CType(ByVal v As [Optional](Of T)) As T
                            If v.OnNotHasValue Then Throw New InvalidOperationException()
                            Return v.HasValue
                        End Operator
                        Public Shared Operator =(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
                            Return Equals(Left, Right)
                        End Operator
                        Public Shared Operator <>(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
                            Return Not Equals(Left, Right)
                        End Operator
                        Public Shared Operator =(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
                            Return Equals(Left, Right)
                        End Operator
                        Public Shared Operator <>(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
                            Return Not Equals(Left, Right)
                        End Operator
                        Public Overrides Function Equals(ByVal obj As Object) As Boolean
                            If obj Is Nothing Then Return Equals(Me, Nothing)
                            If obj.GetType() <> GetType([Optional](Of T)) Then Return False
                            Dim o = CType(obj, [Optional](Of T))
                            Return Equals(Me, o)
                        End Function
                        Public Overrides Function GetHashCode() As Int32
                            If OnNotHasValue Then Return 0
                            Return HasValue.GetHashCode()
                        End Function

                        Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
                            If Left.OnNotHasValue AndAlso Right.OnNotHasValue Then Return True
                            If Left.OnNotHasValue OrElse Right.OnNotHasValue Then Return False
                            Return Left.HasValue.Equals(Right.HasValue)
                        End Function
                        Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
                            If (Not Left.HasValue OrElse Left.Value.OnNotHasValue) AndAlso (Not Right.HasValue OrElse Right.Value.OnNotHasValue) Then Return True
                            If Not Left.HasValue OrElse Left.Value.OnNotHasValue OrElse Not Right.HasValue OrElse Right.Value.OnNotHasValue Then Return False
                            Return Equals(Left.Value, Right.Value)
                        End Function

                        Public Function ValueOrDefault(ByVal [Default] As T) As T
                            If OnHasValue Then
                                Return HasValue
                            Else
                                Return [Default]
                            End If
                        End Function
                    End Structure
        Template
            Name Header
            //Parameters:
            Value
                $String
                    '==========================================================================
                    '
                    '  Notice:      This file is automatically generated.
                    '               Please don't modify this file.
                    '
                    '==========================================================================

                    'Reference:

                    Imports System
                    Imports System.Collections.Generic
        Template
            Name Primitive
            //Parameters: ${Name}, ${PlatformName}
            Value
                $String
                    Imports [[${Name}]] = ${PlatformName}
        Template
            Name Alias
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    <[Alias]()>
                    Public Class [[${Name}]]
                        Public Value As [[${Type}]]

                        Public Shared Widening Operator CType(ByVal o As [[${Type}]]) As [[${Name}]]
                            Return New [[${Name}]] With {.Value = o}
                        End Operator
                        Public Shared Widening Operator CType(ByVal c As [[${Name}]]) As [[${Type}]]
                            Return c.Value
                        End Operator
                    End Class
        Template
            Name TupleElement
            //Parameters: ${NameIndex}, ${Type}
            Value
                $String
                    Public Property [[Item${NameIndex}]] As [[${Type}]]
        Template
            Name Tuple
            //Parameters: ${Name}, ${TupleElements}
            Value
                $String
                    <Tuple()>
                    Public NotInheritable Class [[${Name}]]
                        ${TupleElements}
                    End Class
        Template
            Name Field
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Property [[${Name}]] As [[${Type}]]
        Template
            Name Record
            //Parameters: ${Name}, ${Fields}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    <Record()>
                    Public NotInheritable Class [[${Name}]]
                        ${Fields}
                    End Class
        Template
            Name Alternative
            //Parameters: ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Property [[${Name}]] As [[${Type}]]
        Template
            Name AlternativeCreate
            //Parameters: ${TaggedUnionName}, ${TaggedUnionTagName}, ${Name}, ${Type}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Shared Function [[Create${Name}]](Value As [[${Type}]]) As [[${TaggedUnionName}]]
                        Return New [[${TaggedUnionName}]] With {._Tag = [[${TaggedUnionTagName}.${Name}]], .[[${Name}]] = Value}
                    End Function
        Template
            Name AlternativeCreateUnit
            //Parameters: ${TaggedUnionName}, ${TaggedUnionTagName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Shared Function [[Create${Name}]]() As [[${TaggedUnionName}]]
                        Return New [[${TaggedUnionName}]] With {._Tag = [[${TaggedUnionTagName}.${Name}]], .[[${Name}]] =  New Unit()}
                    End Function
        Template
            Name AlternativePredicate
            //Parameters: ${TaggedUnionName}, ${TaggedUnionTagName}, ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Readonly Property [[On${Name}]] As Boolean
                        Get
                            Return _Tag = [[${TaggedUnionTagName}.${Name}]]
                        End Get
                    End Property
        Template
            Name TaggedUnion
            //Parameters: ${Name}, ${TagName}, ${AlternativeLiterals}, ${Alternatives}, ${AlternativeCreates}, ${AlternativePredicates}, ${XmlComment}
            Value
                $String
                    Public Enum [[${TagName}]]
                        ${AlternativeLiterals}
                    End Enum
                    ${XmlComment}
                    <TaggedUnion()>
                    Public NotInheritable Class [[${Name}]]
                        <Tag()> Public Property _Tag As [[${TagName}]]

                        ${Alternatives}

                        ${AlternativeCreates}

                        ${AlternativePredicates}
                    End Class
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${Name}]] = ${Value}
        Template
            Name LastLiteral
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${Name}]] = ${Value}
        Template
            Name Enum
            //Parameters: ${Name}, ${UnderlyingType}, ${Literals}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public Enum [[${Name}]] As [[${UnderlyingType}]]
                        ${Literals}
                    End Enum
        Template
            Name EnumParser
            //Parameters: ${Name}, ${LiteralAdds}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public NotInheritable Class [[${Name}Parser]]
                        Private Shared d As Dictionary(Of String, [[${Name}]]) = New Dictionary(Of String, [[${Name}]])(StringComparer.OrdinalIgnoreCase)
                        Shared Sub [[${Name}Parser]]()
                            ${LiteralAdds}
                        End Sub
                        Public Shared Function TryParse(Value As String) As [[${Name}]]?
                            If d.ContainsKey(Value) Then Return d(Value)
                            Return Nothing
                        End Function
                    End Class
        Template
            Name LiteralAdd
            //Parameters: ${EnumName}, ${LiteralName}, ${NameOrDescription}
            Value
                $String
                    d.Add("${NameOrDescription}", [[${EnumName}.${LiteralName}]]);
        Template
            Name EnumWriter
            //Parameters: ${Name}, ${LiteralAddWriters}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Public NotInheritable Class [[${Name}Writer]]
                        Private Shared d As Dictionary(Of [[${Name}]], String) = new Dictionary(Of [[${Name}]], String)();
                        Shared Sub [[${Name}Writer]]()
                            ${LiteralAddWriters}
                        End Sub
                        Public Shared Function GetDescription(Value As [[${Name}]]) As String
                            Return d(Value)
                        End Function
                    End Class
        Template
            Name LiteralAddWriter
            //Parameters: ${EnumName}, ${LiteralName}, ${Description}
            Value
                $String
                    If Not d.ContainsKey([[${EnumName}.${LiteralName}]]) Then d.Add([[${EnumName}.${LiteralName}]], "${Description}")
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    ''' <summary>
                    ''' ${Description}
                    ''' </summary>
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    ''' <summary>${Description}</summary>
        Template
            Name IApplicationServer
            //Parameters: ${Commands}
            Value
                $String
                    Public Interface IApplicationServer
                        ${Commands}
                    End Interface
        Template
            Name IApplicationServer_ClientCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Function [[${Name}]](ByVal r As [[${Name}Request]]) As [[${Name}Reply]]
        Template
            Name IApplicationServer_ServerCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Event [[${Name}]] As Action(Of [[${Name}Event]])
        Template
            Name IApplicationClient
            //Parameters: ${Hash}, ${Commands}
            Value
                $String
                    Public Interface IApplicationClient
                        ReadOnly Property Hash As UInt64
                        Sub DequeueCallback(ByVal CommandName As String)

                        ${Commands}
                    End Interface
        Template
            Name IApplicationClient_ClientCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Sub [[${Name}]](ByVal r As [[${Name}Request]], ByVal Callback As Action(Of [[${Name}Reply]]))
        Template
            Name IApplicationClient_ServerCommand
            //Parameters: ${Name}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    Event [[${Name}]] As Action(Of [[${Name}Event]])
