$Comment
    ==========================================================================

      File:        CppBinary.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构C++二进制模板数据
      Version:     2012.04.12.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name Main
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${Contents}
            Value
                $String
                    ${Header}
                    using namespace ${Imports};
                    ${Primitives}

                    ${Contents}

                $End
        Template
            Name Namespace
            //Parameters: ${NamespaceName}, ${Contents}
            Value
                $String
                    namespace [[${NamespaceName}]]
                    {
                        ${Contents}
                    }
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    #pragma once

                    //Reference:

                    #include <cstdint>
                    #include <string>
                    #include <vector>
                    #include <unordered_set>
                    #include <unordered_map>
                    #include <memory>
                    #include <stdexcept>
        Template
            Name Streams
            Value
                $String
                    class IReadableStream
                    {
                    public:
                        virtual uint8_t ReadByte() = 0;
                        virtual std::vector<uint8_t> ReadBytes(size_t Size) = 0;

                        Unit ReadUnit()
                        {
                            return Unit();
                        }
                        Boolean ReadBoolean()
                        {
                            return ReadByte() != 0;
                        }

                        uint8_t ReadUInt8()
                        {
                            return ReadByte();
                        }
                        uint16_t ReadUInt16()
                        {
                            uint16_t o;
                            o = static_cast<uint16_t>(static_cast<uint16_t>(ReadByte()) & static_cast<uint16_t>(0xFF));
                            o = static_cast<uint16_t>(o | ((static_cast<uint16_t>(ReadByte()) & 0xFF) << 8));
                            return o;
                        }
                        uint32_t ReadUInt32()
                        {
                            uint32_t o;
                            o = static_cast<uint32_t>(ReadByte()) & 0xFF;
                            o = o | ((static_cast<uint32_t>(ReadByte()) & 0xFF) << 8);
                            o = o | ((static_cast<uint32_t>(ReadByte()) & 0xFF) << 16);
                            o = o | ((static_cast<uint32_t>(ReadByte()) & 0xFF) << 24);
                            return o;
                        }
                        uint64_t ReadUInt64()
                        {
                            uint64_t o;
                            o = static_cast<uint64_t>(ReadByte()) & 0xFF;
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 8);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 16);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 24);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 32);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 40);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 48);
                            o = o | ((static_cast<uint64_t>(ReadByte()) & 0xFF) << 56);
                            return o;
                        }
                        int8_t ReadInt8()
                        {
                            return static_cast<int8_t>(ReadByte());
                        }
                        int16_t ReadInt16()
                        {
                            int16_t o;
                            o = static_cast<int16_t>(static_cast<int16_t>(ReadByte()) & static_cast<int16_t>(0xFF));
                            o = static_cast<int16_t>(o | ((static_cast<int16_t>(ReadByte()) & 0xFF) << 8));
                            return o;
                        }
                        int32_t ReadInt32()
                        {
                            int32_t o;
                            o = static_cast<int32_t>(ReadByte()) & 0xFF;
                            o = o | ((static_cast<int32_t>(ReadByte()) & 0xFF) << 8);
                            o = o | ((static_cast<int32_t>(ReadByte()) & 0xFF) << 16);
                            o = o | ((static_cast<int32_t>(ReadByte()) & 0xFF) << 24);
                            return o;
                        }
                        int64_t ReadInt64()
                        {
                            int64_t o;
                            o = static_cast<int64_t>(ReadByte()) & 0xFF;
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 8);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 16);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 24);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 32);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 40);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 48);
                            o = o | ((static_cast<int64_t>(ReadByte()) & 0xFF) << 56);
                            return o;
                        }

                        float ReadFloat32()
                        {
                            int32_t i = ReadInt32();
                            return *reinterpret_cast<float *>(&i);
                        }
                        double ReadFloat64()
                        {
                            int64_t i = ReadInt64();
                            return *reinterpret_cast<double *>(&i);
                        }

                        String ReadString()
                        {
                            int32_t Length = ReadInt32();
                            int32_t n = Length / 2;
                            std::vector<wchar_t> Chars;
                            for (int k = 0; k < n; k += 1)
                            {
                                Chars.push_back(static_cast<wchar_t>(ReadUInt16()));
                            }
                            if ((Length & 1) != 0)
                            {
                                ReadByte();
                            }
                            return String(Chars.begin(), Chars.end());
                        }
                    };

                    class IWritableStream
                    {
                    public:
                        virtual void WriteByte(uint8_t b) = 0;
                        virtual void WriteBytes(std::vector<uint8_t> l) = 0;

                        void WriteUnit(Unit v)
                        {
                        }
                        void WriteBoolean(Boolean v)
                        {
                            if (v)
                            {
                                WriteByte(0xFF);
                            }
                            else
                            {
                                WriteByte(0);
                            }
                        }

                        void WriteUInt8(uint8_t v)
                        {
                            WriteByte(v);
                        }
                        void WriteUInt16(uint16_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                        }
                        void WriteUInt32(uint32_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 16) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 24) & 0xFF));
                        }
                        void WriteUInt64(uint64_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 16) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 24) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 32) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 40) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 48) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 56) & 0xFF));
                        }
                        void WriteInt8(int8_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v));
                        }
                        void WriteInt16(int16_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                        }
                        void WriteInt32(int32_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 16) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 24) & 0xFF));
                        }
                        void WriteInt64(int64_t v)
                        {
                            WriteByte(static_cast<uint8_t>(v & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 8) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 16) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 24) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 32) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 40) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 48) & 0xFF));
                            WriteByte(static_cast<uint8_t>((v >> 56) & 0xFF));
                        }

                        void WriteFloat32(float v)
                        {
                            WriteInt32(*reinterpret_cast<int32_t *>(&v));
                        }
                        void WriteFloat64(double v)
                        {
                            WriteInt64(*reinterpret_cast<int64_t *>(&v));
                        }

                        void WriteString(String v)
                        {
                            int32_t n = v.size();
                            int32_t Length = n * 2;
                            WriteInt32(Length);
                            for (int k = 0; k < n; k += 1)
                            {
                                WriteUInt16(static_cast<uint16_t>(v[k]));
                            }
                        }
                    };

                    class IReadableWritableStream : public IReadableStream, public IWritableStream
                    {
                    };
        Template
            Name BinaryTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    class BinaryTranslator /* final */
                    {
                    public:
                        ${Serializers}
                    };
        Template
            Name BinaryTranslator_Primitive_Unit
            Value
                $String
                    static Unit UnitFromBinary(IReadableStream &s)
                    {
                        return s.ReadUnit();
                    }
                    static void UnitToBinary(IWritableStream &s, Unit v)
                    {
                        s.WriteUnit(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Boolean
            Value
                $String
                    static Boolean BooleanFromBinary(IReadableStream &s)
                    {
                        return s.ReadBoolean();
                    }
                    static void BooleanToBinary(IWritableStream &s, Boolean v)
                    {
                        s.WriteBoolean(v);
                    }
        Template
            Name BinaryTranslator_Primitive_String
            Value
                $String
                    static String StringFromBinary(IReadableStream &s)
                    {
                        return s.ReadString();
                    }
                    static void StringToBinary(IWritableStream &s, String v)
                    {
                        s.WriteString(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int
            Value
                $String
                    static Int IntFromBinary(IReadableStream &s)
                    {
                        return s.ReadInt32();
                    }
                    static void IntToBinary(IWritableStream &s, Int v)
                    {
                        s.WriteInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Real
            Value
                $String
                    static Real RealFromBinary(IReadableStream &s)
                    {
                        return s.ReadFloat64();
                    }
                    static void RealToBinary(IWritableStream &s, Real v)
                    {
                        s.WriteFloat64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Byte
            Value
                $String
                    static Byte ByteFromBinary(IReadableStream &s)
                    {
                        return s.ReadByte();
                    }
                    static void ByteToBinary(IWritableStream &s, Byte v)
                    {
                        s.WriteByte(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt8
            Value
                $String
                    static UInt8 UInt8FromBinary(IReadableStream &s)
                    {
                        return s.ReadUInt8();
                    }
                    static void UInt8ToBinary(IWritableStream &s, UInt8 v)
                    {
                        s.WriteUInt8(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt16
            Value
                $String
                    static UInt16 UInt16FromBinary(IReadableStream &s)
                    {
                        return s.ReadUInt16();
                    }
                    static void UInt16ToBinary(IWritableStream &s, UInt16 v)
                    {
                        s.WriteUInt16(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt32
            Value
                $String
                    static UInt32 UInt32FromBinary(IReadableStream &s)
                    {
                        return s.ReadUInt32();
                    }
                    static void UInt32ToBinary(IWritableStream &s, UInt32 v)
                    {
                        s.WriteUInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt64
            Value
                $String
                    static UInt64 UInt64FromBinary(IReadableStream &s)
                    {
                        return s.ReadUInt64();
                    }
                    static void UInt64ToBinary(IWritableStream &s, UInt64 v)
                    {
                        s.WriteUInt64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int8
            Value
                $String
                    static Int8 Int8FromBinary(IReadableStream &s)
                    {
                        return s.ReadInt8();
                    }
                    static void Int8ToBinary(IWritableStream &s, Int8 v)
                    {
                        s.WriteInt8(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int16
            Value
                $String
                    static Int16 Int16FromBinary(IReadableStream &s)
                    {
                        return s.ReadInt16();
                    }
                    static void Int16ToBinary(IWritableStream &s, Int16 v)
                    {
                        s.WriteInt16(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int32
            Value
                $String
                    static Int32 Int32FromBinary(IReadableStream &s)
                    {
                        return s.ReadInt32();
                    }
                    static void Int32ToBinary(IWritableStream &s, Int32 v)
                    {
                        s.WriteInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int64
            Value
                $String
                    static Int64 Int64FromBinary(IReadableStream &s)
                    {
                        return s.ReadInt64();
                    }
                    static void Int64ToBinary(IWritableStream &s, Int64 v)
                    {
                        s.WriteInt64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Float32
            Value
                $String
                    static Float32 Float32FromBinary(IReadableStream &s)
                    {
                        return s.ReadFloat32();
                    }
                    static void Float32ToBinary(IWritableStream &s, Float32 v)
                    {
                        s.WriteFloat32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Float64
            Value
                $String
                    static Float64 Float64FromBinary(IReadableStream &s)
                    {
                        return s.ReadFloat64();
                    }
                    static void Float64ToBinary(IWritableStream &s, Float64 v)
                    {
                        s.WriteFloat64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Type
            Value
                $String
                    static Type TypeFromBinary(IReadableStream &s)
                    {
                        throw std::logic_error("NotSupported");
                    }
                    static void TypeToBinary(IWritableStream &s, Type v)
                    {
                        throw std::logic_error("NotSupported");
                    }
        Template
            Name BinaryTranslator_Alias
            //Parameters: ${Name}, ${ValueTypeFriendlyName}
            Value
                $String
                    static std::shared_ptr<[[${Name}]]> [[${Name}FromBinary]](IReadableStream &s)
                    {
                        auto o = std::make_shared<[[${Name}]]>();
                        o->Value = [[${ValueTypeFriendlyName}FromBinary]](s);
                        return o;
                    }
                    static void [[${Name}ToBinary]](IWritableStream &s, std::shared_ptr<[[${Name}]]> o)
                    {
                        [[${ValueTypeFriendlyName}ToBinary]](s, o->Value);
                    }
        Template
            Name BinaryTranslator_Record
            //Parameters: ${Name}, ${FieldFroms}, ${FieldTos}
            Value
                $String
                    static std::shared_ptr<[[${Name}]]> [[${Name}FromBinary]](IReadableStream &s)
                    {
                        auto o = std::make_shared<[[${Name}]]>();
                        ${FieldFroms}
                        return o;
                    }
                    static void [[${Name}ToBinary]](IWritableStream &s, std::shared_ptr<[[${Name}]]> o)
                    {
                        ${FieldTos}
                    }
        Template
            Name BinaryTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    o->[[${Name}]] = [[${TypeFriendlyName}FromBinary]](s);
        Template
            Name BinaryTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    [[${TypeFriendlyName}ToBinary]](s, o->[[${Name}]]);
        Template
            Name BinaryTranslator_TaggedUnion
            //Parameters: ${Name}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    static std::shared_ptr<[[${Name}]]> [[${Name}FromBinary]](IReadableStream &s)
                    {
                        auto o = std::make_shared<[[${Name}]]>();
                        o->_Tag = [[${Name}TagFromBinary]](s);
                        ${AlternativeFroms}
                        throw std::logic_error("InvalidOperation");
                    }
                    static void [[${Name}ToBinary]](IWritableStream &s, std::shared_ptr<[[${Name}]]> o)
                    {
                        [[${Name}TagToBinary]](s, o->_Tag);
                        ${AlternativeTos}
                        throw std::logic_error("InvalidOperation");
                    }
        Template
            Name BinaryTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o->_Tag == [[${TaggedUnionName}Tag_${Name}]])
                    {
                        o->[[${Name}]] = [[${TypeFriendlyName}FromBinary]](s);
                        return o;
                    }
        Template
            Name BinaryTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o->_Tag == [[${TaggedUnionName}Tag_${Name}]])
                    {
                        [[${TypeFriendlyName}ToBinary]](s, o->[[${Name}]]);
                        return;
                    }
        Template
            Name BinaryTranslator_Enum
            //Parameters: ${Name}, ${UnderlyingTypeFriendlyName}, ${UnderlyingType}
            Value
                $String
                    static [[${Name}]] [[${Name}FromBinary]](IReadableStream &s)
                    {
                        return ([[${Name}]])([[${UnderlyingTypeFriendlyName}FromBinary]](s));
                    }
                    static void [[${Name}ToBinary]](IWritableStream &s, [[${Name}]] o)
                    {
                        [[${UnderlyingTypeFriendlyName}ToBinary]](s, static_cast<${UnderlyingType}>(o));
                    }
        Template
            Name BinaryTranslator_Tuple
            //Parameters: ${TypeFriendlyName}, ${TupleElementFroms}, ${TupleElementTos}
            Value
                $String
                    static std::shared_ptr<[[${TypeFriendlyName}]]> [[${TypeFriendlyName}FromBinary]](IReadableStream &s)
                    {
                        auto t = std::make_shared<[[${TypeFriendlyName}]]>();
                        ${TupleElementFroms}
                        return t;
                    }
                    static void [[${TypeFriendlyName}ToBinary]](IWritableStream &s, std::shared_ptr<[[${TypeFriendlyName}]]> t)
                    {
                        ${TupleElementTos}
                    }
        Template
            Name BinaryTranslator_TupleElementFrom
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    t->[[Item${NameIndex}]] = [[${TypeFriendlyName}FromBinary]](s);
        Template
            Name BinaryTranslator_TupleElementTo
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    [[${TypeFriendlyName}ToBinary]](s, t->[[Item${NameIndex}]]);
        Template
            Name BinaryTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    static std::shared_ptr<[[${TypeString}]]> [[${TypeFriendlyName}FromBinary]](IReadableStream &s)
                    {
                        auto l = std::make_shared<[[${TypeString}]]>();
                        int32_t Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            l->push_back([[${ElementTypeFriendlyName}FromBinary]](s));
                        }
                        return l;
                    }
                    static void [[${TypeFriendlyName}ToBinary]](IWritableStream &s, std::shared_ptr<[[${TypeString}]]> l)
                    {
                        int32_t Length = l->size();
                        IntToBinary(s, Length);
                        for (int k = 0; k < Length; k += 1)
                        {
                            [[${ElementTypeFriendlyName}ToBinary]](s, (*l)[k]);
                        }
                    }
        Template
            Name BinaryTranslator_Set
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    static std::shared_ptr<[[${TypeString}]]> [[${TypeFriendlyName}FromBinary]](IReadableStream &s)
                    {
                        auto l = std::make_shared<[[${TypeString}]]>();
                        int32_t Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            l->insert([[${ElementTypeFriendlyName}FromBinary]](s));
                        }
                        return l;
                    }
                    static void [[${TypeFriendlyName}ToBinary]](IWritableStream &s, std::shared_ptr<[[${TypeString}]]> l)
                    {
                        int32_t Length = l->size();
                        IntToBinary(s, Length);
                        for (auto i = l->begin(); i != l->end(); i.operator++())
                        {
                            [[${ElementTypeFriendlyName}ToBinary]](s, (*i));
                        }
                    }
        Template
            Name BinaryTranslator_Map
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${KeyTypeFriendlyName}, ${ValueTypeFriendlyName}
            Value
                $String
                    static std::shared_ptr<[[${TypeString}]]> [[${TypeFriendlyName}FromBinary]](IReadableStream &s)
                    {
                        auto l = std::make_shared<[[${TypeString}]]>();
                        int32_t Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            auto Key = [[${KeyTypeFriendlyName}FromBinary]](s);
                            (*l)[Key] = [[${ValueTypeFriendlyName}FromBinary]](s);
                        }
                        return l;
                    }
                    static void [[${TypeFriendlyName}ToBinary]](IWritableStream &s, std::shared_ptr<[[${TypeString}]]> l)
                    {
                        int32_t Length = l->size();
                        IntToBinary(s, Length);
                        for (auto i = l->begin(); i != l->end(); i.operator++())
                        {
                            [[${KeyTypeFriendlyName}ToBinary]](s, std::get<0>(*i));
                            [[${ValueTypeFriendlyName}ToBinary]](s, std::get<1>(*i));
                        }
                    }
        Template
            Name BinaryTranslator_Optional
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    static std::shared_ptr<[[${TypeString}]]> [[${TypeFriendlyName}FromBinary]](IReadableStream &s)
                    {
                        auto o = std::make_shared<[[${TypeString}]]>();
                        o->_Tag = OptionalTagFromBinary(s);
                        ${AlternativeFroms}
                        throw std::logic_error("InvalidOperation");
                    }
                    static void [[${TypeFriendlyName}ToBinary]](IWritableStream &s, std::shared_ptr<[[${TypeString}]]> o)
                    {
                        OptionalTagToBinary(s, o->_Tag);
                        ${AlternativeTos}
                        throw std::logic_error("InvalidOperation");
                    }
