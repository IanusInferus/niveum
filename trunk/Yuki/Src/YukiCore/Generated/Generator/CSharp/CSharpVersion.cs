//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Yuki.ObjectSchema.CSharpVersion
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> GetTypeVersion(String TypeFriendlyName, UInt64 Hash)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public const UInt64 "), GetEscapedIdentifier(TypeFriendlyName)), " = 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName, IEnumerable<String> TypeNames)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "using System;";
            yield return "";
            var TypeVersions = GetTypeVersions(Schema, TypeNames);
            if (NamespaceName == "")
            {
                yield return "public sealed class Versions";
                yield return "{";
                foreach (var _Line in Combine(Combine(Begin(), "    "), TypeVersions))
                {
                    yield return _Line;
                }
                yield return "}";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), "namespace "), GetEscapedIdentifier(NamespaceName)))
                {
                    yield return _Line;
                }
                yield return "{";
                yield return "    public sealed class Versions";
                yield return "    {";
                foreach (var _Line in Combine(Combine(Begin(), "        "), TypeVersions))
                {
                    yield return _Line;
                }
                yield return "    }";
                yield return "}";
            }
            yield return "";
        }
    }
}
