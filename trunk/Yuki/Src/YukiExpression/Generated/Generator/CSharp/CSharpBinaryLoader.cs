//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Yuki.ExpressionSchema.CSharpBinaryLoader
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<Object> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> Values)
        {
            foreach (var v in Values)
            {
                yield return GetEscapedIdentifier(v);
            }
        }
        public IEnumerable<String> Assembly(Schema Schema)
        {
            var Hash = Schema.Hash().ToString("X16", System.Globalization.CultureInfo.InvariantCulture);
            yield return "public class Calculation";
            yield return "{";
            foreach (var m in Schema.Modules)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(m.Name)), " "), GetEscapedIdentifier(m.Name)), " { get; private set; }"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "";
            yield return "    public Calculation(Assembly a)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        if (a.Hash != 0x"), Hash), ") { throw new InvalidOperationException(); }"))
            {
                yield return _Line;
            }
            yield return "        var _d_ = a.Modules.ToDictionary(_m_ => _m_.Name);";
            foreach (var m in Schema.Modules)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "this."), GetEscapedIdentifier(m.Name)), " = new "), GetEscapedIdentifier(m.Name)), "(_d_["), GetEscapedStringLiteral(m.Name)), "]);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Module(ModuleDecl m)
        {
            foreach (var _Line in Combine(Combine(Begin(), "public class "), GetEscapedIdentifier(m.Name)))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var f in m.Functions)
            {
                foreach (var _Line in Combine(Combine(Begin(), "private class "), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var p in f.Parameters)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public "), p.Type.ToString()), " "), GetEscapedIdentifier(p.Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                yield return "    " + "}";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "private Func<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ", "), f.ReturnValue.ToString()), "> "), GetEscapedIdentifier(Combine(Combine(Begin(), "Func_"), f.Name))), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    public "), GetEscapedIdentifier(m.Name)), "(ModuleDef md)"))
            {
                yield return _Line;
            }
            yield return "    {";
            yield return "        var fd = md.Functions.ToDictionary(_f_ => _f_.Name);";
            foreach (var f in m.Functions)
            {
                yield return "        " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    var vc = new VariableContext<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ">();"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                foreach (var p in f.Parameters)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "vc.Replace("), GetEscapedStringLiteral(p.Name)), ", null, PrimitiveType."), p.Type.ToString()), ", vvc => (Func<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ", "), p.Type.ToString()), ">)("), GetEscapedIdentifier(Combine(Combine(Begin(), "Context_"), f.Name))), " => "), GetEscapedIdentifier(Combine(Combine(Combine(Combine(Begin(), "Context_"), f.Name), "."), p.Name))), "));"))
                    {
                        yield return _Line == "" ? "" : "            " + _Line;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    var p = new VariableProviderCombiner<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ">(vc, new ExpressionRuntimeProvider<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ">());"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    var d = ExpressionEvaluator<"), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), ">.Compile<"), f.ReturnValue.ToString()), ">(p, fd["), GetEscapedStringLiteral(f.Name)), "].Body);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), "Func_"), f.Name))), " = t =>"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                yield return "        " + "    {";
                yield return "        " + "        return d(t);";
                yield return "        " + "    };";
                yield return "        " + "}";
            }
            yield return "    }";
            yield return "";
            foreach (var f in m.Functions)
            {
                var ParameterList = String.Join(", ", f.Parameters.Select(p => p.Type.ToString() + " " + GetEscapedIdentifier(p.Name)));
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), f.ReturnValue.ToString()), " "), GetEscapedIdentifier(f.Name)), "("), ParameterList), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    var "), GetEscapedIdentifier(Combine(Combine(Begin(), "Context_"), f.Name))), " = new "), GetEscapedIdentifier(Combine(Combine(Begin(), "FuncContext_"), f.Name))), "();"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var p in f.Parameters)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), "Context_"), f.Name))), "."), GetEscapedIdentifier(p.Name)), " = "), GetEscapedIdentifier(p.Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Begin(), "Func_"), f.Name))), "("), GetEscapedIdentifier(Combine(Combine(Begin(), "Context_"), f.Name))), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "using System;";
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";
            yield return "using Yuki.ExpressionSchema;";
            yield return "using Yuki.Expression;";
            yield return "using Int = System.Int32;";
            yield return "using Real = System.Double;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "using "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            var ComplexTypes = GetComplexTypes(Schema);
            if (NamespaceName == "")
            {
                foreach (var _Line in Combine(Begin(), ComplexTypes))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), "namespace "), GetEscapedIdentifier(NamespaceName)))
                {
                    yield return _Line;
                }
                yield return "{";
                foreach (var _Line in Combine(Combine(Begin(), "    "), ComplexTypes))
                {
                    yield return _Line;
                }
                yield return "}";
            }
            yield return "";
        }
    }
}
