<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bridge</name>
    </assembly>
    <members>
        <member name="T:Bridge.TemplateAttribute">
            <summary>
            TemplateAttribute is instruction to replace method calling (in expression) by required code
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.After">
            <summary>
            Emit this Method body immediately after this class defintion (default)
            </summary>
        </member>
        <member name="F:Bridge.InitPosition.Before">
            <summary>
            Emit this Method body Immediately before this class definition
            </summary>
        </member>
        <member name="T:Bridge.ModuleDependencyAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.ModuleAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.InlineConstAttribute">
             <summary>
            
             </summary>
        </member>
        <member name="T:Bridge.NamespaceAttribute">
            <summary>
            Specifies a custom namespace for the built entity.
            Use 'false' (without quotes) to suppress namespace binding (usually with [Ignore] attribute).
            </summary>
        </member>
        <member name="T:Bridge.NameAttribute">
            <summary>
            Specifies full path name of the entity (namespace+entity), when emitting JavaScript-equivalent
            code. This overrides the inferred namespace.class.method name, for example.
            </summary>
            <remarks>
            Use "Object" (with quotes) to hide its type in JavaScript-level (useful when you create
            a hidden class to fill several public classes' methods).
            </remarks>
        </member>
        <member name="T:Bridge.ExternalAttribute">
            <summary>
            Makes it so the code with this attribute is not built into the assembly files.
            Useful for stubbed out code to match JavaScript.
            </summary>
        </member>
        <member name="T:Bridge.FileNameAttribute">
            <summary>
            The file name where JavaScript is generated to.
            </summary>
        </member>
        <member name="T:Bridge.OutputAttribute">
            <summary>
            The output folder path for generated JavaScript. A non-absolute path is concatenated with a project's root.
            Examples: "Bridge/output/", "../Bridge/output/", "c:\\output\\"
            </summary>
        </member>
        <member name="T:Bridge.OutputByAttribute">
            <summary>
            The option to manage JavaScript output folders and files.
            See TypesSplit enum for more details.
            </summary>
        </member>
        <member name="T:Bridge.OutputBy">
            <summary>
            The options to manage JavaScript output folders and files.
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Class">
            <summary>
            The class name will be the file name. If there are classes with same names in different namespaces, the generated JavaScript will be combined into one file. For example, if the class name is "Helpers", the file name will be "Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.ClassPath">
            <summary>
            A folder hierarchy is created using the class name, and a folder is created for each unique word (split by '.') in the class namespace. For example, if the class "Helpers" is within the "Demo" namespace, the file path and name will be "Demo/Helpers.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Module">
            <summary>
            The ModuleAttribute value is used as the file name if set on a class. For example, if [Module("MyModuleName")] is set, the file name will be "MyModuleName.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Namespace">
            <summary>
            The full namespace is used as the file name. For example, if "Demo.Utilities" is the namespace, the file name will be "Demo.Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.NamespacePath">
            <summary>
            The class namespace is split (by '.') and a folder is created for each individual value, except the last value which becomes the file name. For example, if "Demo.Utilities" is the namespace, the file path and name will be "/Demo/Utilities.js".
            </summary>
        </member>
        <member name="F:Bridge.OutputBy.Project">
            <summary>
            All generated JavaScript for the project is added to one [ProjectName].js file. For example, if the project name is "MyUtilities", the file name will be "MyUtilities.js".
            This can be overridden by setting the fileName option within bridge.json, or by using the [FileName] Attribute on the assembly or class levels.
            </summary>
        </member>
        <member name="T:Bridge.ScriptAttribute">
            <summary>
            ScriptAttribute specifies the method implementation that will be output to javascript
            instead of its actual C# implementation. C# implementation is completely discarded if
            this attribute is used.
            </summary>
        </member>
        <member name="M:Bridge.Script.Write``1(System.String)">
            <summary>
            Inject javascript code
            </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Write(System.String)">
            <summary>
            Inject javascript code
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="F:Bridge.Script.Arguments">
            <summary>
            An Array-like object corresponding to the arguments passed to a function.
            </summary>
        </member>
        <member name="F:Bridge.Script.Undefined">
            <summary>
            The global undefined property represents the value undefined.
            </summary>
        </member>
        <member name="F:Bridge.Script.NaN">
            <summary>
            The global NaN property is a value representing Not-A-Number.
            </summary>
        </member>
        <member name="F:Bridge.Script.Infinity">
            <summary>
            The global Infinity property is a numeric value representing infinity.
            </summary>
        </member>
        <member name="M:Bridge.Script.Eval``1(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.Eval(System.String)">
            <summary>
            The eval() method evaluates JavaScript code represented as a string.
            </summary>
            <param name="expression">A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsFinite(System.Object)">
            <summary>
            The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.
            </summary>
            <param name="testValue">The value to be tested for finiteness.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseFloat(System.String)">
            <summary>
            The parseFloat() function parses a string argument and returns a floating point number.
            </summary>
            <param name="value">A string that represents the value you want to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.ParseInt(System.String,System.Int32)">
            <summary>
            The parseInt() function parses a string argument and returns an integer of the specified radix or base.
            </summary>
            <param name="value">The value to parse. If string is not a string, then it is converted to one. Leading whitespace in the string is ignored.</param>
            <param name="radix">An integer that represents the radix of the above mentioned string. Always specify this parameter to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.IsNaN(System.Object)">
            <summary>
            The isNaN() function determines whether a value is NaN or not. Be careful, this function is broken. You may be interested in Number.isNaN() as defined in ECMAScript 6 or you can use typeof to determine if the value is Not-A-Number.
            </summary>
            <param name="testValue">The value to be tested.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURI(System.String)">
            <summary>
            The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.
            </summary>
            <param name="encodedURI">A complete, encoded Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.DecodeURIComponent(System.String)">
            <summary>
            The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.
            </summary>
            <param name="encodedURI">An encoded component of a Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURI(System.String)">
            <summary>
            The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="uri">A complete Uniform Resource Identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Bridge.Script.EncodeURIComponent(System.String)">
            <summary>
            The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two "surrogate" characters).
            </summary>
            <param name="component">A component of a URI.</param>
            <returns></returns>
        </member>
        <member name="P:System.Exception.Data">
            <summary>
            Gets a collection of key/value pairs that provide additional user-defined information about the exception.
            </summary>
        </member>
        <member name="P:System.Exception.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="P:System.Exception.InnerException">
            <summary>
            Gets the Exception instance that caused the current exception.
            </summary>
        </member>
        <member name="P:System.Exception.StackTrace">
            <summary>
            Gets a string representation of the immediate frames on the call stack.
            </summary>
        </member>
        <member name="P:System.ArgumentException.ParamName">
            <summary>
            Gets the name of the parameter that causes this exception.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ISet`1">
            <summary>
            Generic collection that guarantees the uniqueness of its elements, as defined
            by some comparer. It also supports basic set operations such as Union, Intersection,
            Complement and Exclusive Complement.
            </summary>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            System.EventArgs is the base class for classes containing event data.
            </summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            Represents an event with no event data.
            </summary>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary>
            Initializes a new instance of the System.EventArgs class.
            </summary>
        </member>
        <member name="T:System.EventHandler">
            <summary>
            Represents the method that will handle an event that has no event data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains no event data.</param>
        </member>
        <member name="T:System.EventHandler`1">
            <summary>
            Represents the method that will handle an event.
            </summary>
            <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
            <param name="sender">The source of the event.</param>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <returns>
            The final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified seed value
            is used as the initial accumulator value, and the specified function is used
            to select the result value.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to aggregate over.
            </param>
            <param name="seed">
            The initial accumulator value.
            </param>
            <param name="func">
            An accumulator function to be invoked on each element.
            </param>
            <param name="resultSelector">
            A function to transform the final accumulator value into the result value.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TAccumulate">
            The type of the accumulator value.
            </typeparam>
            <typeparam name="TResult">
            The type of the resulting value.
            </typeparam>
            <returns>
            The transformed final accumulator value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or func or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            apply the predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if every element of the source sequence passes the test in the specified
            predicate, or if the sequence is empty; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to check for emptiness.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to apply the
            predicate to.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if any elements in the source sequence pass the test in the specified
            predicate; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Linq.EnumerableInstance{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The sequence to type as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The input sequence typed as System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the average of.
            </param>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable System.Decimal values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the average of a sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate an average.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable System.Double values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable System.Single values that
            are obtained by invoking a transform function on each element of the input
            sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the average of a sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the average of a sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values, or null if the source sequence is
            empty or contains only values that are null.
            </returns>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values to calculate the average of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The average of the sequence of values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum of the elements in the sequence is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Casts the elements of an System.Collections.IEnumerable to the specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable that contains the elements to be cast
            to type TResult.
            </param>
            <typeparam name="TResult">
            The type to cast the elements of source to.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains each element of
            the source sequence cast to the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidCastException">
            An element in the sequence cannot be cast to type TResult.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
            <param name="first">
            The first sequence to concatenate.
            </param>
            <param name="second">
            The sequence to concatenate to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the concatenated
            elements of the two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by using the default
            equality comparer.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by using a specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="source">
            A sequence in which to locate a value.
            </param>
            <param name="value">
            The value to locate in the sequence.
            </param>
            <param name="comparer">
            An equality comparer to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            true if the source sequence contains an element that has the specified value;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            <param name="source">
            A sequence that contains elements to be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the specified sequence
            satisfy a condition.
            </summary>
            <param name="source">
            A sequence that contains elements to be tested and counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type parameter's default
            value in a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return a default value for if it is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; object that contains the default
            value for the TSource type if source is empty; otherwise, source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified value in
            a singleton collection if the sequence is empty.
            </summary>
            <param name="source">
            The sequence to return the specified value for if it is empty.
            </param>
            <param name="defaultValue">
            The value to return if the sequence is empty.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains defaultValue if
            source is empty; otherwise, source.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default equality comparer
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="source">
            The sequence to remove duplicate elements from.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains distinct elements
            from the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than 0 or greater than or equal to the number of elements in
            source.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a default value
            if the index is out of range.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="index">
            The zero-based index of the element to retrieve.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the index is outside the bounds of the source sequence;
            otherwise, the element at the specified position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Empty``1">
            <summary>
            Returns an empty System.Collections.Generic.IEnumerable&lt;T&gt; that has the specified
            type argument.
            </summary>
            <typeparam name="TResult">
            The type to assign to the type parameter of the returned generic System.Collections.Generic.IEnumerable&lt;T&gt;.
            </typeparam>
            <returns>
            An empty System.Collections.Generic.IEnumerable&lt;T&gt; whose type argument is
            TResult.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that are not
            also in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements that also occur
            in the first sequence will cause those elements to be removed from the returned
            sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the specified sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The first element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to return the first element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty; otherwise, the first element in source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition or a
            default value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if source is empty or if no element passes the test specified
            by predicate; otherwise, the first element in source that passes the test
            specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a sequence of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and projects the elements for each group by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and compares the keys by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TSource)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The keys are compared
            by using a specified comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. The elements of each
            group are projected by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a key selector function. The
            keys are compared by using a comparer and each group's elements are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in the System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <returns>
            An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of
            TKey, TElement)) in Visual Basic where each System.Linq.IGrouping&lt;TKey,TElement&gt;
            object contains a collection of objects of type TElement and a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key selector function
            and creates a result value from each group and its key. Key values are compared
            by using a specified comparer, and the elements of each group are projected
            by using a specified function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements to group.
            </param>
            <param name="keySelector">
            A function to extract the key for each element.
            </param>
            <param name="elementSelector">
            A function to map each source element to an element in an System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </param>
            <param name="resultSelector">
            A function to create a result value from each group.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys with.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the elements in each System.Linq.IGrouping&lt;TKey,TElement&gt;.
            </typeparam>
            <typeparam name="TResult">
            The type of the result value returned by resultSelector.
            </typeparam>
            <returns>
            A collection of elements of type TResult where each element represents a
            projection over a group and its key.
            </returns>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Correlates the elements of two sequences based on equality of keys and groups
            the results. The default equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on key equality and groups
            the results. A specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from an element from the first sequence
            and a collection of matching elements from the second sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements of type
            TResult that are obtained by performing a grouped join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the default equality
            comparer to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two sequences by using the specified System.Collections.Generic.IEqualityComparer&lt;T&gt;
            to compare values.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in second will be returned.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements that
            also appear in the first sequence will be returned.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            A sequence that contains the elements that form the set intersection of two
            sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys. The default
            equality comparer is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys. A specified
            System.Collections.Generic.IEqualityComparer&lt;T&gt; is used to compare keys.
            </summary>
            <param name="outer">
            The first sequence to join.
            </param>
            <param name="inner">
            The sequence to join to the first sequence.
            </param>
            <param name="outerKeySelector">
            A function to extract the join key from each element of the first sequence.
            </param>
            <param name="innerKeySelector">
            A function to extract the join key from each element of the second sequence.
            </param>
            <param name="resultSelector">
            A function to create a result element from two matching elements.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to hash and compare keys.
            </param>
            <typeparam name="TOuter">
            The type of the elements of the first sequence.
            </typeparam>
            <typeparam name="TInner">
            The type of the elements of the second sequence.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by the key selector functions.
            </typeparam>
            <typeparam name="TResult">
            The type of the result elements.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that has elements of type TResult
            that are obtained by performing an inner join on two sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            outer or inner or outerKeySelector or innerKeySelector or resultSelector
            is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an System.Int64 that represents the total number of elements in a
            sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The number of elements in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns an System.Int64 that represents how many elements in a sequence satisfy
            a condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements to
            be counted.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A number that represents how many elements in the sequence satisfy the condition
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The number of matching elements exceeds System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value at the last position in the source sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a specified condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The last element in the sequence that passes the test in the specified predicate
            function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-The source sequence is
            empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if the sequence
            contains no elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the last element of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the source sequence is empty; otherwise, the last element
            in the System.Collections.Generic.IEnumerable&lt;T&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a condition or a default
            value if no such element is found.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return an element from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            default(TSource) if the sequence is empty or if no elements pass the test
            in the predicate function; otherwise, the last element that passes the test
            in the predicate function.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the maximum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the maximum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the maximum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int327gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the maximum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the maximum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the maximum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the maximum value of.
            </param>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            maximum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the maximum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The maximum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum TSource value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum TResult value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements in result.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Returns the minimum value in a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Returns the minimum value in a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns the minimum value in a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Returns the minimum value in a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to determine the minimum value
            of.
            </param>
            <returns>
            A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Returns the minimum value in a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to determine the minimum value of.
            </param>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Decimal value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Double value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual
            Basic that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Single value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int32 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum nullable System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic
            that corresponds to the minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a transform function on each element of a sequence and returns the
            minimum System.Int64 value.
            </summary>
            <param name="source">
            A sequence of values to determine the minimum value of.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The minimum value in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            source contains no elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the elements of an System.Collections.IEnumerable based on a specified
            type.
            </summary>
            <param name="source">
            The System.Collections.IEnumerable whose elements to filter.
            </param>
            <typeparam name="TResult">
            The type to filter the elements of the sequence on.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence of type TResult.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order by using a specified
            comparer.
            </summary>
            <param name="source">
            A sequence of values to order.
            </param>
            <param name="keySelector">
            A function to extract a key from an element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">
            The value of the first integer in the sequence.
            </param>
            <param name="count">
            The number of sequential integers to generate.
            </param>
            <returns>
            An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that
            contains a range of sequential integral numbers.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.-or-start + count -1 is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
            <param name="element">
            The value to be repeated.
            </param>
            <param name="count">
            The number of times to repeat the value in the generated sequence.
            </param>
            <typeparam name="TResult">
            The type of the value to be repeated in the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains a repeated value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            count is less than 0.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
            <param name="source">
            A sequence of values to reverse.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A sequence whose elements correspond to those of the input sequence in reverse
            order.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by incorporating the
            element's index.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <param name="source">
            A sequence of values to invoke a transform function on.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the value returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the transform function on each element of source.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;
            and flattens the resulting sequences into one sequence.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            and flattens the resulting sequences into one sequence. The index of each
            source element is used in the projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="selector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the sequence returned by selector.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function on each element of an input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each element of the input sequence.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an System.Collections.Generic.IEnumerable&lt;T&gt;,
            flattens the resulting sequences into one sequence, and invokes a result
            selector function on each element therein. The index of each source element
            is used in the intermediate projected form of that element.
            </summary>
            <param name="source">
            A sequence of values to project.
            </param>
            <param name="collectionSelector">
            A transform function to apply to each source element; the second parameter
            of the function represents the index of the source element.
            </param>
            <param name="resultSelector">
            A transform function to apply to each element of the intermediate sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TCollection">
            The type of the intermediate elements collected by collectionSelector.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the resulting sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose elements are the result
            of invoking the one-to-many transform function collectionSelector on each
            element of source and then mapping each of those sequence elements and their
            corresponding source element to a result element.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or collectionSelector or resultSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the elements by using
            the default equality comparer for their type.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements are equal according to the default equality comparer for their type;
            otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their elements by
            using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to second.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to compare to the first sequence.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to use to compare elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            true if the two source sequences are of equal length and their corresponding
            elements compare equal according to comparer; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.-or-The input sequence
            is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition,
            and throws an exception if more than one such element exists.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies a condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate.-or-More than one element
            satisfies the condition in predicate.-or-The source sequence is empty.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence
            is empty; this method throws an exception if there is more than one element
            in the sequence.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return the single element
            of.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence, or default(TSource) if the sequence
            contains no elements.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The input sequence contains more than one element.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a specified condition
            or a default value if no such element exists; this method throws an exception
            if more than one element satisfies the condition.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return a single element from.
            </param>
            <param name="predicate">
            A function to test an element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The single element of the input sequence that satisfies the condition, or
            default(TSource) if no such element is found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the
            remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="count">
            The number of elements to skip before returning the remaining elements.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements that
            occur after the specified index in the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition is true
            and then returns the remaining elements. The element's index is used in the
            logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence starting at the first element in the linear series that
            does not pass the test specified by predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
            <param name="source">
            A sequence of nullable System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
            <param name="source">
            A sequence of System.Decimal values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
            <param name="source">
            A sequence of nullable System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
            <param name="source">
            A sequence of System.Double values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Single values.
            </summary>
            <param name="source">
            A sequence of nullable System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Single values.
            </summary>
            <param name="source">
            A sequence of System.Single values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
            <param name="source">
            A sequence of System.Int32 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
            <param name="source">
            A sequence of nullable System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Linq.EnumerableInstance{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
            <param name="source">
            A sequence of System.Int64 values to calculate the sum of.
            </param>
            <returns>
            The sum of the values in the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of the sequence of nullable System.Decimal values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the sum of the sequence of System.Decimal values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Decimal.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the sum of the sequence of nullable System.Double values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the sum of the sequence of System.Double values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the sum of the sequence of nullable System.Single values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the sum of the sequence of System.Single values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int32 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the sum of the sequence of System.Int32 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int32.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of the sequence of nullable System.Int64 values that are
            obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the sum of the sequence of System.Int64 values that are obtained
            by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">
            A sequence of values that are used to calculate a sum.
            </param>
            <param name="selector">
            A transform function to apply to each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            The sum of the projected values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or selector is null.
            </exception>
            <exception cref="T:System.OverflowException">
            The sum is larger than System.Int64.MaxValue.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start of a sequence.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="count">
            The number of elements to return.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified
            number of elements from the start of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
            <param name="source">
            A sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
            <param name="source">
            The sequence to return elements from.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that occur before the element at which the test no longer
            passes.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted according
            to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order, according to a key.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending
            order by using a specified comparer.
            </summary>
            <param name="source">
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; that contains elements to sort.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            An System.Linq.IOrderedEnumerable&lt;TElement&gt; whose elements are sorted in
            descending order according to a key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
            <remarks>Bridge.NET has no mapping for this in JavaScript.</remarks>
        </member>
        <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from a System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create an array from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An array that contains the elements from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the keys returned by keySelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains keys and
            values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.-or-keySelector produces a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer, and an element
            selector function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; that contains values
            of type TElement selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.-or-keySelector produces
            a key that is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            keySelector produces duplicate keys for two elements.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a System.Collections.Generic.List&lt;T&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Collections.Generic.List&lt;T&gt;
            from.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            A System.Collections.Generic.List&lt;T&gt; that contains elements from the input
            sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to specified key selector and element selector functions.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function and key comparer.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains keys and values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a System.Linq.Lookup&lt;TKey,TElement&gt; from an System.Collections.Generic.IEnumerable&lt;T&gt;
            according to a specified key selector function, a comparer and an element
            selector function.
            </summary>
            <param name="source">
            The System.Collections.Generic.IEnumerable&lt;T&gt; to create a System.Linq.Lookup&lt;TKey,TElement&gt;
            from.
            </param>
            <param name="keySelector">
            A function to extract a key from each element.
            </param>
            <param name="elementSelector">
            A transform function to produce a result element value from each element.
            </param>
            <param name="comparer">
            An System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare keys.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <typeparam name="TKey">
            The type of the key returned by keySelector.
            </typeparam>
            <typeparam name="TElement">
            The type of the value returned by elementSelector.
            </typeparam>
            <returns>
            A System.Linq.Lookup&lt;TKey,TElement&gt; that contains values of type TElement
            selected from the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or keySelector or elementSelector is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
            <param name="first">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the first set for the union.
            </param>
            <param name="second">
            An System.Collections.Generic.IEnumerable&lt;T&gt; whose distinct elements form
            the second set for the union.
            </param>
            <param name="comparer">
            The System.Collections.Generic.IEqualityComparer&lt;T&gt; to compare values.
            </param>
            <typeparam name="TSource">
            The type of the elements of the input sequences.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the elements from
            both input sequences, excluding duplicates.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. Each element's index is
            used in the logic of the predicate function.
            </summary>
            <param name="source">
            An System.Collections.Generic.IEnumerable&lt;T&gt; to filter.
            </param>
            <param name="predicate">
            A function to test each source element for a condition; the second parameter
            of the function represents the index of the source element.
            </param>
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains elements from
            the input sequence that satisfy the condition.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two sequences by using the specified predicate function.
            </summary>
            <param name="first">
            The first sequence to merge.
            </param>
            <param name="second">
            The second sequence to merge.
            </param>
            <param name="resultSelector">
            A function that specifies how to merge the elements from the two sequences.
            </param>
            <typeparam name="TFirst">
            The type of the elements of the first input sequence.
            </typeparam>
            <typeparam name="TSecond">
            The type of the elements of the second input sequence.
            </typeparam>
            <typeparam name="TResult">
            The type of the elements of the result sequence.
            </typeparam>
            <returns>
            An System.Collections.Generic.IEnumerable&lt;T&gt; that contains merged elements
            of two input sequences.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            first or second is null.
            </exception>
        </member>
        <member name="T:System.MidpointRounding">
            <summary>
            Specifies how mathematical rounding methods should process a number that is midway between two numbers.
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Up">
            <summary>
            Rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Down">
            <summary>
            Rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityPos">
            <summary>
            Rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.InfinityNeg">
            <summary>
            Rounds towards -Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.AwayFromZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds away from zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.TowardsZero">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards zero
            </summary>
        </member>
        <member name="F:System.MidpointRounding.ToEven">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards even neighbour
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Ceil">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards Infinity
            </summary>
        </member>
        <member name="F:System.MidpointRounding.Floor">
            <summary>
            Rounds towards nearest neighbour. If equidistant, rounds towards -Infinity
            </summary>
        </member>
        <member name="T:System.StringComparison">
            <summary>
            Specifies the culture, case, and sort rules to be used by certain overloads of the String.Compare and String.Equals methods.
            </summary>
        </member>
        <member name="M:System.Array.IndexOf(System.String)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.IndexOf(System.String,System.Int32)">
            <summary>
            The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.
            </summary>
            <param name="searchElement"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:System.Array.LastIndexOf(System.String,System.Int32)">
            <summary>
            The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.
            </summary>
            <param name="searchString"></param>
            <param name="fromIndex"></param>
            <returns></returns>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64)">
            <summary>
            Double value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).
            </summary>
            <param name="value">The numberof milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch)</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.String)">
            <summary>
            String value representing a date. The string should be in a format recognized by the Date.parse() method (IETF-compliant RFC 2822 timestamps and also a version of ISO8601).
            </summary>
            <param name="dateString"></param>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Sunday">
            <summary>
            Indicates Sunday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Monday">
            <summary>
            Indicates Monday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Tuesday">
            <summary>
            Indicates Tuesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Wednesday">
            <summary>
            Indicates Wednesday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Thursday">
            <summary>
            Indicates Thursday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Friday">
            <summary>
            Indicates Friday.
            </summary>
        </member>
        <member name="F:System.DayOfWeek.Saturday">
            <summary>
            Indicates Saturday.
            </summary>
        </member>
        <member name="P:System.Text.StringBuilder.Length">
            <summary>
            Gets or sets the length of the current StringBuilder object.
            </summary>
        </member>
        <member name="T:System.Error">
            <summary>
            The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base objects for user-defined exceptions. See below for standard built-in error types.
            </summary>
        </member>
        <member name="T:System.Decimal">
            <summary>
            The decimal data type.
            http://mikemcl.github.io/decimal.js/
            </summary>
        </member>
        <member name="M:System.Decimal.Random(System.Int32)">
            <summary>
            Returns a new Decimal with a pseudo-random value equal to or greater than 0 and less than 1.
            </summary>
            <param name="dp">The return value will have dp decimal places (or less if trailing zeros are produced). If dp is omitted then the number of decimal places will default to the current precision setting.</param>
            <returns></returns>
        </member>
        <member name="M:System.Decimal.SetConfig(System.DecimalConfig)">
            <summary>
            Configures the 'global' settings for this particular Decimal constructor.
            </summary>
            <param name="config"></param>
        </member>
        <member name="F:System.DecimalConfig.Precision">
            <summary>
            Default value: 20
            The maximum number of significant digits of the result of a calculation or base conversion.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Rounding">
            <summary>
            The default rounding mode used when rounding the result of a calculation or base conversion to precision significant digits, and when rounding the return value of the round, toDecimalPlaces, toExponential, toFixed, toFormat, toNearest, toPrecision and toSignificantDigits methods.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpNeg">
            <summary>
            The negative exponent value at and below which toString returns exponential notation. Default value: -7
            </summary>
        </member>
        <member name="F:System.DecimalConfig.ToExpPos">
            <summary>
            The positive exponent value at and above which toString returns exponential notation. Default value: 20
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MinE">
            <summary>
            The negative exponent limit, i.e. the exponent value below which underflow to zero occurs. Default value: -9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.MaxE">
            <summary>
            The positive exponent limit, i.e. the exponent value above which overflow to Infinity occurs. Default value: 9e15
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Errors">
            <summary>
            The value that determines whether Decimal Errors are thrown. If errors is false, this library will not throw errors.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Crypto">
            <summary>
            The value that determines whether cryptographically-secure pseudo-random number generation is used. Default value: false
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Modulo">
            <summary>
            The modulo mode used when calculating the modulus: a mod n.
            </summary>
        </member>
        <member name="F:System.DecimalConfig.Format">
            <summary>
            The format object configures the format of the string returned by the toFormat method.
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.DecimalSeparator">
            <summary>
            the decimal separator
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSeparator">
            <summary>
            the grouping separator of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.GroupSize">
            <summary>
            the primary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.SecondaryGroupSize">
            <summary>
            the secondary grouping size of the integer part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSeparator">
            <summary>
            the grouping separator of the fraction part of the number
            </summary>
        </member>
        <member name="F:System.DecimalFormatConfig.FractionGroupSize">
            <summary>
            the grouping size of the fraction part of the number
            </summary>
        </member>
        <member name="T:System.LocaleOptions">
            <summary>
            An object with some or all of the following properties:
            </summary>
        </member>
        <member name="F:System.LocaleOptions.LocaleMatcher">
            <summary>
            The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". For information about this option, see the Intl page.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Usage">
            <summary>
            Whether the comparison is for sorting or for searching for matching strings. Possible values are "sort" and "search"; the default is "sort".
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Sensitivity">
            <summary>
            Which differences in the strings should lead to non-zero result values.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.IgnorePunctuation">
            <summary>
            Whether punctuation should be ignored. Possible values are true and false; the default is false.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.Numeric">
            <summary>
            Whether numeric collation should be used, such that "1" &lt; "2" &lt; "10". Possible values are true and false; the default is false. This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="F:System.LocaleOptions.CaseFirst">
            <summary>
            Whether upper case or lower case should sort first. Possible values are "upper", "lower", or "false" (use the locale's default); the default is "false". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="T:System.CaseFirst">
            <summary>
            Whether upper case or lower case should sort first. Possible values are "upper", "lower", or "false" (use the locale's default); the default is "false". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property.
            </summary>
        </member>
        <member name="T:System.Sensitivity">
            <summary>
            Which differences in the strings should lead to non-zero result values.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Base">
            <summary>
            Only strings that differ in base letters compare as unequal. Examples: a ≠ b, a = á, a = A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Accent">
            <summary>
            Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a ≠ b, a ≠ á, a = A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Case">
            <summary>
            Only strings that differ in base letters or case compare as unequal. Examples: a ≠ b, a = á, a ≠ A.
            </summary>
        </member>
        <member name="F:System.Sensitivity.Variant">
            <summary>
            Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a ≠ b, a ≠ á, a ≠ A.
            </summary>
        </member>
        <member name="T:System.Usage">
            <summary>
            Whether the comparison is for sorting or for searching for matching strings. Possible values are "sort" and "search"; the default is "sort".
            </summary>
        </member>
        <member name="T:System.LocaleMatcher">
            <summary>
            The locale matching algorithm to use. Possible values are "lookup" and "best fit"; the default is "best fit". For information about this option, see the Intl page.
            </summary>
        </member>
        <member name="F:System.LocaleMatcher.Lookup">
             <summary>
            
             </summary>
        </member>
        <member name="F:System.LocaleMatcher.BestFit">
             <summary>
            
             </summary>
        </member>
        <member name="M:System.Date.#ctor(System.Double)">
            <summary>
            Double value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).
            </summary>
            <param name="value">The numberof milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch)</param>
        </member>
        <member name="M:System.Date.#ctor(System.String)">
            <summary>
            String value representing a date. The string should be in a format recognized by the Date.parse() method (IETF-compliant RFC 2822 timestamps and also a version of ISO8601).
            </summary>
            <param name="dateString"></param>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
            <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
            <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
            <returns>One or several <see cref="T:System.AttributeTargets"/> values. The default is All.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.DummyTypeUsedToAddAttributeToDefaultValueTypeConstructor">
            <summary>
            If a constructor for a value type takes an instance of this type as a parameter, any attribute applied to that constructor will instead be applied to the default (undeclarable) constructor.
            </summary>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>
            This attribute marks a field, property, event or method as
            "browsable", i.e. present in the type descriptor associated with
            the type.
            </summary>
        </member>
        <member name="T:System.String">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="M:System.String.#ctor">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
        </member>
        <member name="M:System.String.#ctor(System.Object)">
            <summary>
            The String global object is a constructor for strings, or a sequence of characters.
            </summary>
            <param name="thing">Anything to be converted to a string.</param>
        </member>
        <member name="M:System.String.#ctor(System.Char,System.Int32)">
            <summary>
            Constructs a string from the value indicated by a specified character repeated a specified number of times.
            </summary>
            <param name="c">A character.</param>
            <param name="count">The number of times the character occurs.</param>
        </member>
        <member name="M:System.String.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an Empty string.
            </summary>
            <param name="value">The string to test. </param>
            <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or String.Empty, or if value consists exclusively of white-space characters. </returns>
        </member>
        <member name="M:System.String.FromCharCode">
            <summary>
            The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.
            </summary>
            <returns>String.Empty</returns>
        </member>
        <member name="M:System.String.FromCharCode(System.Int32[])">
            <summary>
            The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.
            </summary>
            <param name="numbers">A sequence of numbers that are Unicode values.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.CharAt(System.Int32)">
            <summary>
            The charAt() method returns the specified character from a string.
            </summary>
            <param name="index">An integer between 0 and 1-less-than the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.CharCodeAt(System.Int32)">
            <summary>
            The charCodeAt() method returns the numeric Unicode value of the character at the given index (except for unicode codepoints > 0x10000).
            </summary>
            <param name="index">An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String)">
            <summary>
            Determines whether two specified String objects have the same value.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
            <summary>
            Determines whether two specified String objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">The first string to compare, or null. </param>
            <param name="b">The second string to compare, or null. </param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.StringComparison)">
            <summary>
            Determines whether this string and a specified String object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared. </param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Equals(System.String)">
            <summary>
            Determines whether this instance and another specified String object have the same value.
            </summary>
            <param name="value">The string to compare to this instance.</param>
            <returns>true if the value of the value parameter is the same as this string; otherwise, false.</returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <param name="string3">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="string1">Strings to concatenate to this string.</param>
            <param name="string2">Strings to concatenate to this string.</param>
            <param name="string3">Strings to concatenate to this string.</param>
            <param name="string4">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="strings">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <param name="object3">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="object1">Strings to concatenate to this string.</param>
            <param name="object2">Strings to concatenate to this string.</param>
            <param name="object3">Strings to concatenate to this string.</param>
            <param name="object4">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary>
            The concat() method combines the text of two or more strings and returns a new string.
            </summary>
            <param name="objects">Strings to concatenate to this string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary>
            The compare() method compares two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
            <summary>
            The compare() method compares two specified String objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="strB">The second string to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            The compare() method compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The compare() method compares substrings of two specified String objects and returns an integer that indicates their relative position in the sort order.
            </summary>
            <param name="strA">The first string to compare.</param>
            <param name="indexA">The position of the substring within strA.</param>
            <param name="strB">The second string to compare.</param>
            <param name="indexB">The position of the substring within strB.</param>
            <param name="length">The maximum number of characters in the substrings to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <returns>The zero-based index position of value if that character is found, or -1 if it is not.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. The search starts at a specified character position and
            examines a specified number of character positions. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A character to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            The indexOf() method returns the index within the calling String object of the first occurrence of the specified value. The search starts at a specified character position and
            examines a specified number of character positions. Returns -1 if the value is not found.
            </summary>
            <param name="searchValue">A string representing the value to search for.</param>
            <param name="fromIndex">The location within the calling string to start the search from.</param>
            <param name="count">The number of character positions to examine.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. A parameter specifies the type of search
             to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. Parameters specify the starting search
             position in the current string and the type of search to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="fromIndex">The search starting position.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in the current System.String object. Parameters specify the starting search
             position in the current string, the number of characters in the current string
             to search, and the type of search to use for the specified string.
            </summary>
            <param name="searchValue">The string to search for.</param>
            <param name="fromIndex">The search starting position.</param>
            <param name="count">The number of character positions to examine.</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not. If value is System.String.Empty, the return value is 0.</returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <returns></returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String,System.String)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <param name="locales">A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:</param>
            <returns></returns>
        </member>
        <member name="M:System.String.LocaleCompare(System.String,System.String,System.LocaleOptions)">
            <summary>
            The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
            The new locales and options arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale and sort order used are entirely implementation dependent.
            </summary>
            <param name="compareString">The string against which the referring string is comparing</param>
            <param name="locales">A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:</param>
            <param name="options">An object with some or all of the following properties:</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Match(System.Text.RegularExpressions.Regex)">
            <summary>
            The match() method retrieves the matches when matching a string against a regular expression.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Match(System.String)">
            <summary>
            The match() method retrieves the matches when matching a string against a regular expression.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="newSubStr">The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the "Specifying a string as a parameter" section below.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.Text.RegularExpressions.Regex,System.Delegate)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.Text.RegularExpressions.Regex,System.Func{System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.Text.RegularExpressions.Regex,System.Func{System.String,System.Int32,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.Text.RegularExpressions.Regex,System.Func{System.String,System.Int32,System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="Regex">A Regex object. The match is replaced by the return value of parameter #2.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.String)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="newSubStr">The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the "Specifying a string as a parameter" section below.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Delegate)">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.Int32,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Replace(System.String,System.Func{System.String,System.Int32,System.String,System.String})">
            <summary>
            The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.  The pattern can be a string or a Regex, and the replacement can be a string or a function to be called for each match.
            </summary>
            <param name="substr">A String that is to be replaced by newSubStr.</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:System.String.Search(System.Text.RegularExpressions.Regex)">
            <summary>
            The search() method executes a search for a match between a regular expression and this String object.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Search(System.String)">
            <summary>
            The search() method executes a search for a match between a regular expression and this String object.
            </summary>
            <param name="Regex">A regular expression object. If a non-Regex object obj is passed, it is implicitly converted to a Regex by using new Regex(obj).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Slice(System.Int32)">
            <summary>
            The slice() method extracts a section of a string and returns a new string.
            </summary>
            <param name="beginSlice">The zero-based index at which to begin extraction. If negative, it is treated as (sourceLength-beginSlice) where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength-3).</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Slice(System.Int32,System.Int32)">
            <summary>
            The slice() method extracts a section of a string and returns a new string.
            </summary>
            <param name="beginSlice">The zero-based index at which to begin extraction. If negative, it is treated as (sourceLength-beginSlice) where sourceLength is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength-3).</param>
            <param name="endSlice">The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string. If negative, it is treated as (sourceLength-endSlice) where sourceLength is the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.JsSubstring(System.Int32)">
            <summary>
            The substring() method returns a subset of a string between one index and another, or through the end of the string.
            </summary>
            <param name="indexA">An integer between 0 and the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.JsSubstring(System.Int32,System.Int32)">
            <summary>
            The substring() method returns a subset of a string between one index and another, or through the end of the string.
            </summary>
            <param name="indexA">An integer between 0 and the length of the string.</param>
            <param name="indexB">An integer between 0 and the length of the string.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substr(System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substr(System.Int32,System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <param name="length">The number of characters to extract.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary>
            The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.
            </summary>
            <param name="start">Location at which to begin extracting characters. If a negative number is given, it is treated as strLength+start where strLength = to the length of the string (for example, if start is -3 it is treated as strLength-3.)</param>
            <param name="length">The number of characters to extract.</param>
            <returns></returns>
        </member>
        <member name="M:System.String.ToLower">
            <summary>
            The toLower() method returns the calling string value converted to lowercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.String.ToUpper">
            <summary>
            The toUpper() method returns the calling string value converted to uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.String.Trim">
            <summary>
            The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).
            </summary>
            <returns>The trimmed string</returns>
        </member>
        <member name="M:System.String.Contains(System.String)">
            <summary>
            Returns a value indicating whether a specified substring occurs within this string.
            </summary>
            <param name="value">The string to seek. </param>
            <returns>true if the value parameter occurs within this string, or if value is the empty string (""); otherwise, false.</returns>
        </member>
        <member name="M:System.String.Format(System.String,System.Object[])">
             Summary:
                 Replaces the format item in a specified string with the string representation
                 of a corresponding object in a specified array.
            
             Parameters:
               format:
                 A composite format string.
            
               args:
                 An object array that contains zero or more objects to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representation
                 of the corresponding objects in args.
            
        </member>
        <member name="M:System.String.Format(System.String,System.Object)">
            
             Summary:
                 Replaces one or more format items in a specified string with the string representation
                 of a specified object.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The object to format.
            
             Returns:
                 A copy of format in which any format items are replaced by the string representation
                 of arg0.
        </member>
        <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
            
             Summary:
                 Replaces the format items in a specified string with the string representations
                 of corresponding objects in a specified array. A parameter supplies culture-specific
                 formatting information.
            
             Parameters:
               provider:
                 An object that supplies culture-specific formatting information.
            
               format:
                 A composite format string.
            
               args:
                 An object array that contains zero or more objects to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representation
                 of the corresponding objects in args.
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object)">
            
             Summary:
                 Replaces the format items in a specified string with the string representation
                 of two specified objects.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The first object to format.
            
               arg1:
                 The second object to format.
            
             Returns:
                 A copy of format in which format items are replaced by the string representations
                 of arg0 and arg1.
        </member>
        <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
            
             Summary:
                 Replaces the format items in a specified string with the string representation
                 of three specified objects.
            
             Parameters:
               format:
                 A composite format string.
            
               arg0:
                 The first object to format.
            
               arg1:
                 The second object to format.
            
               arg2:
                 The third object to format.
            
             Returns:
                 A copy of format in which the format items have been replaced by the string representations
                 of arg0, arg1, and arg2.
        </member>
        <member name="T:System.Threading.Tasks.IPromise">
            <summary>
            CommonJS Promise/A interface
            http://wiki.commonjs.org/wiki/Promises/A
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.IPromise.Then(System.Delegate,System.Delegate)">
            <summary>
            Adds a fulfilledHandler, errorHandler to be called for completion of a promise.
            </summary>
            <param name="fulfilledHandler">The fulfilledHandler is called when the promise is fulfilled</param>
            <param name="errorHandler">The errorHandler is called when a promise fails.</param>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Created">
            <summary>
            The task has been initialized but has not yet been scheduled.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
            <summary>
            The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
            <summary>
            The task has been scheduled for execution but has not yet begun executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Running">
            <summary>
            The task is running but has not yet completed.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
            <summary>
            The task has finished executing and is implicitly waiting for
            attached child tasks to complete.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
            <summary>
            The task completed execution successfully.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
            <summary>
            The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken
            while the token was in signaled state, or the task's CancellationToken was already signaled before the
            task started executing.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
            <summary>
            The task completed due to an unhandled exception.
            </summary>
        </member>
    </members>
</doc>
