//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

//Reference:
//NiveumJson

using System;
using System.Collections.Generic;
using System.Linq;
using Niveum.Json;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Communication.Json
{
    public sealed class JsonSerializationServer
    {
        private Dictionary<String, Func<IApplicationServer, String, String>> ClientCommandsWithoutHash;
        private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>> ClientCommands;
        private Dictionary<String, Action<IApplicationServer, String, Action<String>, Action<Exception>>> AsyncClientCommandsWithoutHash;
        private Dictionary<KeyValuePair<String, UInt32>, Action<IApplicationServer, String, Action<String>, Action<Exception>>> AsyncClientCommands;

        private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>
        {
            public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)
            {
                if (!x.Key.Equals(y.Key)) { return false; }
                if (!x.Value.Equals(y.Value)) { return false; }
                return true;
            }

            public int GetHashCode(KeyValuePair<TKey, TValue> obj)
            {
                var KeyHash = obj.Key.GetHashCode();
                var ValueHash = obj.Value.GetHashCode();
                return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));
            }
        }

        public JsonSerializationServer()
        {
            ClientCommandsWithoutHash = new Dictionary<String, Func<IApplicationServer, String, String>>(StringComparer.OrdinalIgnoreCase);
            ClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>>(new KeyValuePairEqualityComparer<String, UInt32>());
            AsyncClientCommandsWithoutHash = new Dictionary<String, Action<IApplicationServer, String, Action<String>, Action<Exception>>>(StringComparer.OrdinalIgnoreCase);
            AsyncClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Action<IApplicationServer, String, Action<String>, Action<Exception>>>(new KeyValuePairEqualityComparer<String, UInt32>());
            ClientCommandsWithoutHash.Add("Shutdown", (s, p) => JsonTranslator.ShutdownReplyToJson(s.Shutdown(JsonTranslator.ShutdownRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("Shutdown", 0x9A7D9767), (s, p) => JsonTranslator.ShutdownReplyToJson(s.Shutdown(JsonTranslator.ShutdownRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("ServerTime", (s, p) => JsonTranslator.ServerTimeReplyToJson(s.ServerTime(JsonTranslator.ServerTimeRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("ServerTime", 0xF23902FC), (s, p) => JsonTranslator.ServerTimeReplyToJson(s.ServerTime(JsonTranslator.ServerTimeRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("Quit", (s, p) => JsonTranslator.QuitReplyToJson(s.Quit(JsonTranslator.QuitRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("Quit", 0x03EACC74), (s, p) => JsonTranslator.QuitReplyToJson(s.Quit(JsonTranslator.QuitRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("CheckSchemaVersion", (s, p) => JsonTranslator.CheckSchemaVersionReplyToJson(s.CheckSchemaVersion(JsonTranslator.CheckSchemaVersionRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("CheckSchemaVersion", 0x814EDA32), (s, p) => JsonTranslator.CheckSchemaVersionReplyToJson(s.CheckSchemaVersion(JsonTranslator.CheckSchemaVersionRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("SendMessage", (s, p) => JsonTranslator.SendMessageReplyToJson(s.SendMessage(JsonTranslator.SendMessageRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("SendMessage", 0x15FFA296), (s, p) => JsonTranslator.SendMessageReplyToJson(s.SendMessage(JsonTranslator.SendMessageRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("TestAdd", (s, p) => JsonTranslator.TestAddReplyToJson(s.TestAdd(JsonTranslator.TestAddRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("TestAdd", 0xC9C940C6), (s, p) => JsonTranslator.TestAddReplyToJson(s.TestAdd(JsonTranslator.TestAddRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("TestMultiply", (s, p) => JsonTranslator.TestMultiplyReplyToJson(s.TestMultiply(JsonTranslator.TestMultiplyRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("TestMultiply", 0x388B20D1), (s, p) => JsonTranslator.TestMultiplyReplyToJson(s.TestMultiply(JsonTranslator.TestMultiplyRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("TestText", (s, p) => JsonTranslator.TestTextReplyToJson(s.TestText(JsonTranslator.TestTextRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("TestText", 0xCCAC718E), (s, p) => JsonTranslator.TestTextReplyToJson(s.TestText(JsonTranslator.TestTextRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommandsWithoutHash.Add("TestMessage", (s, p) => JsonTranslator.TestMessageReplyToJson(s.TestMessage(JsonTranslator.TestMessageRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
            ClientCommands.Add(new KeyValuePair<String, UInt32>("TestMessage", 0x2A540671), (s, p) => JsonTranslator.TestMessageReplyToJson(s.TestMessage(JsonTranslator.TestMessageRequestFromJson(JToken.Parse(p)))).ToString(Formatting.None));
        }

        public UInt64 Hash
        {
            get
            {
                return 0x46A50E7F1EF0A8D1;
            }
        }

        public Boolean HasCommand(String CommandName)
        {
            return ClientCommandsWithoutHash.ContainsKey(CommandName);
        }
        public Boolean HasCommandAsync(String CommandName)
        {
            return AsyncClientCommandsWithoutHash.ContainsKey(CommandName);
        }

        public Boolean HasCommand(String CommandName, UInt32 CommandHash)
        {
            return ClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));
        }
        public Boolean HasCommandAsync(String CommandName, UInt32 CommandHash)
        {
            return AsyncClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));
        }

        public String ExecuteCommand(IApplicationServer s, String CommandName, String Parameters)
        {
            var cmd = ClientCommandsWithoutHash[CommandName];
            return cmd(s, Parameters);
        }
        public void ExecuteCommandAsync(IApplicationServer s, String CommandName, String Parameters, Action<String> Callback, Action<Exception> OnFailure)
        {
            var cmd = AsyncClientCommandsWithoutHash[CommandName];
            cmd(s, Parameters, Callback, OnFailure);
        }

        public String ExecuteCommand(IApplicationServer s, String CommandName, UInt32 CommandHash, String Parameters)
        {
            var cmd = ClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];
            return cmd(s, Parameters);
        }
        public void ExecuteCommandAsync(IApplicationServer s, String CommandName, UInt32 CommandHash, String Parameters, Action<String> Callback, Action<Exception> OnFailure)
        {
            var cmd = AsyncClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];
            cmd(s, Parameters, Callback, OnFailure);
        }
    }
    public sealed class JsonSerializationServerEventDispatcher
    {
        public JsonSerializationServerEventDispatcher(IApplicationServer s)
        {
            s.Error += e => OnServerEvent("Error", 0xEFF2E862, JsonTranslator.ErrorEventToJson(e).ToString(Formatting.None));
            s.ErrorCommand += e => OnServerEvent("ErrorCommand", 0xF438AC9D, JsonTranslator.ErrorCommandEventToJson(e).ToString(Formatting.None));
            s.ServerShutdown += e => OnServerEvent("ServerShutdown", 0x0C558D6B, JsonTranslator.ServerShutdownEventToJson(e).ToString(Formatting.None));
            s.MessageReceived += e => OnServerEvent("MessageReceived", 0x5E823C51, JsonTranslator.MessageReceivedEventToJson(e).ToString(Formatting.None));
            s.TestMessageReceived += e => OnServerEvent("TestMessageReceived", 0xBD9BCD00, JsonTranslator.TestMessageReceivedEventToJson(e).ToString(Formatting.None));
        }

        public delegate void ServerEventDelegate(String CommandName, UInt32 CommandHash, String Parameters);
        public event ServerEventDelegate ServerEvent;
        private void OnServerEvent(String CommandName, UInt32 CommandHash, String Parameters)
        {
            if (ServerEvent != null) { ServerEvent(CommandName, CommandHash, Parameters); }
        }
    }

    public interface IJsonSender
    {
        void Send(String CommandName, UInt32 CommandHash, String Parameters);
    }

    public sealed class JsonSerializationClient
    {
        private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>
        {
            public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)
            {
                if (!x.Key.Equals(y.Key)) { return false; }
                if (!x.Value.Equals(y.Value)) { return false; }
                return true;
            }

            public int GetHashCode(KeyValuePair<TKey, TValue> obj)
            {
                var KeyHash = obj.Key.GetHashCode();
                var ValueHash = obj.Value.GetHashCode();
                return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));
            }
        }

        private class ApplicationClient : IApplicationClient
        {
            public IJsonSender s;
            public Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>> ClientCommandCallbacks;

            public UInt64 Hash
            {
                get
                {
                    return 0x46A50E7F1EF0A8D1;
                }
            }

            public void DequeueCallback(String CommandName)
            {
                ClientCommandCallbacks[CommandName].Dequeue();
            }

            private void AddCallback(String CommandName, UInt32 CommandHash, Action<String> Callback)
            {
                if (ClientCommandCallbacks.ContainsKey(CommandName))
                {
                    ClientCommandCallbacks[CommandName].Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));
                }
                else
                {
                    var q = new Queue<KeyValuePair<UInt32, Action<String>>>();
                    q.Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));
                    ClientCommandCallbacks.Add(CommandName, q);
                }
            }

            public void Shutdown(ShutdownRequest r, Action<ShutdownReply> Callback)
            {
                var Request = JsonTranslator.ShutdownRequestToJson(r).ToString(Formatting.None);
                AddCallback("Shutdown", 0x9A7D9767, Parameters => Callback(JsonTranslator.ShutdownReplyFromJson(JToken.Parse(Parameters))));
                s.Send("Shutdown", 0x9A7D9767, Request);
            }
            public event Action<ErrorEvent> Error;
            public void RaiseError(ErrorEvent e) { if (Error != null) { Error(e); } }
            public event Action<ErrorCommandEvent> ErrorCommand;
            public void RaiseErrorCommand(ErrorCommandEvent e) { if (ErrorCommand != null) { ErrorCommand(e); } }
            public void ServerTime(ServerTimeRequest r, Action<ServerTimeReply> Callback)
            {
                var Request = JsonTranslator.ServerTimeRequestToJson(r).ToString(Formatting.None);
                AddCallback("ServerTime", 0xF23902FC, Parameters => Callback(JsonTranslator.ServerTimeReplyFromJson(JToken.Parse(Parameters))));
                s.Send("ServerTime", 0xF23902FC, Request);
            }
            public void Quit(QuitRequest r, Action<QuitReply> Callback)
            {
                var Request = JsonTranslator.QuitRequestToJson(r).ToString(Formatting.None);
                AddCallback("Quit", 0x03EACC74, Parameters => Callback(JsonTranslator.QuitReplyFromJson(JToken.Parse(Parameters))));
                s.Send("Quit", 0x03EACC74, Request);
            }
            public void CheckSchemaVersion(CheckSchemaVersionRequest r, Action<CheckSchemaVersionReply> Callback)
            {
                var Request = JsonTranslator.CheckSchemaVersionRequestToJson(r).ToString(Formatting.None);
                AddCallback("CheckSchemaVersion", 0x814EDA32, Parameters => Callback(JsonTranslator.CheckSchemaVersionReplyFromJson(JToken.Parse(Parameters))));
                s.Send("CheckSchemaVersion", 0x814EDA32, Request);
            }
            public event Action<ServerShutdownEvent> ServerShutdown;
            public void RaiseServerShutdown(ServerShutdownEvent e) { if (ServerShutdown != null) { ServerShutdown(e); } }
            public void SendMessage(SendMessageRequest r, Action<SendMessageReply> Callback)
            {
                var Request = JsonTranslator.SendMessageRequestToJson(r).ToString(Formatting.None);
                AddCallback("SendMessage", 0x15FFA296, Parameters => Callback(JsonTranslator.SendMessageReplyFromJson(JToken.Parse(Parameters))));
                s.Send("SendMessage", 0x15FFA296, Request);
            }
            public event Action<MessageReceivedEvent> MessageReceived;
            public void RaiseMessageReceived(MessageReceivedEvent e) { if (MessageReceived != null) { MessageReceived(e); } }
            public void TestAdd(TestAddRequest r, Action<TestAddReply> Callback)
            {
                var Request = JsonTranslator.TestAddRequestToJson(r).ToString(Formatting.None);
                AddCallback("TestAdd", 0xC9C940C6, Parameters => Callback(JsonTranslator.TestAddReplyFromJson(JToken.Parse(Parameters))));
                s.Send("TestAdd", 0xC9C940C6, Request);
            }
            public void TestMultiply(TestMultiplyRequest r, Action<TestMultiplyReply> Callback)
            {
                var Request = JsonTranslator.TestMultiplyRequestToJson(r).ToString(Formatting.None);
                AddCallback("TestMultiply", 0x388B20D1, Parameters => Callback(JsonTranslator.TestMultiplyReplyFromJson(JToken.Parse(Parameters))));
                s.Send("TestMultiply", 0x388B20D1, Request);
            }
            public void TestText(TestTextRequest r, Action<TestTextReply> Callback)
            {
                var Request = JsonTranslator.TestTextRequestToJson(r).ToString(Formatting.None);
                AddCallback("TestText", 0xCCAC718E, Parameters => Callback(JsonTranslator.TestTextReplyFromJson(JToken.Parse(Parameters))));
                s.Send("TestText", 0xCCAC718E, Request);
            }
            public void TestMessage(TestMessageRequest r, Action<TestMessageReply> Callback)
            {
                var Request = JsonTranslator.TestMessageRequestToJson(r).ToString(Formatting.None);
                AddCallback("TestMessage", 0x2A540671, Parameters => Callback(JsonTranslator.TestMessageReplyFromJson(JToken.Parse(Parameters))));
                s.Send("TestMessage", 0x2A540671, Request);
            }
            public event Action<TestMessageReceivedEvent> TestMessageReceived;
            public void RaiseTestMessageReceived(TestMessageReceivedEvent e) { if (TestMessageReceived != null) { TestMessageReceived(e); } }
        }

        private ApplicationClient c;
        private Dictionary<KeyValuePair<String, UInt32>, Action<String>> ServerCommands;

        public JsonSerializationClient(IJsonSender s)
        {
            c = new ApplicationClient();
            c.s = s;
            c.ClientCommandCallbacks = new Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>>();
            ServerCommands = new Dictionary<KeyValuePair<String, UInt32>, Action<String>>(new KeyValuePairEqualityComparer<String, UInt32>());
            ServerCommands.Add(new KeyValuePair<String, UInt32>("Error", 0xEFF2E862), Parameters => c.RaiseError(JsonTranslator.ErrorEventFromJson(JToken.Parse(Parameters))));
            ServerCommands.Add(new KeyValuePair<String, UInt32>("ErrorCommand", 0xF438AC9D), Parameters => c.RaiseErrorCommand(JsonTranslator.ErrorCommandEventFromJson(JToken.Parse(Parameters))));
            ServerCommands.Add(new KeyValuePair<String, UInt32>("ServerShutdown", 0x0C558D6B), Parameters => c.RaiseServerShutdown(JsonTranslator.ServerShutdownEventFromJson(JToken.Parse(Parameters))));
            ServerCommands.Add(new KeyValuePair<String, UInt32>("MessageReceived", 0x5E823C51), Parameters => c.RaiseMessageReceived(JsonTranslator.MessageReceivedEventFromJson(JToken.Parse(Parameters))));
            ServerCommands.Add(new KeyValuePair<String, UInt32>("TestMessageReceived", 0xBD9BCD00), Parameters => c.RaiseTestMessageReceived(JsonTranslator.TestMessageReceivedEventFromJson(JToken.Parse(Parameters))));
        }

        public IApplicationClient GetApplicationClient()
        {
            return c;
        }

        public void HandleResult(String CommandName, UInt32 CommandHash, String Parameters)
        {
            if (c.ClientCommandCallbacks.ContainsKey(CommandName))
            {
                var q = c.ClientCommandCallbacks[CommandName];
                if (q.Count == 0)
                {
                    throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
                }
                var CallbackPair = q.Peek();
                if (CallbackPair.Key != CommandHash)
                {
                    throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
                }
                q.Dequeue();
                var Callback = CallbackPair.Value;
                Callback(Parameters);
                return;
            }

            var p = new KeyValuePair<String, UInt32>(CommandName, CommandHash);
            if (ServerCommands.ContainsKey(p))
            {
                var a = ServerCommands[p];
                a(Parameters);
                return;
            }

            throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
        }
    }

    public sealed class JsonLogAspectWrapper : IApplicationServer
    {
        private IApplicationServer Inner;

        public JsonLogAspectWrapper(IApplicationServer Inner)
        {
            this.Inner = Inner;
            Inner.Error += e =>
            {
                if (ServerCommand != null) { ServerCommand("Error", JsonTranslator.ErrorEventToJson(e).ToString(Formatting.None)); }
                if (Error != null) { Error(e); }
            };
            Inner.ErrorCommand += e =>
            {
                if (ServerCommand != null) { ServerCommand("ErrorCommand", JsonTranslator.ErrorCommandEventToJson(e).ToString(Formatting.None)); }
                if (ErrorCommand != null) { ErrorCommand(e); }
            };
            Inner.ServerShutdown += e =>
            {
                if (ServerCommand != null) { ServerCommand("ServerShutdown", JsonTranslator.ServerShutdownEventToJson(e).ToString(Formatting.None)); }
                if (ServerShutdown != null) { ServerShutdown(e); }
            };
            Inner.MessageReceived += e =>
            {
                if (ServerCommand != null) { ServerCommand("MessageReceived", JsonTranslator.MessageReceivedEventToJson(e).ToString(Formatting.None)); }
                if (MessageReceived != null) { MessageReceived(e); }
            };
            Inner.TestMessageReceived += e =>
            {
                if (ServerCommand != null) { ServerCommand("TestMessageReceived", JsonTranslator.TestMessageReceivedEventToJson(e).ToString(Formatting.None)); }
                if (TestMessageReceived != null) { TestMessageReceived(e); }
            };
        }

        public event Action<String, String> ClientCommandIn;
        public event Action<String, String> ClientCommandOut;
        public event Action<String, String> ServerCommand;

        public ShutdownReply Shutdown(ShutdownRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("Shutdown", JsonTranslator.ShutdownRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.Shutdown(Request);
            if (ClientCommandOut != null) { ClientCommandOut("Shutdown", JsonTranslator.ShutdownReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public event Action<ErrorEvent> Error;
        public event Action<ErrorCommandEvent> ErrorCommand;
        public ServerTimeReply ServerTime(ServerTimeRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("ServerTime", JsonTranslator.ServerTimeRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.ServerTime(Request);
            if (ClientCommandOut != null) { ClientCommandOut("ServerTime", JsonTranslator.ServerTimeReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public QuitReply Quit(QuitRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("Quit", JsonTranslator.QuitRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.Quit(Request);
            if (ClientCommandOut != null) { ClientCommandOut("Quit", JsonTranslator.QuitReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public CheckSchemaVersionReply CheckSchemaVersion(CheckSchemaVersionRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("CheckSchemaVersion", JsonTranslator.CheckSchemaVersionRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.CheckSchemaVersion(Request);
            if (ClientCommandOut != null) { ClientCommandOut("CheckSchemaVersion", JsonTranslator.CheckSchemaVersionReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public event Action<ServerShutdownEvent> ServerShutdown;
        public SendMessageReply SendMessage(SendMessageRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("SendMessage", JsonTranslator.SendMessageRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.SendMessage(Request);
            if (ClientCommandOut != null) { ClientCommandOut("SendMessage", JsonTranslator.SendMessageReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public event Action<MessageReceivedEvent> MessageReceived;
        public TestAddReply TestAdd(TestAddRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("TestAdd", JsonTranslator.TestAddRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.TestAdd(Request);
            if (ClientCommandOut != null) { ClientCommandOut("TestAdd", JsonTranslator.TestAddReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public TestMultiplyReply TestMultiply(TestMultiplyRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("TestMultiply", JsonTranslator.TestMultiplyRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.TestMultiply(Request);
            if (ClientCommandOut != null) { ClientCommandOut("TestMultiply", JsonTranslator.TestMultiplyReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public TestTextReply TestText(TestTextRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("TestText", JsonTranslator.TestTextRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.TestText(Request);
            if (ClientCommandOut != null) { ClientCommandOut("TestText", JsonTranslator.TestTextReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public TestMessageReply TestMessage(TestMessageRequest Request)
        {
            if (ClientCommandIn != null) { ClientCommandIn("TestMessage", JsonTranslator.TestMessageRequestToJson(Request).ToString(Formatting.None)); }
            var Reply = Inner.TestMessage(Request);
            if (ClientCommandOut != null) { ClientCommandOut("TestMessage", JsonTranslator.TestMessageReplyToJson(Reply).ToString(Formatting.None)); }
            return Reply;
        }
        public event Action<TestMessageReceivedEvent> TestMessageReceived;
    }

    public static class JsonTranslator
    {
        public static Unit UnitFromJson(JToken j)
        {
            return new Unit();
        }
        public static JObject UnitToJson(Unit v)
        {
            return new JObject();
        }

        public static Boolean BooleanFromJson(JToken j)
        {
            if (j.Type != JTokenType.Boolean) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToBoolean(jv.Value);
        }
        public static JValue BooleanToJson(Boolean v)
        {
            return new JValue(v);
        }

        public static String StringFromJson(JToken j)
        {
            if (j.Type != JTokenType.String) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToString(jv.Value);
        }
        public static JValue StringToJson(String v)
        {
            return new JValue(v);
        }

        public static Type TypeFromJson(JToken j)
        {
            throw new NotSupportedException();
        }
        public static JValue TypeToJson(Type v)
        {
            throw new NotSupportedException();
        }

        public static Int IntFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToInt32(jv.Value);
        }
        public static JValue IntToJson(Int v)
        {
            return new JValue(v);
        }

        public static Real RealFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToDouble(jv.Value);
        }
        public static JValue RealToJson(Real v)
        {
            return new JValue(v);
        }

        public static Byte ByteFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToByte(jv.Value);
        }
        public static JValue ByteToJson(Byte v)
        {
            return new JValue(v);
        }

        public static UInt8 UInt8FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToByte(jv.Value);
        }
        public static JValue UInt8ToJson(UInt8 v)
        {
            return new JValue(v);
        }

        public static UInt16 UInt16FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToUInt16(jv.Value);
        }
        public static JValue UInt16ToJson(UInt16 v)
        {
            return new JValue(v);
        }

        public static UInt32 UInt32FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToUInt32(jv.Value);
        }
        public static JValue UInt32ToJson(UInt32 v)
        {
            return new JValue(v);
        }

        public static UInt64 UInt64FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToUInt64(jv.Value);
        }
        public static JValue UInt64ToJson(UInt64 v)
        {
            return new JValue(v);
        }

        public static Int8 Int8FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToSByte(jv.Value);
        }
        public static JValue Int8ToJson(Int8 v)
        {
            return new JValue(v);
        }

        public static Int16 Int16FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToInt16(jv.Value);
        }
        public static JValue Int16ToJson(Int16 v)
        {
            return new JValue(v);
        }

        public static Int32 Int32FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToInt32(jv.Value);
        }
        public static JValue Int32ToJson(Int32 v)
        {
            return new JValue(v);
        }

        public static Int64 Int64FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToInt64(jv.Value);
        }
        public static JValue Int64ToJson(Int64 v)
        {
            return new JValue(v);
        }

        public static Float32 Float32FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToSingle(jv.Value);
        }
        public static JValue Float32ToJson(Float32 v)
        {
            return new JValue(v);
        }

        public static Float64 Float64FromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return Convert.ToDouble(jv.Value);
        }
        public static JValue Float64ToJson(Float64 v)
        {
            return new JValue(v);
        }

        public static ShutdownRequest ShutdownRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ShutdownRequest();
            return o;
        }
        public static JObject ShutdownRequestToJson(ShutdownRequest o)
        {
            var jo = new JObject();
            return jo;
        }
        public static ShutdownReplyTag ShutdownReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (ShutdownReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue ShutdownReplyTagToJson(ShutdownReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static ShutdownReply ShutdownReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ShutdownReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("success"))
            {
                o._Tag = ShutdownReplyTag.Success;
                o.Success = UnitFromJson(jo["success"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject ShutdownReplyToJson(ShutdownReply o)
        {
            var jo = new JObject();
            if (o._Tag == ShutdownReplyTag.Success)
            {
                jo.Add("success", UnitToJson(o.Success));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static ErrorEvent ErrorEventFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ErrorEvent();
            o.Message = StringFromJson(jo["message"]);
            return o;
        }
        public static JObject ErrorEventToJson(ErrorEvent o)
        {
            var jo = new JObject();
            jo.Add("message", StringToJson(o.Message));
            return jo;
        }

        public static ErrorCommandEvent ErrorCommandEventFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ErrorCommandEvent();
            o.CommandName = StringFromJson(jo["commandName"]);
            return o;
        }
        public static JObject ErrorCommandEventToJson(ErrorCommandEvent o)
        {
            var jo = new JObject();
            jo.Add("commandName", StringToJson(o.CommandName));
            return jo;
        }

        public static ServerTimeRequest ServerTimeRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ServerTimeRequest();
            return o;
        }
        public static JObject ServerTimeRequestToJson(ServerTimeRequest o)
        {
            var jo = new JObject();
            return jo;
        }
        public static ServerTimeReplyTag ServerTimeReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (ServerTimeReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue ServerTimeReplyTagToJson(ServerTimeReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static ServerTimeReply ServerTimeReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ServerTimeReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("success"))
            {
                o._Tag = ServerTimeReplyTag.Success;
                o.Success = StringFromJson(jo["success"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject ServerTimeReplyToJson(ServerTimeReply o)
        {
            var jo = new JObject();
            if (o._Tag == ServerTimeReplyTag.Success)
            {
                jo.Add("success", StringToJson(o.Success));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static QuitRequest QuitRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new QuitRequest();
            return o;
        }
        public static JObject QuitRequestToJson(QuitRequest o)
        {
            var jo = new JObject();
            return jo;
        }
        public static QuitReplyTag QuitReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (QuitReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue QuitReplyTagToJson(QuitReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static QuitReply QuitReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new QuitReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("success"))
            {
                o._Tag = QuitReplyTag.Success;
                o.Success = UnitFromJson(jo["success"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject QuitReplyToJson(QuitReply o)
        {
            var jo = new JObject();
            if (o._Tag == QuitReplyTag.Success)
            {
                jo.Add("success", UnitToJson(o.Success));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static CheckSchemaVersionRequest CheckSchemaVersionRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new CheckSchemaVersionRequest();
            o.Hash = StringFromJson(jo["hash"]);
            return o;
        }
        public static JObject CheckSchemaVersionRequestToJson(CheckSchemaVersionRequest o)
        {
            var jo = new JObject();
            jo.Add("hash", StringToJson(o.Hash));
            return jo;
        }
        public static CheckSchemaVersionReplyTag CheckSchemaVersionReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (CheckSchemaVersionReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue CheckSchemaVersionReplyTagToJson(CheckSchemaVersionReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static CheckSchemaVersionReply CheckSchemaVersionReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new CheckSchemaVersionReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("head"))
            {
                o._Tag = CheckSchemaVersionReplyTag.Head;
                o.Head = UnitFromJson(jo["head"]);
                return o;
            }
            if (d.ContainsKey("supported"))
            {
                o._Tag = CheckSchemaVersionReplyTag.Supported;
                o.Supported = UnitFromJson(jo["supported"]);
                return o;
            }
            if (d.ContainsKey("notSupported"))
            {
                o._Tag = CheckSchemaVersionReplyTag.NotSupported;
                o.NotSupported = UnitFromJson(jo["notSupported"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject CheckSchemaVersionReplyToJson(CheckSchemaVersionReply o)
        {
            var jo = new JObject();
            if (o._Tag == CheckSchemaVersionReplyTag.Head)
            {
                jo.Add("head", UnitToJson(o.Head));
                return jo;
            }
            if (o._Tag == CheckSchemaVersionReplyTag.Supported)
            {
                jo.Add("supported", UnitToJson(o.Supported));
                return jo;
            }
            if (o._Tag == CheckSchemaVersionReplyTag.NotSupported)
            {
                jo.Add("notSupported", UnitToJson(o.NotSupported));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static ServerShutdownEvent ServerShutdownEventFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new ServerShutdownEvent();
            return o;
        }
        public static JObject ServerShutdownEventToJson(ServerShutdownEvent o)
        {
            var jo = new JObject();
            return jo;
        }

        public static SendMessageRequest SendMessageRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new SendMessageRequest();
            o.Content = StringFromJson(jo["content"]);
            return o;
        }
        public static JObject SendMessageRequestToJson(SendMessageRequest o)
        {
            var jo = new JObject();
            jo.Add("content", StringToJson(o.Content));
            return jo;
        }
        public static SendMessageReplyTag SendMessageReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (SendMessageReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue SendMessageReplyTagToJson(SendMessageReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static SendMessageReply SendMessageReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new SendMessageReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("success"))
            {
                o._Tag = SendMessageReplyTag.Success;
                o.Success = UnitFromJson(jo["success"]);
                return o;
            }
            if (d.ContainsKey("tooLong"))
            {
                o._Tag = SendMessageReplyTag.TooLong;
                o.TooLong = UnitFromJson(jo["tooLong"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject SendMessageReplyToJson(SendMessageReply o)
        {
            var jo = new JObject();
            if (o._Tag == SendMessageReplyTag.Success)
            {
                jo.Add("success", UnitToJson(o.Success));
                return jo;
            }
            if (o._Tag == SendMessageReplyTag.TooLong)
            {
                jo.Add("tooLong", UnitToJson(o.TooLong));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static MessageReceivedEvent MessageReceivedEventFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new MessageReceivedEvent();
            o.Content = StringFromJson(jo["content"]);
            return o;
        }
        public static JObject MessageReceivedEventToJson(MessageReceivedEvent o)
        {
            var jo = new JObject();
            jo.Add("content", StringToJson(o.Content));
            return jo;
        }

        public static TestAddRequest TestAddRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestAddRequest();
            o.Left = IntFromJson(jo["left"]);
            o.Right = IntFromJson(jo["right"]);
            return o;
        }
        public static JObject TestAddRequestToJson(TestAddRequest o)
        {
            var jo = new JObject();
            jo.Add("left", IntToJson(o.Left));
            jo.Add("right", IntToJson(o.Right));
            return jo;
        }
        public static TestAddReplyTag TestAddReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (TestAddReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue TestAddReplyTagToJson(TestAddReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static TestAddReply TestAddReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestAddReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("result"))
            {
                o._Tag = TestAddReplyTag.Result;
                o.Result = IntFromJson(jo["result"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject TestAddReplyToJson(TestAddReply o)
        {
            var jo = new JObject();
            if (o._Tag == TestAddReplyTag.Result)
            {
                jo.Add("result", IntToJson(o.Result));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static TestMultiplyRequest TestMultiplyRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestMultiplyRequest();
            o.Operand = RealFromJson(jo["operand"]);
            return o;
        }
        public static JObject TestMultiplyRequestToJson(TestMultiplyRequest o)
        {
            var jo = new JObject();
            jo.Add("operand", RealToJson(o.Operand));
            return jo;
        }
        public static TestMultiplyReplyTag TestMultiplyReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (TestMultiplyReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue TestMultiplyReplyTagToJson(TestMultiplyReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static TestMultiplyReply TestMultiplyReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestMultiplyReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("result"))
            {
                o._Tag = TestMultiplyReplyTag.Result;
                o.Result = RealFromJson(jo["result"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject TestMultiplyReplyToJson(TestMultiplyReply o)
        {
            var jo = new JObject();
            if (o._Tag == TestMultiplyReplyTag.Result)
            {
                jo.Add("result", RealToJson(o.Result));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static TestTextRequest TestTextRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestTextRequest();
            o.Text = StringFromJson(jo["text"]);
            return o;
        }
        public static JObject TestTextRequestToJson(TestTextRequest o)
        {
            var jo = new JObject();
            jo.Add("text", StringToJson(o.Text));
            return jo;
        }
        public static TestTextReplyTag TestTextReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (TestTextReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue TestTextReplyTagToJson(TestTextReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static TestTextReply TestTextReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestTextReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("result"))
            {
                o._Tag = TestTextReplyTag.Result;
                o.Result = StringFromJson(jo["result"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject TestTextReplyToJson(TestTextReply o)
        {
            var jo = new JObject();
            if (o._Tag == TestTextReplyTag.Result)
            {
                jo.Add("result", StringToJson(o.Result));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static TestMessageRequest TestMessageRequestFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestMessageRequest();
            o.Message = StringFromJson(jo["message"]);
            return o;
        }
        public static JObject TestMessageRequestToJson(TestMessageRequest o)
        {
            var jo = new JObject();
            jo.Add("message", StringToJson(o.Message));
            return jo;
        }
        public static TestMessageReplyTag TestMessageReplyTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (TestMessageReplyTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue TestMessageReplyTagToJson(TestMessageReplyTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
        public static TestMessageReply TestMessageReplyFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestMessageReply();
            var d = (IDictionary<string, JToken>)(jo);
            if (d.ContainsKey("success"))
            {
                o._Tag = TestMessageReplyTag.Success;
                o.Success = IntFromJson(jo["success"]);
                return o;
            }
            throw new InvalidOperationException();
        }
        public static JObject TestMessageReplyToJson(TestMessageReply o)
        {
            var jo = new JObject();
            if (o._Tag == TestMessageReplyTag.Success)
            {
                jo.Add("success", IntToJson(o.Success));
                return jo;
            }
            throw new InvalidOperationException();
        }

        public static TestMessageReceivedEvent TestMessageReceivedEventFromJson(JToken j)
        {
            if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
            var jo = j as JObject;
            if (jo == null) { throw new InvalidOperationException(); }
            var o = new TestMessageReceivedEvent();
            o.Message = StringFromJson(jo["message"]);
            return o;
        }
        public static JObject TestMessageReceivedEventToJson(TestMessageReceivedEvent o)
        {
            var jo = new JObject();
            jo.Add("message", StringToJson(o.Message));
            return jo;
        }

        public static OptionalTag OptionalTagFromJson(JToken j)
        {
            if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }
            var jv = j as JValue;
            return (OptionalTag)(Convert.ToInt64(jv.Value));
        }
        public static JValue OptionalTagToJson(OptionalTag o)
        {
            return new JValue(Convert.ToInt64(o));
        }
    }
}
