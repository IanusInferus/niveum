@page "/debug"
@using System.Net.Http.Json;
@using Communication
@using Communication.Json
@using Client
@inject HttpClient hc
@inject ClientContext cc
@inject IApplicationClient ac
@inject IJSRuntime JS

<PageTitle>Debug - @cc.SystemName</PageTitle>

<h1>Debug</h1>

<div>
    <p>
        <button class="btn btn-primary" @onclick="ButtonAlertClicked">Test Alert</button>
    </p>
</div>

<div>
    <p>
        <button class="btn btn-primary" @onclick="ButtonTemplateClicked">Test Template</button>
    </p>
    <table class="table">
        <tbody>
            @foreach (var user in users)
            {
                <tr><td>@user.id</td><td>@user.name</td></tr>
            }
        </tbody>
    </table>
</div>

<div>
    <p>
        <button class="btn btn-primary" @onclick="ButtonAjaxClicked">Test AJAX</button>
    </p>
    <table class="table">
        <tbody>
            @foreach (var user in usersAjax)
            {
                <tr><td>@user.id</td><td>@user.name</td></tr>
            }
        </tbody>
    </table>
</div>

<div>
    <p>
        <button class="btn btn-primary" @onclick="ButtonServerTimeClicked">Test ServerTime</button>
    </p>
    <p>@serverTime<br /></p>
</div>

<EditForm Model="@dummy" OnValidSubmit="@ButtonSendCommandClicked">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        Command
        <button class="btn btn-primary" type="submit">Send</button>
    </p>
    <p>
        <InputTextArea @bind-Value="commandText" style="width: 100%" rows="10" />
    </p>
    <p>
        @foreach (var r in commandResults)
        {
            @r<br />
        }
    </p>
</EditForm>

@code {
    #pragma warning disable 8618

    public class User
    {
        public String id { get; init; }
        public String name { get; init; }
    }

    List<User> users = new List<User> { };
    List<User> usersAjax = new List<User> { };

    Object dummy = new Object();
    String serverTime = "";
    String commandText = "/Communication.ServerTime {}";
    List<String> commandResults = new List<String>();

    protected override async Task OnInitializedAsync()
    {
        await Task.FromResult(0);
    }

    async Task ButtonAlertClicked()
    {
        await JS.InvokeAsync<object>("alert", new object[] { "Test Alert Message" });
    }
    void ButtonTemplateClicked()
    {
        users.AddRange(new User[] { new User { id = "zhang3", name = "ZHANG San" }, new User { id = "li4", name = "LI Si" } });
    }
    async Task ButtonAjaxClicked()
    {
        usersAjax.AddRange((await hc.GetFromJsonAsync<User[]>("users.json"))!);
    }

    async Task ButtonServerTimeClicked()
    {
        serverTime = "";
        var r = await ac.ServerTime(new ServerTimeRequest { });
        Console.WriteLine("ButtonServerTimeClicked");
        if (r.OnSuccess)
        {
            serverTime = r.Success;
        }
    }

    async Task ButtonSendCommandClicked()
    {
        var jhc = cc.JsonHttpClient;

        commandResults.Clear();
        var commands = new List<KeyValuePair<String, String>>();
        foreach (var line in commandText.Replace("\r\n", "\n").Split("\n"))
        {
            var trimmed = line.Trim(' ');
            if (trimmed == "") { continue; }
            var parts = trimmed.Split(" ", 2);
            if (!parts[0].StartsWith("/"))
            {
                commandResults.Add("命令应以/起始");
                return;
            }
            var command = parts[0].Substring(1);
            var parameters = parts[1];
            commands.Add(new KeyValuePair<String, String>(command, parameters));
        }
        foreach (var (command, parameters) in commands)
        {
            jhc.Send(command, parameters, (command, parameters) =>
            {
                commandResults.Add($"/{command} {parameters}");
                StateHasChanged();
            }, ex =>
            {
                commandResults.Add(ex.ToString());
                StateHasChanged();
            });
        }

        await Task.FromResult(0);
    }
}
