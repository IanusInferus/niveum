//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

//Reference:

using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Diagnostics;
using System.Data;
using Krustallos;
using Database.Database;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;

namespace Database.Krustallos
{

    public class KrustallosData
    {
        public VersionedStore<Int, TestRecord> TestRecord = new VersionedStore<Int, TestRecord>();
        public VersionedStore<Int, TestLockRecord> TestLockRecord = new VersionedStore<Int, TestLockRecord>();
        public VersionedStore<Int, TestDuplicatedKeyNameRecord> TestDuplicatedKeyNameRecord = new VersionedStore<Int, TestDuplicatedKeyNameRecord>();
        public VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>> TestDuplicatedKeyNameRecordByAAndB = new VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>>();
        public VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>> TestDuplicatedKeyNameRecordByADescAndB = new VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>>(true);
        public VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>> TestDuplicatedKeyNameRecordByAAndBDesc = new VersionedStore<String, ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>>();
    }

    public partial class KrustallosDataAccess : IDataAccess
    {
        private Instance Instance;
        private KrustallosData Data;
        private Transaction Transaction;
        private ITransactionLock TransactionLock;
        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
        {
            this.Instance = Instance;
            this.Data = Data;
            this.Transaction = new Transaction(Instance, IsolationLevel);
            this.TransactionLock = TransactionLock;
        }
        public KrustallosDataAccess(Instance Instance, KrustallosData Data, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
        {
            this.Instance = Instance;
            this.Data = Data;
            this.Transaction = new Transaction(Instance, IsolationLevel);
            this.TransactionLock = TransactionLockFactory(Transaction);
        }

        public void Dispose()
        {
            if (Transaction != null)
            {
                Transaction.Revert();
                Transaction.Dispose();
                Transaction = null;
            }
            if (TransactionLock != null)
            {
                TransactionLock.ExitAll();
                TransactionLock = null;
            }
        }

        public void Complete()
        {
            if (Transaction != null)
            {
                Transaction.Commit();
                Transaction.Dispose();
                Transaction = null;
            }
            else
            {
                throw new InvalidOperationException();
            }
            if (TransactionLock != null)
            {
                TransactionLock.ExitAll();
                TransactionLock = null;
            }
            else
            {
                throw new InvalidOperationException();
            }
        }
    }

    public partial class KrustallosDataAccess
    {
        public static TestRecord Clone(TestRecord v)
        {
            return new TestRecord
            {
                SessionIndex = v.SessionIndex,
                Value = v.Value
            };
        }

        public static TestLockRecord Clone(TestLockRecord v)
        {
            return new TestLockRecord
            {
                Id = v.Id,
                Value = v.Value
            };
        }

        public static TestDuplicatedKeyNameRecord Clone(TestDuplicatedKeyNameRecord v)
        {
            return new TestDuplicatedKeyNameRecord
            {
                Id = v.Id,
                A = v.A,
                B = v.B
            };
        }
    }

    public partial class KrustallosDataAccess
    {
        public void FromTestRecordUpsertOne(TestRecord v)
        {
            Transaction.UpdateVersioned(new String[] { "TestRecord" }, this.Data.TestRecord, _d_ => _d_.AddOrSetItem(v.SessionIndex, v));
        }

        public Optional<TestRecord> FromTestRecordSelectOptionalBySessionIndex(Int SessionIndex)
        {
            var _l_ = Transaction.CheckReaderVersioned(this.Data.TestRecord, _d_ => _d_.Range(SessionIndex, SessionIndex).Select(_e_ => Clone(_e_.Value))).ToList();
            if (_l_.Count == 0) { return null; }
            if (_l_.Count > 1)
            {
                throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { SessionIndex }).Select(o => o.ToString()).ToArray()) + ")");
            }
            return _l_.Single();
        }

        public void FromTestLockRecordUpsertOne(TestLockRecord v)
        {
            Transaction.UpdateVersioned(new String[] { "TestLockRecord" }, this.Data.TestLockRecord, _d_ => _d_.AddOrSetItem(v.Id, v));
        }

        public void FromTestLockRecordDeleteOptionalById(Int Id)
        {
            Transaction.UpdateVersioned(new String[] { "TestLockRecord" }, this.Data.TestLockRecord, _d_ => _d_.RemoveIfExist(Id));
        }

        public Optional<TestLockRecord> FromTestLockRecordSelectOptionalById(Int Id)
        {
            var _l_ = Transaction.CheckReaderVersioned(this.Data.TestLockRecord, _d_ => _d_.Range(Id, Id).Select(_e_ => Clone(_e_.Value))).ToList();
            if (_l_.Count == 0) { return null; }
            if (_l_.Count > 1)
            {
                throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { Id }).Select(o => o.ToString()).ToArray()) + ")");
            }
            return _l_.Single();
        }

        public Optional<TestLockRecord> FromTestLockRecordLockOptionalById(Int Id)
        {
            if (TransactionLock != null) { TransactionLock.Enter(new Object[] { "TestLockRecord", "Id", Id }); }
            var _l_ = Transaction.CheckCurrentVersioned(this.Data.TestLockRecord, _d_ => _d_.Range(Id, Id).Select(_e_ => Clone(_e_.Value))).ToList();
            if (_l_.Count == 0) { return null; }
            if (_l_.Count > 1)
            {
                throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { Id }).Select(o => o.ToString()).ToArray()) + ")");
            }
            return _l_.Single();
        }

        public Optional<TestDuplicatedKeyNameRecord> FromTestDuplicatedKeyNameRecordSelectOptionalByAAndB(String A, Int B)
        {
            var _l_ = Transaction.CheckReaderVersioned(this.Data.TestDuplicatedKeyNameRecordByAAndB, _d_ => _d_.Range(A, A).SelectMany(_e_ => _e_.Value.Range(B, B)).Select(_e_ => Clone(_e_.Value))).ToList();
            if (_l_.Count == 0) { return null; }
            if (_l_.Count > 1)
            {
                throw new InvalidOperationException("MultipleValueFor: (" + String.Join(" ", (new Object[] { A, B }).Select(o => o.ToString()).ToArray()) + ")");
            }
            return _l_.Single();
        }

        public void FromTestDuplicatedKeyNameRecordUpsertOne(TestDuplicatedKeyNameRecord v)
        {
            var _v_ = Clone(v);
            Transaction.UpdateVersioned(new String[] { "TestDuplicatedKeyNameRecord" }, this.Data.TestDuplicatedKeyNameRecord, _d_ => _d_.AddOrSetItem(v.Id, _v_));
            Transaction.UpdateVersioned(new String[] { "TestDuplicatedKeyNameRecord", "A", "B" }, this.Data.TestDuplicatedKeyNameRecordByAAndB, _d_ => _d_.AddOrSetItem(v.A, _d_.GetOrCreate(v.A, () => new ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>()).AddOrSetItem(v.B, _v_)));
            Transaction.UpdateVersioned(new String[] { "TestDuplicatedKeyNameRecord", "A-", "B" }, this.Data.TestDuplicatedKeyNameRecordByADescAndB, _d_ => _d_.AddOrSetItem(v.A, _d_.GetOrCreate(v.A, () => new ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>()).AddOrSetItem(v.B, _v_)));
            Transaction.UpdateVersioned(new String[] { "TestDuplicatedKeyNameRecord", "A", "B-" }, this.Data.TestDuplicatedKeyNameRecordByAAndBDesc, _d_ => _d_.AddOrSetItem(v.A, _d_.GetOrCreate(v.A, () => new ImmutableSortedDictionary<Int, TestDuplicatedKeyNameRecord>(true)).AddOrSetItem(v.B, _v_)));
        }
    }

    public class KrustallosDataAccessPool
    {
        public UInt64 Hash
        {
            get
            {
                return 0xCF3EA48842165733;
            }
        }

        private static ConcurrentDictionary<String, KeyValuePair<Instance, KrustallosData>> Instances = new ConcurrentDictionary<String, KeyValuePair<Instance, KrustallosData>>();

        public IDataAccess Create(String ConnectionString)
        {
            return Create(ConnectionString, IsolationLevel.ReadCommitted, (ITransactionLock)(null));
        }
        public IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
        {
            return Create(ConnectionString, IsolationLevel.ReadCommitted, TransactionLock);
        }
        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel)
        {
            return Create(ConnectionString, IsolationLevel, (ITransactionLock)(null));
        }
        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
        {
            return Create(ConnectionString, IsolationLevel, t => TransactionLock);
        }
        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
        {
            var Pair = Instances.GetOrAdd(ConnectionString, Key => new KeyValuePair<Instance, KrustallosData>(new Instance(), new KrustallosData()));
            return new KrustallosDataAccess(Pair.Key, Pair.Value, IsolationLevel, TransactionLockFactory);
        }
    }
}
