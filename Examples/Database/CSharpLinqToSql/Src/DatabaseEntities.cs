//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

//Reference:

using System;
using System.Collections.Generic;
using System.Linq;
using Database.Linq;
using Boolean = System.Boolean;
using String = System.String;
using Int = System.Int32;
using Real = System.Double;

namespace Database.Linq
{
    /// <summary>邮件</summary>
    [System.Data.Linq.Mapping.Table(Name = "Mails")]
    public sealed class Mail : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private String _Title;
        private Int _FromId;
        private String _Time;
        private String _Content;
        private System.Data.Linq.EntityRef<UserProfile> _From = default(System.Data.Linq.EntityRef<UserProfile>);
    
        /// <summary>邮件ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", AutoSync = System.Data.Linq.Mapping.AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>标题</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Title", DbType = "NVarChar(64) NOT NULL", CanBeNull = false)]
        public String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                if (_Title != value)
                {
                    SendPropertyChanging();
                    _Title = value;
                    SendPropertyChanged("Title");
                }
            }
        }
        /// <summary>发件用户ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_FromId", DbType = "Int NOT NULL", CanBeNull = false)]
        public Int FromId
        {
            get
            {
                return _FromId;
            }
            set
            {
                if (_FromId != value)
                {
                    if (_From.HasLoadedOrAssignedValue) { throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException(); }
                    SendPropertyChanging();
                    _FromId = value;
                    SendPropertyChanged("FromId");
                }
            }
        }
        /// <summary>时间(UTC)：yyyy-MM-ddTHH:mm:ssZ形式</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Time", DbType = "NVarChar(32) NOT NULL", CanBeNull = false)]
        public String Time
        {
            get
            {
                return _Time;
            }
            set
            {
                if (_Time != value)
                {
                    SendPropertyChanging();
                    _Time = value;
                    SendPropertyChanged("Time");
                }
            }
        }
        /// <summary>内容</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Content", DbType = "NVarChar(512) NOT NULL", CanBeNull = false)]
        public String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                if (_Content != value)
                {
                    SendPropertyChanging();
                    _Content = value;
                    SendPropertyChanged("Content");
                }
            }
        }
        /// <summary>来源用户</summary>
        [System.Data.Linq.Mapping.Association(Name = "Mails_FromId_UserProfiles_Id", Storage = "_From", ThisKey = "FromId", OtherKey = "Id", IsForeignKey = true)]
        public UserProfile From
        {
            get
            {
                return _From.Entity;
            }
            set
            {
                if (_From.Entity != value)
                {
                    SendPropertyChanging();
                    _From.Entity = value;
                    SendPropertyChanged("From");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>邮件收件人</summary>
    [System.Data.Linq.Mapping.Table(Name = "MailTos")]
    public sealed class MailTo : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private Int _ToId;
        private System.Data.Linq.EntityRef<Mail> _Mail = default(System.Data.Linq.EntityRef<Mail>);
    
        /// <summary>邮件ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    if (_Mail.HasLoadedOrAssignedValue) { throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException(); }
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>收件用户ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_ToId", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int ToId
        {
            get
            {
                return _ToId;
            }
            set
            {
                if (_ToId != value)
                {
                    SendPropertyChanging();
                    _ToId = value;
                    SendPropertyChanged("ToId");
                }
            }
        }
        /// <summary>邮件</summary>
        [System.Data.Linq.Mapping.Association(Name = "MailTos_Id_Mails_Id", Storage = "_Mail", ThisKey = "Id", OtherKey = "Id", IsForeignKey = true)]
        public Mail Mail
        {
            get
            {
                return _Mail.Entity;
            }
            set
            {
                if (_Mail.Entity != value)
                {
                    SendPropertyChanging();
                    _Mail.Entity = value;
                    SendPropertyChanged("Mail");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>邮件附件</summary>
    [System.Data.Linq.Mapping.Table(Name = "MailAttachments")]
    public sealed class MailAttachment : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private String _Name;
        private System.Byte[] _Content;
        private System.Data.Linq.EntityRef<Mail> _Mail = default(System.Data.Linq.EntityRef<Mail>);
    
        /// <summary>邮件ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    if (_Mail.HasLoadedOrAssignedValue) { throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException(); }
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>名称</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Name", DbType = "NVarChar(256) NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                }
            }
        }
        /// <summary>内容</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Content", DbType = "VarBinary NOT NULL", CanBeNull = false)]
        public System.Byte[] Content
        {
            get
            {
                return _Content;
            }
            set
            {
                if (_Content != value)
                {
                    SendPropertyChanging();
                    _Content = value;
                    SendPropertyChanged("Content");
                }
            }
        }
        /// <summary>邮件</summary>
        [System.Data.Linq.Mapping.Association(Name = "MailAttachments_Id_Mails_Id", Storage = "_Mail", ThisKey = "Id", OtherKey = "Id", IsForeignKey = true)]
        public Mail Mail
        {
            get
            {
                return _Mail.Entity;
            }
            set
            {
                if (_Mail.Entity != value)
                {
                    SendPropertyChanging();
                    _Mail.Entity = value;
                    SendPropertyChanged("Mail");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>邮件所有关系</summary>
    [System.Data.Linq.Mapping.Table(Name = "MailOwners")]
    public sealed class MailOwner : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private Int _OwnerId;
        private Boolean _IsNew;
        private String _Time;
        private System.Data.Linq.EntityRef<Mail> _Mail = default(System.Data.Linq.EntityRef<Mail>);
    
        /// <summary>邮件ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    if (_Mail.HasLoadedOrAssignedValue) { throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException(); }
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>所有者用户ID</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_OwnerId", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int OwnerId
        {
            get
            {
                return _OwnerId;
            }
            set
            {
                if (_OwnerId != value)
                {
                    SendPropertyChanging();
                    _OwnerId = value;
                    SendPropertyChanged("OwnerId");
                }
            }
        }
        /// <summary>是否是新邮件</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_IsNew", DbType = "Bit NOT NULL", CanBeNull = false)]
        public Boolean IsNew
        {
            get
            {
                return _IsNew;
            }
            set
            {
                if (_IsNew != value)
                {
                    SendPropertyChanging();
                    _IsNew = value;
                    SendPropertyChanged("IsNew");
                }
            }
        }
        /// <summary>时间(UTC)：yyyy-MM-ddTHH:mm:ssZ形式</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Time", DbType = "NVarChar(32) NOT NULL", CanBeNull = false)]
        public String Time
        {
            get
            {
                return _Time;
            }
            set
            {
                if (_Time != value)
                {
                    SendPropertyChanging();
                    _Time = value;
                    SendPropertyChanged("Time");
                }
            }
        }
        /// <summary>邮件</summary>
        [System.Data.Linq.Mapping.Association(Name = "MailOwners_Id_Mails_Id", Storage = "_Mail", ThisKey = "Id", OtherKey = "Id", IsForeignKey = true)]
        public Mail Mail
        {
            get
            {
                return _Mail.Entity;
            }
            set
            {
                if (_Mail.Entity != value)
                {
                    SendPropertyChanging();
                    _Mail.Entity = value;
                    SendPropertyChanged("Mail");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>测试记录</summary>
    [System.Data.Linq.Mapping.Table(Name = "TestRecords")]
    public sealed class TestRecord : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _SessionIndex;
        private Int _Value;
    
        /// <summary>测试Session索引</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_SessionIndex", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int SessionIndex
        {
            get
            {
                return _SessionIndex;
            }
            set
            {
                if (_SessionIndex != value)
                {
                    SendPropertyChanging();
                    _SessionIndex = value;
                    SendPropertyChanged("SessionIndex");
                }
            }
        }
        /// <summary>测试数据</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Value", DbType = "Int NOT NULL", CanBeNull = false)]
        public Int Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    SendPropertyChanging();
                    _Value = value;
                    SendPropertyChanged("Value");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>测试锁记录</summary>
    [System.Data.Linq.Mapping.Table(Name = "TestLockRecords")]
    public sealed class TestLockRecord : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private Int _Value;
    
        /// <summary>1</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", DbType = "Int NOT NULL", IsPrimaryKey = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>测试数据</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Value", DbType = "Int NOT NULL", CanBeNull = false)]
        public Int Value
        {
            get
            {
                return _Value;
            }
            set
            {
                if (_Value != value)
                {
                    SendPropertyChanging();
                    _Value = value;
                    SendPropertyChanged("Value");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <summary>用户账号信息</summary>
    [System.Data.Linq.Mapping.Table(Name = "UserProfiles")]
    public sealed class UserProfile : System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        private Int _Id;
        private String _Name;
        private String _EmailAddress;
    
        /// <summary>用户号</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Id", AutoSync = System.Data.Linq.Mapping.AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true, CanBeNull = false)]
        public Int Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                }
            }
        }
        /// <summary>用户名</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_Name", DbType = "NVarChar(32) NOT NULL", CanBeNull = false)]
        public String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    SendPropertyChanging();
                    _Name = value;
                    SendPropertyChanged("Name");
                }
            }
        }
        /// <summary>邮件地址</summary>
        [System.Data.Linq.Mapping.Column(Storage = "_EmailAddress", DbType = "NVarChar(32) NULL", CanBeNull = true)]
        public String EmailAddress
        {
            get
            {
                return _EmailAddress;
            }
            set
            {
                if (_EmailAddress != value)
                {
                    SendPropertyChanging();
                    _EmailAddress = value;
                    SendPropertyChanged("EmailAddress");
                }
            }
        }
    
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    
        private static System.ComponentModel.PropertyChangingEventArgs emptyChangingEventArgs = new System.ComponentModel.PropertyChangingEventArgs(String.Empty);
        private void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }
        private void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}

namespace Database.Linq
{
    [System.Data.Linq.Mapping.Database(Name = "Database")]
    public partial class DbRoot : System.Data.Linq.DataContext, IReadonlyContext
    {
        public DbRoot(System.Data.IDbConnection connection) :
            base(connection)
        {
        }
    
        /// <summary>邮件</summary>
        public System.Data.Linq.Table<Mail> Mails { get { return this.GetTable<Mail>(); } }
        IQueryable<Mail> IReadonlyContext.Mails { get { return Mails; } }
        /// <summary>邮件收件人</summary>
        public System.Data.Linq.Table<MailTo> MailTos { get { return this.GetTable<MailTo>(); } }
        IQueryable<MailTo> IReadonlyContext.MailTos { get { return MailTos; } }
        /// <summary>邮件附件</summary>
        public System.Data.Linq.Table<MailAttachment> MailAttachments { get { return this.GetTable<MailAttachment>(); } }
        IQueryable<MailAttachment> IReadonlyContext.MailAttachments { get { return MailAttachments; } }
        /// <summary>邮件所有关系</summary>
        public System.Data.Linq.Table<MailOwner> MailOwners { get { return this.GetTable<MailOwner>(); } }
        IQueryable<MailOwner> IReadonlyContext.MailOwners { get { return MailOwners; } }
        /// <summary>测试记录</summary>
        public System.Data.Linq.Table<TestRecord> TestRecords { get { return this.GetTable<TestRecord>(); } }
        IQueryable<TestRecord> IReadonlyContext.TestRecords { get { return TestRecords; } }
        /// <summary>测试锁记录</summary>
        public System.Data.Linq.Table<TestLockRecord> TestLockRecords { get { return this.GetTable<TestLockRecord>(); } }
        IQueryable<TestLockRecord> IReadonlyContext.TestLockRecords { get { return TestLockRecords; } }
        /// <summary>用户账号信息</summary>
        public System.Data.Linq.Table<UserProfile> UserProfiles { get { return this.GetTable<UserProfile>(); } }
        IQueryable<UserProfile> IReadonlyContext.UserProfiles { get { return UserProfiles; } }
    }
    
    public partial class StaticDataContext : IReadonlyContext
    {
        public StaticDataContext(DbRoot Context)
        {
            var LoadOptions = new System.Data.Linq.DataLoadOptions();
            LoadOptions.LoadWith<Mail>(o => o.From);
            LoadOptions.LoadWith<MailTo>(o => o.Mail);
            LoadOptions.LoadWith<MailAttachment>(o => o.Mail);
            LoadOptions.LoadWith<MailOwner>(o => o.Mail);
            Context.LoadOptions = LoadOptions;
            this.Mails = Context.Mails.ToArray().AsQueryable();
            this.MailTos = Context.MailTos.ToArray().AsQueryable();
            this.MailAttachments = Context.MailAttachments.ToArray().AsQueryable();
            this.MailOwners = Context.MailOwners.ToArray().AsQueryable();
            this.TestRecords = Context.TestRecords.ToArray().AsQueryable();
            this.TestLockRecords = Context.TestLockRecords.ToArray().AsQueryable();
            this.UserProfiles = Context.UserProfiles.ToArray().AsQueryable();
        }
    
        /// <summary>邮件</summary>
        public IQueryable<Mail> Mails { get; private set; }
        /// <summary>邮件收件人</summary>
        public IQueryable<MailTo> MailTos { get; private set; }
        /// <summary>邮件附件</summary>
        public IQueryable<MailAttachment> MailAttachments { get; private set; }
        /// <summary>邮件所有关系</summary>
        public IQueryable<MailOwner> MailOwners { get; private set; }
        /// <summary>测试记录</summary>
        public IQueryable<TestRecord> TestRecords { get; private set; }
        /// <summary>测试锁记录</summary>
        public IQueryable<TestLockRecord> TestLockRecords { get; private set; }
        /// <summary>用户账号信息</summary>
        public IQueryable<UserProfile> UserProfiles { get; private set; }
    }
    
    public interface IReadonlyContext
    {
        /// <summary>邮件</summary>
        IQueryable<Mail> Mails { get; }
        /// <summary>邮件收件人</summary>
        IQueryable<MailTo> MailTos { get; }
        /// <summary>邮件附件</summary>
        IQueryable<MailAttachment> MailAttachments { get; }
        /// <summary>邮件所有关系</summary>
        IQueryable<MailOwner> MailOwners { get; }
        /// <summary>测试记录</summary>
        IQueryable<TestRecord> TestRecords { get; }
        /// <summary>测试锁记录</summary>
        IQueryable<TestLockRecord> TestLockRecords { get; }
        /// <summary>用户账号信息</summary>
        IQueryable<UserProfile> UserProfiles { get; }
    }
    
    public static class DbExtensions
    {
        public static IQueryable<Mail> WhereIdIs(this IQueryable<Mail> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<Mail> WhereIdIs(this IEnumerable<Mail> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static Mail ById(this IQueryable<Mail> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static Mail ById(this IEnumerable<Mail> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static _T ById<_T>(this IQueryable<Mail> _This, Int Id, Func<Mail, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static _T ById<_T>(this IEnumerable<Mail> _This, Int Id, Func<Mail, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static IQueryable<MailTo> WhereIdIs(this IQueryable<MailTo> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<MailTo> WhereIdIs(this IEnumerable<MailTo> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IQueryable<MailTo> WhereIdAndToIdIs(this IQueryable<MailTo> _This, Int Id, Int ToId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId);
        }
        public static IEnumerable<MailTo> WhereIdAndToIdIs(this IEnumerable<MailTo> _This, Int Id, Int ToId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId);
        }
        public static IQueryable<MailTo> WhereToIdIs(this IQueryable<MailTo> _This, Int ToId)
        {
            return _This.Where(e => e.ToId == ToId);
        }
        public static IEnumerable<MailTo> WhereToIdIs(this IEnumerable<MailTo> _This, Int ToId)
        {
            return _This.Where(e => e.ToId == ToId);
        }
        public static MailTo ByIdAndToId(this IQueryable<MailTo> _This, Int Id, Int ToId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId).Single();
        }
        public static MailTo ByIdAndToId(this IEnumerable<MailTo> _This, Int Id, Int ToId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId).Single();
        }
        public static _T ByIdAndToId<_T>(this IQueryable<MailTo> _This, Int Id, Int ToId, Func<MailTo, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId).Select(_Projector).Single();
        }
        public static _T ByIdAndToId<_T>(this IEnumerable<MailTo> _This, Int Id, Int ToId, Func<MailTo, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.ToId == ToId).Select(_Projector).Single();
        }
        public static IQueryable<MailAttachment> WhereIdIs(this IQueryable<MailAttachment> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<MailAttachment> WhereIdIs(this IEnumerable<MailAttachment> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IQueryable<MailAttachment> WhereIdAndNameIs(this IQueryable<MailAttachment> _This, Int Id, String Name)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name);
        }
        public static IEnumerable<MailAttachment> WhereIdAndNameIs(this IEnumerable<MailAttachment> _This, Int Id, String Name)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name);
        }
        public static MailAttachment ByIdAndName(this IQueryable<MailAttachment> _This, Int Id, String Name)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name).Single();
        }
        public static MailAttachment ByIdAndName(this IEnumerable<MailAttachment> _This, Int Id, String Name)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name).Single();
        }
        public static _T ByIdAndName<_T>(this IQueryable<MailAttachment> _This, Int Id, String Name, Func<MailAttachment, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name).Select(_Projector).Single();
        }
        public static _T ByIdAndName<_T>(this IEnumerable<MailAttachment> _This, Int Id, String Name, Func<MailAttachment, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.Name == Name).Select(_Projector).Single();
        }
        public static IQueryable<MailOwner> WhereIdIs(this IQueryable<MailOwner> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<MailOwner> WhereIdIs(this IEnumerable<MailOwner> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IQueryable<MailOwner> WhereIdAndOwnerIdIs(this IQueryable<MailOwner> _This, Int Id, Int OwnerId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId);
        }
        public static IEnumerable<MailOwner> WhereIdAndOwnerIdIs(this IEnumerable<MailOwner> _This, Int Id, Int OwnerId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId);
        }
        public static IQueryable<MailOwner> WhereOwnerIdIs(this IQueryable<MailOwner> _This, Int OwnerId)
        {
            return _This.Where(e => e.OwnerId == OwnerId);
        }
        public static IEnumerable<MailOwner> WhereOwnerIdIs(this IEnumerable<MailOwner> _This, Int OwnerId)
        {
            return _This.Where(e => e.OwnerId == OwnerId);
        }
        public static IQueryable<MailOwner> WhereOwnerIdAndTimeIs(this IQueryable<MailOwner> _This, Int OwnerId, String Time)
        {
            return _This.Where(e => e.OwnerId == OwnerId).Where(e => e.Time == Time);
        }
        public static IEnumerable<MailOwner> WhereOwnerIdAndTimeIs(this IEnumerable<MailOwner> _This, Int OwnerId, String Time)
        {
            return _This.Where(e => e.OwnerId == OwnerId).Where(e => e.Time == Time);
        }
        public static MailOwner ByIdAndOwnerId(this IQueryable<MailOwner> _This, Int Id, Int OwnerId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId).Single();
        }
        public static MailOwner ByIdAndOwnerId(this IEnumerable<MailOwner> _This, Int Id, Int OwnerId)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId).Single();
        }
        public static _T ByIdAndOwnerId<_T>(this IQueryable<MailOwner> _This, Int Id, Int OwnerId, Func<MailOwner, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId).Select(_Projector).Single();
        }
        public static _T ByIdAndOwnerId<_T>(this IEnumerable<MailOwner> _This, Int Id, Int OwnerId, Func<MailOwner, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Where(e => e.OwnerId == OwnerId).Select(_Projector).Single();
        }
        public static IQueryable<TestRecord> WhereSessionIndexIs(this IQueryable<TestRecord> _This, Int SessionIndex)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex);
        }
        public static IEnumerable<TestRecord> WhereSessionIndexIs(this IEnumerable<TestRecord> _This, Int SessionIndex)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex);
        }
        public static TestRecord BySessionIndex(this IQueryable<TestRecord> _This, Int SessionIndex)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex).Single();
        }
        public static TestRecord BySessionIndex(this IEnumerable<TestRecord> _This, Int SessionIndex)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex).Single();
        }
        public static _T BySessionIndex<_T>(this IQueryable<TestRecord> _This, Int SessionIndex, Func<TestRecord, _T> _Projector)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex).Select(_Projector).Single();
        }
        public static _T BySessionIndex<_T>(this IEnumerable<TestRecord> _This, Int SessionIndex, Func<TestRecord, _T> _Projector)
        {
            return _This.Where(e => e.SessionIndex == SessionIndex).Select(_Projector).Single();
        }
        public static IQueryable<TestLockRecord> WhereIdIs(this IQueryable<TestLockRecord> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<TestLockRecord> WhereIdIs(this IEnumerable<TestLockRecord> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static TestLockRecord ById(this IQueryable<TestLockRecord> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static TestLockRecord ById(this IEnumerable<TestLockRecord> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static _T ById<_T>(this IQueryable<TestLockRecord> _This, Int Id, Func<TestLockRecord, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static _T ById<_T>(this IEnumerable<TestLockRecord> _This, Int Id, Func<TestLockRecord, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static IQueryable<UserProfile> WhereIdIs(this IQueryable<UserProfile> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IEnumerable<UserProfile> WhereIdIs(this IEnumerable<UserProfile> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id);
        }
        public static IQueryable<UserProfile> WhereNameIs(this IQueryable<UserProfile> _This, String Name)
        {
            return _This.Where(e => e.Name == Name);
        }
        public static IEnumerable<UserProfile> WhereNameIs(this IEnumerable<UserProfile> _This, String Name)
        {
            return _This.Where(e => e.Name == Name);
        }
        public static UserProfile ById(this IQueryable<UserProfile> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static UserProfile ById(this IEnumerable<UserProfile> _This, Int Id)
        {
            return _This.Where(e => e.Id == Id).Single();
        }
        public static _T ById<_T>(this IQueryable<UserProfile> _This, Int Id, Func<UserProfile, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static _T ById<_T>(this IEnumerable<UserProfile> _This, Int Id, Func<UserProfile, _T> _Projector)
        {
            return _This.Where(e => e.Id == Id).Select(_Projector).Single();
        }
        public static UserProfile ByName(this IQueryable<UserProfile> _This, String Name)
        {
            return _This.Where(e => e.Name == Name).Single();
        }
        public static UserProfile ByName(this IEnumerable<UserProfile> _This, String Name)
        {
            return _This.Where(e => e.Name == Name).Single();
        }
        public static _T ByName<_T>(this IQueryable<UserProfile> _This, String Name, Func<UserProfile, _T> _Projector)
        {
            return _This.Where(e => e.Name == Name).Select(_Projector).Single();
        }
        public static _T ByName<_T>(this IEnumerable<UserProfile> _This, String Name, Func<UserProfile, _T> _Projector)
        {
            return _This.Where(e => e.Name == Name).Select(_Projector).Single();
        }
    }
}
