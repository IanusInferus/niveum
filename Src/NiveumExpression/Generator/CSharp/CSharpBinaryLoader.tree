$Comment
    ==========================================================================

      File:        CSharpBinaryLoader.tree
      Location:    Niveum.Expression <Tree>
      Description: 表达式结构C#二进制加载器模板
      Version:     2018.12.22.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ExpressionSchema.CSharpBinaryLoader

#Import
    System
    System.Collections.Generic
    System.Linq
    Firefly

#Template Assembly Schema:Schema
    $$
        var Hash = Schema.Hash().ToString("X16", System.Globalization.CultureInfo.InvariantCulture);
    public class Calculation
    {
        $$
            foreach (var m in Schema.Modules)
            {
                ##
                    public [[${m.Name}]] [[${m.Name}]] { get; private set; }
            }

        public Calculation(Assembly a)
        {
            if (a.Hash != 0x${Hash}) { throw new InvalidOperationException(); }
            var _d_ = a.Modules.ToDictionary(_m_ => _m_.Name);
            $$
                foreach (var m in Schema.Modules)
                {
                    ##
                        this.[[${m.Name}]] = new [[${m.Name}]](_d_[${GetEscapedStringLiteral(m.Name)}]);
                }
        }
    }

#Template Module m:ModuleDecl
    public class [[${m.Name}]]
    {
        $$
            foreach (var f in m.Functions)
            {
                ##
                    private class [[FuncContext_${f.Name}]]
                    {
                        $$
                            foreach (var p in f.Parameters)
                            {
                                ##
                                    public ${p.Type.ToString()} [[${p.Name}]];
                            }
                    }
                    private Func<[[FuncContext_${f.Name}]], ${f.ReturnValue.ToString()}> [[Func_${f.Name}]];
            }

        public [[${m.Name}]](ModuleDef md)
        {
            var fd = md.Functions.ToDictionary(_f_ => _f_.Name);
            $$
                foreach (var f in m.Functions)
                {
                    ##
                        {
                            var vc = new VariableContext<[[FuncContext_${f.Name}]]>();
                            $$
                                foreach (var p in f.Parameters)
                                {
                                    ##
                                        vc.Replace(${GetEscapedStringLiteral(p.Name)}, null, PrimitiveType.${p.Type.ToString()}, vvc => (Func<[[FuncContext_${f.Name}]], ${p.Type.ToString()}>)([[Context_${f.Name}]] => [[Context_${f.Name}.${p.Name}]]));
                                }
                            var p = new VariableProviderCombiner<[[FuncContext_${f.Name}]]>(vc, new ExpressionRuntimeProvider<[[FuncContext_${f.Name}]]>());
                            var d = ExpressionEvaluator<[[FuncContext_${f.Name}]]>.Compile<${f.ReturnValue.ToString()}>(p, fd[${GetEscapedStringLiteral(f.Name)}].Body);
                            [[Func_${f.Name}]] = t =>
                            {
                                return d(t);
                            };
                        }
                }
        }

        $$
            foreach (var f in m.Functions)
            {
                var ParameterList = String.Join(", ", f.Parameters.Select(p => p.Type.ToString() + " " + GetEscapedIdentifier(p.Name)));
                ##
                    public ${f.ReturnValue.ToString()} [[${f.Name}]](${ParameterList})
                    {
                        var [[Context_${f.Name}]] = new [[FuncContext_${f.Name}]]();
                        $$
                            foreach (var p in f.Parameters)
                            {
                                ##
                                    [[Context_${f.Name}]].[[${p.Name}]] = [[${p.Name}]];
                            }
                        return [[Func_${f.Name}]]([[Context_${f.Name}]]);
                    }
            }
    }

#Template Main Schema:Schema NamespaceName:String
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Niveum.ExpressionSchema;
    using Niveum.Expression;
    using Int = System.Int32;
    using Real = System.Double;
    using ${Schema.Imports};

    $$
        var ComplexTypes = GetComplexTypes(Schema);
        if (NamespaceName == "")
        {
            ##
                ${ComplexTypes}
        }
        else
        {
            ##
                namespace [[${NamespaceName}]]
                {
                    ${ComplexTypes}
                }
        }

$End
