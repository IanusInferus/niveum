$Comment
    ==========================================================================

      File:        CppBinaryLoader.tree
      Location:    Niveum.Expression <Tree>
      Description: 表达式结构C++二进制加载器模板
      Version:     2019.04.28.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ExpressionSchema.CppBinaryLoader

#Import
    System
    System.Collections.Generic
    System.Linq
    Firefly

#Template Assembly Schema:Schema
    $$
        var Hash = Schema.Hash().ToString("X16", System.Globalization.CultureInfo.InvariantCulture);
    class Calculation
    {
    public:
        $$
            foreach (var m in Schema.Modules)
            {
                ##
                    std::shared_ptr<class [[${m.Name}]]> [[${m.Name}]];
            }

        Calculation(std::shared_ptr<Niveum::ExpressionSchema::Assembly> a)
        {
            if (a->Hash != 0x${Hash}) { throw std::logic_error("InvalidOperation"); }
            std::unordered_map<std::u16string, std::shared_ptr<Niveum::ExpressionSchema::ModuleDef>> _d_;
            for (auto m : a->Modules)
            {
                _d_[m->Name] = m;
            }
            $$
                foreach (var m in Schema.Modules)
                {
                    ##
                        this->[[${m.Name}]] = std::make_shared<class [[${m.Name}]]>(_d_[${GetEscapedStringLiteral(m.Name)}]);
                }
        }
    };

#Template TypePredefinition Name:String
    class [[${Name}]];

#Template Module m:ModuleDecl
    class [[${m.Name}]]
    {
    private:
        $$
            foreach (var f in m.Functions)
            {
                ##
                    std::function<${f.ReturnValue.ToString()}(Niveum::Expression::ExpressionParameterContext &)> [[Func_${f.Name}]];
            }

    public:
        [[${m.Name}]](std::shared_ptr<Niveum::ExpressionSchema::ModuleDef> md)
        {
            std::unordered_map<std::u16string, std::shared_ptr<Niveum::ExpressionSchema::Expr>> fd;
            for (auto _f_ : md->Functions)
            {
                fd[_f_->Name] = _f_->Body;
            }
            $$
                foreach (var f in m.Functions)
                {
                    ##
                        {
                            auto Body = fd[${GetEscapedStringLiteral(f.Name)}];
                        
                            Niveum::Expression::ExpressionParameterTypeProvider eptp;
                            $$
                                foreach (var p in f.Parameters)
                                {
                                    ##
                                        eptp.Parameters[${GetEscapedStringLiteral(p.Name)}] = Niveum::ExpressionSchema::PrimitiveType::${p.Type.ToString()};
                                }
                            Niveum::Expression::ExpressionCalculator ec;
                            [[Func_${f.Name}]] = ec.BuildExpression<${f.ReturnValue.ToString()}>(eptp, Body);
                        }
                }
        }

        $$
            foreach (var f in m.Functions)
            {
                var ParameterList = String.Join(", ", f.Parameters.Select(p => p.Type.ToString() + " " + GetEscapedIdentifier(p.Name)));
                ##
                    ${f.ReturnValue.ToString()} [[${f.Name}]](${ParameterList})
                    {
                        Niveum::Expression::ExpressionParameterContext epc;
                        $$
                            foreach (var p in f.Parameters)
                            {
                                ##
                                    epc.Parameters[${GetEscapedStringLiteral(p.Name)}] = [[${p.Name}]];
                            }
                        return [[Func_${f.Name}]](epc);
                    }
            }
    };

#Template Main Schema:Schema NamespaceName:String
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    #pragma once

    #include <cstdint>
    #include <memory>
    #include <string>
    #include <functional>
    #include <stdexcept>
    #include <unordered_map>
    #include ${Schema.Imports.Where(i => IsInclude(i))}
    typedef std::int32_t Int;
    typedef double Real;

    $$
        var SimpleTypes = GetSimpleTypes(Schema);
        var ComplexTypes = GetComplexTypes(Schema);
    ${WrapNamespace(NamespaceName, SimpleTypes)}
    ${WrapNamespace(NamespaceName, ComplexTypes)}

$End
