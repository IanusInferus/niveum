$Comment
    ==========================================================================

      File:        Cpp.tree
      Location:    Niveum.Core <Tree>
      Description: 对象类型结构C++模板
      Version:     2019.08.23.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.Cpp

#Import
    System
    System.Collections.Generic
    System.Linq

#Constant Keywords:List<String>
    $List String
        __abstract
        __alignof
        __asm
        __assume
        __based
        __box
        __cdecl
        __declspec
        __delegate
        __event
        __except
        __fastcall
        __finally
        __forceinline
        __gc
        __hook
        __identifier
        __if_exists
        __if_not_exists
        __inline
        __int16
        __int32
        __int64
        __int8
        __interface
        __leave
        __m128
        __m128d
        __m128i
        __m64
        __multiple_inheritance
        __nogc
        __noop
        __pin
        __property
        __raise
        __sealed
        __single_inheritance
        __stdcall
        __super
        __thiscall
        __try
        __except
        __finally
        __try_cast
        __unaligned
        __unhook
        __uuidof
        __value
        __virtual_inheritance
        __w64
        __wchar_t
        wchar_t
        abstract
        array
        auto
        bool
        break
        case
        catch
        char
        class
        const
        const_cast
        continue
        decltype
        default
        delegate
        delete
        deprecated
        dllexport
        dllimport
        do
        double
        dynamic_cast
        else
        enum
        event
        explicit
        extern
        false
        finally
        float
        for
        each
        in
        friend
        friend_as
        gcnew
        generic
        goto
        if
        initonly
        inline
        int
        interface
        interior_ptr
        literal
        long
        mutable
        naked
        namespace
        new
        noinline
        noreturn
        nothrow
        novtable
        nullptr
        operator
        private
        property
        protected
        public
        ref
        register
        reinterpret_cast
        return
        safecast
        sealed
        selectany
        short
        signed
        sizeof
        static
        static_assert
        static_cast
        struct
        switch
        template
        this
        thread
        throw
        true
        try
        typedef
        typeid
        typename
        union
        unsigned
        using
        uuid
        value
        virtual
        void
        volatile
        while

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                Unit
        Boolean             bool
        String              std::u16string
        Int                 std::int32_t
        Real                double
        Byte                std::uint8_t
        UInt8               std::uint8_t
        UInt16              std::uint16_t
        UInt32              std::uint32_t
        UInt64              std::uint64_t
        Int8                std::int8_t
        Int16               std::int16_t
        Int32               std::int32_t
        Int64               std::int64_t
        Float32             float
        Float64             double
        Type                std::u16string
        Optional            std::optional
        List                std::vector
        Set                 std::unordered_set
        Map                 std::unordered_map

#Template SingleLineXmlComment Description:String
    /// <summary>${Description}</summary>

#Template MultiLineXmlComment Description:List<String>
    /// <summary>
    /// ${Description}
    /// </summary>

#Template Primitive Name:String PlatformName:String
    typedef ${PlatformName} [[${Name}]];

#Template Primitive_Unit
    #ifndef _UNIT_TYPE_
        typedef struct {} Unit;
    #   define _UNIT_TYPE_
    #endif

#Template TypePredefinition Name:String MetaType:String GenericParameters:List<VariableDef>
    ${GetGenericParameterLine(GenericParameters)}
    ${MetaType} [[${Name}]];

#Template Alias a:AliasDef
    $$
        var Name = GetEscapedIdentifier(a.DefinitionName()) + GetGenericParameters(a.GenericParameters);
        var Type = GetTypeString(a.Type, a.NamespaceName());
    ${GetXmlComment(a.Description)}
    /* Alias */
    ${GetGenericParameterLine(a.GenericParameters)}
    class ${Name} final
    {
    public:
        ${Type} Value;

        ${Name}()
        {
        }
        ${Name}(const ${Type} &v)
            : Value(v)
        {
        }

        operator const ${Type} &() const
        {
            return Value;
        }
    };

#Template Record r:RecordDef
    $$
        var Name = GetEscapedIdentifier(r.DefinitionName());
    ${GetXmlComment(r.Description)}
    /* Record */
    ${GetGenericParameterLine(r.GenericParameters)}
    class ${Name} final
    {
    public:
        $$
            foreach (var f in r.Fields)
            {
                ##
                    ${GetXmlComment(f.Description)}
                    ${GetTypeString(f.Type, r.NamespaceName())} [[${f.Name}]];
            }
    };

#Template TaggedUnion tu:TaggedUnionDef
    $$
        var Name = GetEscapedIdentifier(tu.DefinitionName());
        var TagName = GetEscapedIdentifier(GetSuffixedTypeName(tu.Name, tu.Version, "Tag", tu.NamespaceName()));
    enum class ${TagName}
    {
        $$
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                if (k == tu.Alternatives.Count - 1)
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        [[${a.Name}]] = ${k}
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        [[${a.Name}]] = ${k},
                }
                k += 1;
            }
    };
    ${GetXmlComment(tu.Description)}
    /* TaggedUnion */
    ${GetGenericParameterLine(tu.GenericParameters)}
    class ${Name} final
    {
    public:
        /* Tag */ ${TagName} _Tag;

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    ${GetTypeString(a.Type, tu.NamespaceName())} [[${a.Name}]];
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        static std::shared_ptr<class ${Name}> [[Create${a.Name}]]()
                        {
                            auto r = std::make_shared<${Name}>();
                            r->_Tag = ${TagName}::[[${a.Name}]];
                            r->[[${a.Name}]] = Unit();
                            return r;
                        }
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        static std::shared_ptr<class ${Name}> [[Create${a.Name}]](${GetTypeString(a.Type, tu.NamespaceName())} Value)
                        {
                            auto r = std::make_shared<${Name}>();
                            r->_Tag = ${TagName}::[[${a.Name}]];
                            r->[[${a.Name}]] = Value;
                            return r;
                        }
                }
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    Boolean [[On${a.Name}]]() const
                    {
                        return _Tag == ${TagName}::[[${a.Name}]];
                    }
            }
    };

#Template Enum e:EnumDef
    $$
        var Name = GetEscapedIdentifier(e.DefinitionName());
    ${GetXmlComment(e.Description)}
    enum class ${Name} : ${GetEnumTypeString(e.UnderlyingType, e.NamespaceName())}
    {
        $$
            var k = 0;
            foreach (var l in e.Literals)
            {
                if (k == e.Literals.Count - 1)
                {
                    ##
                        ${GetXmlComment(l.Description)}
                        [[${l.Name}]] = ${l.Value}
                }
                else
                {
                    ##
                        ${GetXmlComment(l.Description)}
                        [[${l.Name}]] = ${l.Value},
                }
                k += 1;
            }
    };

#Template EnumFunctor e:EnumDef
    $$
        var TypeString = GetTypeString(e.GetTypeSpec(), "std");
    template <>
    struct hash<${TypeString}>
    {
        size_t operator()(const ${TypeString} &x) const
        {
            return hash<${GetTypeString(e.UnderlyingType, e.NamespaceName())}>()(static_cast<${GetTypeString(e.UnderlyingType, e.NamespaceName())}>(x));
        }
    };
    template <>
    struct less<${TypeString}>
    {
        bool operator()(const ${TypeString} &x, const ${TypeString} &y) const
        {
            return less<${GetTypeString(e.UnderlyingType, "std")}>()(static_cast<${GetTypeString(e.UnderlyingType, "std")}>(x), static_cast<${GetTypeString(e.UnderlyingType, "std")}>(y));
        }
    };

#Template ClientCommand c:ClientCommandDef
    $$
        var RequestRef = GetSuffixedTypeRef(c.Name, c.Version, "Request");
        var ReplyRef = GetSuffixedTypeRef(c.Name, c.Version, "Reply");
        var Request = new RecordDef { Name = RequestRef.Name, Version = RequestRef.Version, GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
        var Reply = new TaggedUnionDef { Name = ReplyRef.Name, Version = ReplyRef.Version, GenericParameters = new List<VariableDef> { }, Alternatives = c.InParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Request)}
    ${TaggedUnion(Reply)}

#Template ServerCommand c:ServerCommandDef
    $$
        var EventRef = GetSuffixedTypeRef(c.Name, c.Version, "Event");
        var Event = new RecordDef { Name = EventRef.Name, Version = EventRef.Version, GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Event)}

#Template IApplicationServer Commands:List<TypeDef> NamespaceName:String
    class IApplicationServer
    {
    public:
        virtual ~IApplicationServer() {}

        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ClientCommand.Description;
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        ##
                            ${GetXmlComment(Description)}
                            virtual void [[${Name}]](${RequestTypeString} r, std::function<void(${ReplyTypeString})> Callback, std::function<void(const std::exception &)> OnFailure) = 0;
                    }
                    else
                    {
                        ##
                            ${GetXmlComment(Description)}
                            virtual ${ReplyTypeString} [[${Name}]](${RequestTypeString} r) = 0;
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        std::function<void(${EventTypeString})> [[${Name}]];
                }
            }
    };

#Template IApplicationClient Commands:List<TypeDef> NamespaceName:String
    class IApplicationClient
    {
    public:
        virtual ~IApplicationClient() {}

        virtual std::uint64_t Hash() = 0;
        virtual void DequeueCallback(std::u16string CommandName) = 0;
        virtual void NotifyErrorCommand(std::u16string CommandName, std::u16string Message) = 0;
        std::function<void(std::u16string CommandName, std::u16string Message)> GlobalErrorHandler;

        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ClientCommand.Description;
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        virtual void [[${Name}]](${RequestTypeString} r, std::function<void(${ReplyTypeString})> Callback, std::function<void(std::u16string)> OnError = nullptr) = 0;
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        std::function<void(${EventTypeString})> [[${Name}]];
                }
            }
    };

#Template IEventPump Commands:List<TypeDef> NamespaceName:String
    class IEventPump
    {
    public:
        virtual ~IEventPump() {}

        $$
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    if (c.ServerCommand.Version != "") { continue; }
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        std::function<void(${EventTypeString})> [[${Name}]];
                }
            }
    };

#Template WrapNamespacePart NamespacePart:String Contents:IEnumerable<String>
    namespace [[${NamespacePart}]]
    {
        ${Contents}
    }

#Template Main Schema:Schema NamespaceName:String
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    #pragma once

    #include <cstddef>
    #include <cstdint>
    #include <string>
    #include <optional>
    #include <vector>
    #include <unordered_set>
    #include <unordered_map>
    #include <tuple>
    #include <memory>
    #include <functional>
    #include <exception>
    #include <stdexcept>
    #include ${Schema.Imports.Where(i => IsInclude(i))}

    ${GetTypes(Schema, NamespaceName)}

$End
