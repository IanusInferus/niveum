$Comment
    ==========================================================================

      File:        CSharpRetry.tree
      Location:    Niveum.Core <Tree>
      Description: 对象类型结构C#重试循环模板
      Version:     2016.08.26.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.CSharpRetry

#Import
    System
    System.Collections.Generic
    System.Linq

#Template RetryWrapper Commands:List<TypeDef>
    public sealed class RetryWrapper : IApplicationServer
    {
        private IApplicationServer Inner;
        private Func<Exception, Boolean> IsRetryable;
        private int MaxRetryCount;

        public RetryWrapper(IApplicationServer Inner, Func<Exception, Boolean> IsRetryable, int MaxRetryCount)
        {
            this.Inner = Inner;
            this.IsRetryable = IsRetryable;
            this.MaxRetryCount = MaxRetryCount;
            $$
                foreach (var sc in Commands.Where(c => c.OnServerCommand))
                {
                    var Name = sc.TypeFriendlyName();
                    ##
                        Inner.[[${Name}]] += e =>
                        {
                            if ([[${Name}]] != null) { [[${Name}]](e); }
                        };
                }
        }

        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        var Name = c.ClientCommand.TypeFriendlyName();
                        ##
                            public void [[${Name}]]([[${Name}Request]] Request, Action<[[${Name}Reply]]> Callback, Action<Exception> OnFailure)
                            {
                                Action<[[${Name}Reply]]> CallbackInner = Reply =>
                                {
                                    Callback(Reply);
                                };

                                var RetryCount = 0;
                                while (RetryCount < MaxRetryCount)
                                {
                                    try
                                    {
                                        Inner.[[${Name}]](Request, CallbackInner, OnFailure);
                                        return;
                                    }
                                    catch (Exception ex)
                                    {
                                        if (IsRetryable(ex))
                                        {
                                            RetryCount += 1;
                                            continue;
                                        }
                                        else
                                        {
                                            System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();
                                            throw;
                                        }
                                    }
                                }
                            }
                    }
                    else
                    {
                        var Name = c.ClientCommand.TypeFriendlyName();
                        ##
                            public [[${Name}Reply]] [[${Name}]]([[${Name}Request]] Request)
                            {
                                var RetryCount = 0;
                                while (RetryCount < MaxRetryCount)
                                {
                                    try
                                    {
                                        var Reply = Inner.[[${Name}]](Request);
                                        return Reply;
                                    }
                                    catch (Exception ex)
                                    {
                                        if (IsRetryable(ex))
                                        {
                                            RetryCount += 1;
                                            continue;
                                        }
                                        else
                                        {
                                            System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();
                                            throw;
                                        }
                                    }
                                }
                                throw new InvalidOperationException("MaxRetryCountReached");
                            }
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    ##
                        public event Action<[[${Name}Event]]> [[${Name}]];
                }
            }
    }

#Template Main Schema:Schema NamespaceName:String
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    using System;
    using System.Collections.Generic;
    using ${Schema.Imports};
    $$
        var Primitives = GetPrimitives(Schema);
    ${Primitives}

    $$
        var ComplexTypes = GetComplexTypes(Schema);
        if (NamespaceName == "")
        {
            ##
                ${ComplexTypes}
        }
        else
        {
            ##
                namespace [[${NamespaceName}]]
                {
                    ${ComplexTypes}
                }
        }

$End
