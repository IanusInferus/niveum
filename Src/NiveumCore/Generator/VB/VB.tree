$Comment
    ==========================================================================

      File:        VB.tree
      Location:    Niveum.Core <Tree>
      Description: 对象类型结构VB.Net模板
      Version:     2017.04.23.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.VB

#Import
    System
    System.Collections.Generic
    System.Linq

#Constant Keywords:List<String>
    $List String
        AddHandler
        AddressOf
        Alias
        And
        AndAlso
        As
        Boolean
        ByRef
        Byte
        ByVal
        Call
        Case
        Catch
        CBool
        CByte
        CChar
        CDate
        CDec
        CDbl
        Char
        CInt
        Class
        CLng
        CObj
        Const
        Continue
        CSByte
        CShort
        CSng
        CStr
        CType
        CUInt
        CULng
        CUShort
        Date
        Decimal
        Declare
        Default
        Delegate
        Dim
        DirectCast
        Do
        Double
        Each
        Else
        ElseIf
        End
        EndIf
        Enum
        Erase
        Error
        Event
        Exit
        False
        Finally
        For
        Friend
        Function
        Get
        GetType
        GetXMLNamespace
        Global
        GoSub
        GoTo
        Handles
        If
        Implements
        Imports
        In
        Inherits
        Integer
        Interface
        Is
        IsNot
        Let
        Lib
        Like
        Long
        Loop
        Me
        Mod
        Module
        MustInherit
        MustOverride
        MyBase
        MyClass
        Namespace
        Narrowing
        New
        Next
        Not
        Nothing
        NotInheritable
        NotOverridable
        Object
        Of
        On
        Operator
        Option
        Optional
        Or
        OrElse
        Overloads
        Overridable
        Overrides
        ParamArray
        Partial
        Private
        Property
        Protected
        Public
        RaiseEvent
        ReadOnly
        ReDim
        REM
        RemoveHandler
        Resume
        Return
        SByte
        Select
        Set
        Shadows
        Shared
        Short
        Single
        Static
        Step
        Stop
        String
        Structure
        Sub
        SyncLock
        Then
        Throw
        To
        True
        Try
        TryCast
        TypeOf
        Variant
        Wend
        UInteger
        ULong
        UShort
        Using
        When
        While
        Widening
        With
        WithEvents
        WriteOnly
        Xor

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                Unit
        Boolean             System.Boolean
        String              System.String
        Int                 System.Int32
        Real                System.Double
        Byte                System.Byte
        UInt8               System.Byte
        UInt16              System.UInt16
        UInt32              System.UInt32
        UInt64              System.UInt64
        Int8                System.SByte
        Int16               System.Int16
        Int32               System.Int32
        Int64               System.Int64
        Float32             System.Single
        Float64             System.Double
        Type                System.Type
        Optional            Optional
        List                System.Collections.Generic.List
        Set                 System.Collections.Generic.HashSet
        Map                 System.Collections.Generic.Dictionary

#Template SingleLineXmlComment Description:String
    ''' <summary>${Description}</summary>

#Template MultiLineXmlComment Description:List<String>
    ''' <summary>
    ''' ${Description}
    ''' </summary>

#Template Primitive Name:String PlatformName:String
    Imports [[${Name}]] = ${PlatformName}

#Template Primitive_Unit
    Public Class AliasAttribute
        Inherits Attribute
    End Class
    Public Class RecordAttribute
        Inherits Attribute
    End Class
    Public Class TaggedUnionAttribute
        Inherits Attribute
    End Class
    Public Class TagAttribute
        Inherits Attribute
    End Class
    Public Class TupleAttribute
        Inherits Attribute
    End Class

    <Record()>
    Public Structure Unit
    End Structure

#Template Primitive_Optional
    Public Enum OptionalTag
        NotHasValue = 0
        HasValue = 1
    End Enum
    <TaggedUnion>
    Public Structure [Optional](Of T)
        <Tag> Public _Tag As OptionalTag

        Public NotHasValue As Unit
        Public HasValue As T

        Public Shared Function CreateNotHasValue() As [Optional](Of T)
            Return New [Optional](Of T) With {._Tag = OptionalTag.NotHasValue, .NotHasValue = Nothing}
        End Function
        Public Shared Function CreateHasValue(ByVal Value As T) As [Optional](Of T)
            Return New [Optional](Of T) With {._Tag = OptionalTag.HasValue, .HasValue = Value}
        End Function

        Public ReadOnly Property OnNotHasValue As Boolean
            Get
                Return _Tag = OptionalTag.NotHasValue
            End Get
        End Property
        Public ReadOnly Property OnHasValue As Boolean
            Get
                Return _Tag = OptionalTag.HasValue
            End Get
        End Property

        Public Shared ReadOnly Property Empty As [Optional](Of T)
            Get
                Return CreateNotHasValue()
            End Get
        End Property
        Public Shared Widening Operator CType(ByVal v As T) As [Optional](Of T)
            If v Is Nothing Then Return CreateNotHasValue()
            Return CreateHasValue(v)
        End Operator
        Public Shared Narrowing Operator CType(ByVal v As [Optional](Of T)) As T
            If v.OnNotHasValue Then Throw New InvalidOperationException()
            Return v.HasValue
        End Operator
        Public Shared Operator =(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
            Return Equals(Left, Right)
        End Operator
        Public Shared Operator <>(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
            Return Not Equals(Left, Right)
        End Operator
        Public Shared Operator =(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
            Return Equals(Left, Right)
        End Operator
        Public Shared Operator <>(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
            Return Not Equals(Left, Right)
        End Operator
        Public Overrides Function Equals(ByVal obj As Object) As Boolean
            If obj Is Nothing Then Return Equals(Me, Nothing)
            If obj.GetType() <> GetType([Optional](Of T)) Then Return False
            Dim o = CType(obj, [Optional](Of T))
            Return Equals(Me, o)
        End Function
        Public Overrides Function GetHashCode() As Int32
            If OnNotHasValue Then Return 0
            Return HasValue.GetHashCode()
        End Function

        Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean
            If Left.OnNotHasValue AndAlso Right.OnNotHasValue Then Return True
            If Left.OnNotHasValue OrElse Right.OnNotHasValue Then Return False
            Return Left.HasValue.Equals(Right.HasValue)
        End Function
        Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean
            If (Not Left.HasValue OrElse Left.Value.OnNotHasValue) AndAlso (Not Right.HasValue OrElse Right.Value.OnNotHasValue) Then Return True
            If Not Left.HasValue OrElse Left.Value.OnNotHasValue OrElse Not Right.HasValue OrElse Right.Value.OnNotHasValue Then Return False
            Return Equals(Left.Value, Right.Value)
        End Function

        Public ReadOnly Property Value() As T
            Get
                If OnHasValue Then
                    Return HasValue
                Else
                    Throw New InvalidOperationException()
                End If
            End Get
        End Property
        Public Function ValueOrDefault(ByVal [Default] As T) As T
            If OnHasValue Then
                Return HasValue
            Else
                Return [Default]
            End If
        End Function

        Public Overrides Function ToString() As String
            If OnHasValue Then
                Return HasValue.ToString()
            Else
                Return "-"
            End If
        End Function
    End Structure

#Template Alias a:AliasDef
    $$
        var Name = GetEscapedIdentifier(a.TypeFriendlyName()) + GetGenericParameters(a.GenericParameters);
        var Type = GetTypeString(a.Type);
    ${GetXmlComment(a.Description)}
    <[Alias]()>
    Public NotInheritable Class ${Name}
        Public Value As ${Type}

        Public Shared Widening Operator CType(ByVal o As ${Type}) As ${Name}
            Return New [[${Name}]] With {.Value = o}
        End Operator
        Public Shared Widening Operator CType(ByVal c As ${Name}) As ${Type}
            Return c.Value
        End Operator
    End Class

#Template Record r:RecordDef
    $$
        var Name = GetEscapedIdentifier(r.TypeFriendlyName()) + GetGenericParameters(r.GenericParameters);
    ${GetXmlComment(r.Description)}
    <Record()>
    Public NotInheritable Class ${Name}
        $$
            foreach (var f in r.Fields)
            {
                ##
                    ${GetXmlComment(f.Description)}
                    Public [[${f.Name}]] As ${GetTypeString(f.Type)}
            }
    End Class

#Template TaggedUnion tu:TaggedUnionDef
    $$
        var Name = GetEscapedIdentifier(tu.TypeFriendlyName()) + GetGenericParameters(tu.GenericParameters);
        var TagName = GetEscapedIdentifier(tu.TypeFriendlyName() + "Tag");
    Public Enum ${TagName}
        $$
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    [[${a.Name}]] = ${k}
                k += 1;
            }
    End Enum
    ${GetXmlComment(tu.Description)}
    <TaggedUnion()>
    Public NotInheritable Class ${Name}
        <Tag()> Public _Tag As ${TagName}

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    Public [[${a.Name}]] As ${GetTypeString(a.Type)}
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                if ((a.Type.OnTypeRef) && (a.Type.TypeRef.Name == "Unit") && (a.Type.TypeRef.Version == ""))
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        Public Shared Function [[Create${a.Name}]]() As ${Name}
                            Return New ${Name} With {._Tag = ${TagName}.[[${a.Name}]], .[[${a.Name}]] = Nothing}
                        End Function
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        Public Shared Function [[Create${a.Name}]](Value As ${GetTypeString(a.Type)}) As ${Name}
                            Return New ${Name} With {._Tag = ${TagName}.[[${a.Name}]], .[[${a.Name}]] = Value}
                        End Function
                }
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    Public Readonly Property [[On${a.Name}]] As Boolean
                        Get
                            Return _Tag = ${TagName}.[[${a.Name}]]
                        End Get
                    End Property
            }
    End Class

#Template Enum e:EnumDef
    $$
        var Name = GetEscapedIdentifier(e.TypeFriendlyName());
        var ParserName = GetEscapedIdentifier(e.TypeFriendlyName() + "Parser");
        var WriterName = GetEscapedIdentifier(e.TypeFriendlyName() + "Writer");
    ${GetXmlComment(e.Description)}
    Public Enum ${Name} As ${GetEnumTypeString(e.UnderlyingType)}
        $$
            var k = 0;
            foreach (var l in e.Literals)
            {
                ##
                    ${GetXmlComment(l.Description)}
                    [[${l.Name}]] = ${l.Value}
                k += 1;
            }
    End Enum
    ${GetXmlComment(e.Description)}
    Public NotInheritable Class ${ParserName}
        Private Shared d As New Dictionary(Of String, ${Name})
        Shared Sub ${ParserName}()
            $$
                var LiteralDict = e.Literals.ToDictionary(l => l.Name);
                var LiteralNameAdds = e.Literals.Select(l => new { Name = l.Name, NameOrDescription = l.Name });
                var LiteralDescriptionAdds = e.Literals.GroupBy(l => l.Description).Where(l => l.Count() == 1).Select(l => l.Single()).Where(l => !LiteralDict.ContainsKey(l.Description)).Select(l => new { Name = l.Name, NameOrDescription = l.Description });
                foreach (var l in LiteralNameAdds.Concat(LiteralDescriptionAdds))
                {
                    ##
                        d.Add(${GetEscapedStringLiteral(l.NameOrDescription)}, ${Name}.[[${l.Name}]])
                }
        End Sub
        Public Shared Function TryParse(ByVal Value As String) As ${Name}?
            If d.ContainsKey(Value) Then Return d(Value)
            Return Nothing
        End Function
    End Class
    ${GetXmlComment(e.Description)}
    Public NotInheritable Class ${WriterName}
        Private Shared d As New Dictionary(Of [[${Name}]], String)
        Shared Sub ${WriterName}()
            $$
                foreach (var l in e.Literals)
                {
                    ##
                        If Not d.ContainsKey(${Name}.[[${l.Name}]])) Then d.Add(${Name}.[[${l.Name}]], ${GetEscapedStringLiteral(l.Description)})
                }
        End Sub
        Public Shared Function GetDescription(ByVal Value As [[${Name}]]) As String
            Return d(Value)
        End Function
    End Class

#Template ClientCommand c:ClientCommandDef
    $$
        var Request = new RecordDef { Name = c.TypeFriendlyName() + "Request", Version = "", GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
        var Reply = new TaggedUnionDef { Name = c.TypeFriendlyName() + "Reply", Version = "", GenericParameters = new List<VariableDef> { }, Alternatives = c.InParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Request)}
    ${TaggedUnion(Reply)}

#Template ServerCommand c:ServerCommandDef
    $$
        var Event = new RecordDef { Name = c.TypeFriendlyName() + "Event", Version = "", GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Event)}

#Template IApplicationServer Commands:List<TypeDef>
    Public Interface IApplicationServer
        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.TypeFriendlyName();
                    var Description = c.ClientCommand.Description;
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        ##
                            ${GetXmlComment(Description)}
                            Sub [[${Name}]](ByVal r As [[${Name}Request]], ByVal Callback As Action(Of [[${Name}Reply]]), ByVal OnFailure As Action(Of Exception))
                    }
                    else
                    {
                        ##
                            ${GetXmlComment(Description)}
                            Function [[${Name}]](ByVal r As [[${Name}Request]]) As [[${Name}Reply]]
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    ##
                        ${GetXmlComment(Description)}
                        Event [[${Name}]] As Action(Of [[${Name}Event]])
                }
            }
    End Interface

#Template IApplicationClient Commands:List<TypeDef>
    Public Interface IApplicationClient
        ReadOnly Property Hash As UInt64
        Sub DequeueCallback(ByVal CommandName As String)

        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.TypeFriendlyName();
                    var Description = c.ClientCommand.Description;
                    ##
                        ${GetXmlComment(Description)}
                        Sub [[${Name}]](ByVal r As [[${Name}Request]], ByVal Callback As Action(Of [[${Name}Reply]]))
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    ##
                        ${GetXmlComment(Description)}
                        Event [[${Name}]] As Action(Of [[${Name}Event]])
                }
            }
    End Interface

#Template IEventPump Commands:List<TypeDef>
    Public Interface IEventPump
        $$
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    if (c.ServerCommand.Version != "") { continue; }
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    ##
                        ${GetXmlComment(Description)}
                        ReadOnly Property [[${Name}]] As Action(Of [[${Name}Event]])
                }
            }
    End Interface

#Template Main Schema:Schema NamespaceName:String
    '==========================================================================
    '
    '  Notice:      This file is automatically generated.
    '               Please don't modify this file.
    '
    '==========================================================================

    Imports System
    Imports System.Collections.Generic
    Imports ${Schema.Imports}
    $$
        var Primitives = GetPrimitives(Schema);
    ${Primitives}

    $$
        var ComplexTypes = GetComplexTypes(Schema);
        if (NamespaceName == "")
        {
            ##
                ${ComplexTypes}
        }
        else
        {
            ##
                Namespace [[${NamespaceName}]]
                    ${ComplexTypes}
                End Namespace
        }

$End
