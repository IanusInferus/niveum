$Comment
    ==========================================================================

      File:        Java.tree
      Location:    Niveum.Core <Tree>
      Description: 对象类型结构Java模板
      Version:     2018.12.20.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.Java

#Import
    System
    System.Collections.Generic
    System.Linq

#Constant Keywords:List<String>
    $List String
        abstract
        boolean
        break
        byte
        case
        catch
        char
        class
        const
        continue
        default
        do
        double
        else
        extends
        final
        finally
        float
        for
        goto
        if
        implements
        import
        instanceof
        int
        interface
        long
        native
        new
        package
        private
        protected
        public
        return
        short
        static
        strictfp
        super
        switch
        synchronized
        this
        throw
        throws
        transient
        try
        void
        volatile
        while
        true
        false
        null

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                Unit
        Boolean             boolean
        String              java.lang.String
        Int                 int
        Real                double
        Byte                byte                // signed
        UInt8               byte                // signed
        UInt16              short
        UInt32              int
        UInt64              long
        Int8                byte                // signed
        Int16               short
        Int32               int
        Int64               long
        Float32             float
        Float64             double
        Type                java.lang.reflect.Type
        Optional            Optional
        List                java.util.ArrayList
        Set                 java.util.LinkedHashSet
        Map                 java.util.LinkedHashMap

#Constant ReferenceTypeMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        boolean             java.lang.Boolean
        byte                java.lang.Byte
        short               java.lang.Short
        int                 java.lang.Integer
        long                java.lang.Long
        float               java.lang.Float
        double              java.lang.Double

#Template SingleLineXmlComment Description:String
    /** ${Description} */

#Template MultiLineXmlComment Description:List<String>
    /**
      * ${Description}
      * */

#Template Attribute_Record
    public @interface Record
    {
    }

#Template Attribute_Alias
    public @interface Alias
    {
    }

#Template Attribute_TaggedUnion
    public @interface TaggedUnion
    {
    }

#Template Attribute_Tag
    public @interface Tag
    {
    }
#Template Attribute_Tuple
    public @interface Tuple
    {
    }

#Template Primitive_Unit
    @Record
    public final class Unit
    {
        public static final Unit Value = new Unit();
        private Unit()
        {
        }
    }

#Template Alias a:AliasDef
    $$
        var Name = GetEscapedIdentifier(a.DefinitionName()) + GetGenericParameters(a.GenericParameters);
        var Type = GetTypeString(a.Type, a.NamespaceName());
    ${GetXmlComment(a.Description)}
    @Alias
    public final class ${Name}
    {
        public ${Type} Value;

        public static ${Name} Create(${Type} o)
        {
            ${Name} r = new ${Name}();
            r.Value = o;
            return r;
        }
    }

#Template Record r:RecordDef
    $$
        var Name = GetEscapedIdentifier(r.DefinitionName()) + GetGenericParameters(r.GenericParameters);
    ${GetXmlComment(r.Description)}
    @Record
    public final class ${Name}
    {
        $$
            foreach (var f in r.Fields)
            {
                ##
                    ${GetXmlComment(f.Description, f.Type)}
                    public ${GetTypeString(f.Type, r.NamespaceName())} [[${f.Name}]];
            }
    }

#Template TaggedUnionTag tu:TaggedUnionDef
    $$
        var TagName = GetEscapedIdentifier(GetSuffixedTypeName(tu.Name, tu.Version, "Tag", tu.NamespaceName()));
    public final class ${TagName}
    {
        $$
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    public static final int [[${a.Name}]] = ${k};
                k += 1;
            }
    }

#Template TaggedUnion tu:TaggedUnionDef
    $$
        var TagTypeString = GetSuffixedTypeString(tu.Name, tu.Version, "Tag", tu.NamespaceName());
    ${TaggedUnion(tu, TagTypeString)}

#Template TaggedUnion tu:TaggedUnionDef TagTypeString:String
    $$
        var Name = GetEscapedIdentifier(tu.DefinitionName()) + GetGenericParameters(tu.GenericParameters);
    ${GetXmlComment(tu.Description)}
    @TaggedUnion
    public final class ${Name}
    {
        @Tag public int _Tag;

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description, a.Type)}
                    public ${GetTypeString(a.Type, tu.NamespaceName())} [[${a.Name}]];
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        public static ${Name} [[Create${a.Name}]]()
                        {
                            ${Name} r = new ${Name}();
                            r._Tag = ${TagTypeString}.[[${a.Name}]];
                            r.[[${a.Name}]] = Unit.Value;
                            return r;
                        }
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        public static ${Name} [[Create${a.Name}]](${GetTypeString(a.Type, tu.NamespaceName())} Value)
                        {
                            ${Name} r = new ${Name}();
                            r._Tag = ${TagTypeString}.[[${a.Name}]];
                            r.[[${a.Name}]] = Value;
                            return r;
                        }
                }
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    public boolean [[On${a.Name}]]() { return _Tag == ${TagTypeString}.[[${a.Name}]]; }
            }
    }

#Template Enum e:EnumDef
    $$
        var Name = GetEscapedIdentifier(e.DefinitionName());
    ${GetXmlComment(e.Description)}
    public final class ${Name}
    {
        $$
            var k = 0;
            foreach (var l in e.Literals)
            {
                ##
                    ${GetXmlComment(l.Description)}
                    public static final ${GetTypeString(e.UnderlyingType, e.NamespaceName())} [[${l.Name}]] = ${l.Value};
                k += 1;
            }
    }

#Template Tuple tp:TypeSpec NamespaceName:String
    $$
        var Name = GetEscapedIdentifier(tp.SimpleName(NamespaceName));
        var Types = tp.Tuple;
    @Tuple
    public final class ${Name}
    {
        $$
            var k = 0;
            foreach (var e in Types)
            {
                ##
                    public ${GetTypeString(e, NamespaceName)} [[Item${k}]];
                k += 1;
            }
    }

#Template WrapModule NamespaceName:String Imports:List<String> Contents:IEnumerable<String>
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    $$
        if (NamespaceName != "")
        {
            var n = String.Join(".", NamespaceName.Split('.').Select(NamespacePart => LowercaseCamelize(NamespacePart)));
            ##
                package ${n};

            $End
        }
    import niveum.lang.*;
    import ${Imports};

    ${Contents}

$End
