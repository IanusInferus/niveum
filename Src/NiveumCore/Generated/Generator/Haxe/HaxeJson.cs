//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.HaxeJson
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> IJsonSender()
        {
            yield return "interface IJsonSender";
            yield return "{";
            yield return "    function send(commandName : String, commandHash : String, parameters : String) : Void;";
            yield return "}";
        }
        public IEnumerable<String> JsonSerializationClient(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator)
        {
            yield return "private class ApplicationClient implements IApplicationClient";
            yield return "{";
            yield return "    public var s : IJsonSender;";
            yield return "    public var clientCommandCallbacks : Map<String, Array<{commandHash : String, _callback : String -> Void}>>;";
            yield return "";
            yield return "    public function new()";
            yield return "    {";
            yield return "    }";
            yield return "";
            yield return "    public var hash(get, null) : String;";
            yield return "    public function get_hash() : String";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return \""), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), "\";"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "";
            yield return "    public function dequeueCallback(commandName : String) : Void";
            yield return "    {";
            yield return "        clientCommandCallbacks.get(commandName).shift();";
            yield return "    }";
            yield return "";
            yield return "    private function addCallback(commandName : String, commandHash : String, _callback : String -> Void) : Void";
            yield return "    {";
            yield return "        if (clientCommandCallbacks.exists(commandName))";
            yield return "        {";
            yield return "            clientCommandCallbacks.get(commandName).push({commandHash : commandHash, _callback : _callback});";
            yield return "        }";
            yield return "        else";
            yield return "        {";
            yield return "            var q = new Array<{commandHash : String, _callback : String -> Void}>();";
            yield return "            q.push({commandHash : commandHash, _callback : _callback});";
            yield return "            clientCommandCallbacks.set(commandName, q);";
            yield return "        }";
            yield return "    }";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandName = c.ClientCommand.Name;
                    var Name = c.ClientCommand.TypeFriendlyName();
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public function "), GetEscapedIdentifier(LowercaseCamelize(Name))), "(r : "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), ", _callback : "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), " -> Void) : Void"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    var request = Json.stringify(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "RequestToJson"))), "(r));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    addCallback("), GetEscapedStringLiteral(CommandName)), ", \""), CommandHash), "\", function(parameters) { return _callback(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ReplyFromJson"))), "(Json.parse(parameters))); });"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s.send("), GetEscapedStringLiteral(CommandName)), ", \""), CommandHash), "\", request);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "}";
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public var "), GetEscapedIdentifier(LowercaseCamelize(Name))), " : "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), " -> Void;"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public function "), GetEscapedIdentifier(Combine(Combine(Begin(), "raise"), Name))), "(e : "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), ") : Void { if ("), GetEscapedIdentifier(LowercaseCamelize(Name))), " != null) { "), GetEscapedIdentifier(LowercaseCamelize(Name))), "(e); } }"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "}";
            yield return "";
            yield return "@:final";
            yield return "class JsonSerializationClient";
            yield return "{";
            yield return "    public function getApplicationClient() : IApplicationClient";
            yield return "    {";
            yield return "        return c;";
            yield return "    }";
            yield return "";
            yield return "    private var c : ApplicationClient;";
            yield return "    private var serverCommands : Map<String, {commandHash : String, _callback : String -> Void}>;";
            yield return "";
            yield return "    public function new(s : IJsonSender)";
            yield return "    {";
            yield return "        c = new ApplicationClient();";
            yield return "        c.s = s;";
            yield return "        c.clientCommandCallbacks = new Map<String, Array<{commandHash : String, _callback : String -> Void}>>();";
            yield return "        serverCommands = new Map<String, {commandHash : String, _callback : String -> Void}>();";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandName = c.ServerCommand.Name;
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "serverCommands.set("), GetEscapedStringLiteral(CommandName)), ", {commandHash : \""), CommandHash), "\", _callback : function(parameters) { c."), GetEscapedIdentifier(Combine(Combine(Begin(), "raise"), Name))), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "EventFromJson"))), "(Json.parse(parameters))); }});"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public function handleResult(commandName : String, commandHash : String, parameters : String) : Void";
            yield return "    {";
            yield return "        if (c.clientCommandCallbacks.exists(commandName))";
            yield return "        {";
            yield return "            var q = c.clientCommandCallbacks.get(commandName);";
            yield return "            if (q.length == 0)";
            yield return "            {";
            yield return "                throw \"InvalidOperationException: \" + commandName + \"@\" + commandHash;";
            yield return "            }";
            yield return "            var callbackPair = q[0];";
            yield return "            if (callbackPair.commandHash != commandHash)";
            yield return "            {";
            yield return "                throw \"InvalidOperationException: \" + commandName + \"@\" + commandHash;";
            yield return "            }";
            yield return "            q.shift();";
            yield return "            var _callback = callbackPair._callback;";
            yield return "            _callback(parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        if (serverCommands.exists(commandName))";
            yield return "        {";
            yield return "            var callbackPair = serverCommands.get(commandName);";
            yield return "            if (callbackPair.commandHash != commandHash)";
            yield return "            {";
            yield return "                throw \"InvalidOperationException: \" + commandName + \"@\" + commandHash;";
            yield return "            }";
            yield return "            var _callback = callbackPair._callback;";
            yield return "            _callback(parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        throw \"InvalidOperationException: \" + commandName + \"@\" + commandHash;";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator(Schema Schema)
        {
            yield return "@:final";
            yield return "class JsonTranslator /* static */";
            yield return "{";
            yield return "    private static function hasField(o : Dynamic, field : String) : Boolean";
            yield return "    {";
            yield return "        return Reflect.hasField(o, field);";
            yield return "    }";
            yield return "    private static function getField(o : Dynamic, field : String) : Dynamic";
            yield return "    {";
            yield return "        if (!Reflect.hasField(o, field)) { throw \"InvalidOperation\"; }";
            yield return "        return Reflect.field(o, field);";
            yield return "    }";
            yield return "    private static function setField(o : Dynamic, field : String, value : Dynamic) : Void";
            yield return "    {";
            yield return "        Reflect.setField(o, field, value);";
            yield return "    }";
            yield return "";
            foreach (var _Line in Combine(Combine(Begin(), "    "), GetJsonTranslatorSerializers(Schema)))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Unit()
        {
            yield return "public static function unitFromJson(j : Dynamic) : Unit";
            yield return "{";
            yield return "    return {};";
            yield return "}";
            yield return "public static function unitToJson(v : Unit) : Dynamic";
            yield return "{";
            yield return "    return {};";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Boolean()
        {
            yield return "public static function booleanFromJson(j : Dynamic) : Boolean";
            yield return "{";
            yield return "    return cast(j, Boolean);";
            yield return "}";
            yield return "public static function booleanToJson(v : Boolean) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_String()
        {
            yield return "public static function stringFromJson(j : Dynamic) : String";
            yield return "{";
            yield return "    return cast(j, String);";
            yield return "}";
            yield return "public static function stringToJson(v : String) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int()
        {
            yield return "public static function intFromJson(j : Dynamic) : Int";
            yield return "{";
            yield return "    return cast(j, Int);";
            yield return "}";
            yield return "public static function intToJson(v : Int)";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Real()
        {
            yield return "public static function realFromJson(j : Dynamic) : Real";
            yield return "{";
            yield return "    return cast(j, Real);";
            yield return "}";
            yield return "public static function realToJson(v : Real) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Byte()
        {
            yield return "public static function byteFromJson(j : Dynamic) : Byte";
            yield return "{";
            yield return "    return cast(j, Byte);";
            yield return "}";
            yield return "public static function byteToJson(v : Byte) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt8()
        {
            yield return "public static function uint8FromJson(j : Dynamic) : UInt8";
            yield return "{";
            yield return "    return cast(j, UInt8);";
            yield return "}";
            yield return "public static function uint8ToJson(v : UInt8) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt16()
        {
            yield return "public static function uint16FromJson(j : Dynamic) : UInt16";
            yield return "{";
            yield return "    return cast(j, UInt16);";
            yield return "}";
            yield return "public static function uint16ToJson(v : UInt16) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt32()
        {
            yield return "public static function uint32FromJson(j : Dynamic) : UInt32";
            yield return "{";
            yield return "    return cast(j, UInt32);";
            yield return "}";
            yield return "public static function uint32ToJson(v : UInt32) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt64()
        {
            yield return "public static function uint64FromJson(j : Dynamic) : UInt64";
            yield return "{";
            yield return "    return cast(int64FromJson(j), UInt64);";
            yield return "}";
            yield return "public static function uint64ToJson(v : UInt64) : Dynamic";
            yield return "{";
            yield return "    return int64ToJson(cast(v, Int64));";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int8()
        {
            yield return "public static function int8FromJson(j : Dynamic) : Int8";
            yield return "{";
            yield return "    return cast(j, Int8);";
            yield return "}";
            yield return "public static function int8ToJson(v : Int8) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int16()
        {
            yield return "public static function int16FromJson(j : Dynamic) : Int16";
            yield return "{";
            yield return "    return cast(j, Int16);";
            yield return "}";
            yield return "public static function int16ToJson(v : Int16) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int32()
        {
            yield return "public static function int32FromJson(j : Dynamic) : Int32";
            yield return "{";
            yield return "    return cast(j, Int32);";
            yield return "}";
            yield return "public static function int32ToJson(v : Int32) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int64()
        {
            yield return "public static function int64FromJson(j : Dynamic) : Int64";
            yield return "{";
            yield return "    return Int64.fromFloat(cast(j, Float));";
            yield return "}";
            yield return "public static function int64ToJson(v : Int64) : Dynamic";
            yield return "{";
            yield return "    return v.high * 4294967296.0 + v.low;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Float32()
        {
            yield return "public static function float32FromJson(j : Dynamic) : Float32";
            yield return "{";
            yield return "    return cast(j, Float32);";
            yield return "}";
            yield return "public static function float32ToJson(v : Float32) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Float64()
        {
            yield return "public static function float64FromJson(j : Dynamic) : Float64";
            yield return "{";
            yield return "    return cast(j, Float64);";
            yield return "}";
            yield return "public static function float64ToJson(v : Float64) : Dynamic";
            yield return "{";
            yield return "    return v;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Type()
        {
            yield return "public static function typeFromJson(j : Dynamic) : Void";
            yield return "{";
            yield return "    throw \"NotSupportedException\";";
            yield return "}";
            yield return "public static function typeToJson(v : Dynamic) : Void";
            yield return "{";
            yield return "    throw \"NotSupportedException\";";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Alias(AliasDef a)
        {
            var Name = a.TypeFriendlyName();
            var ValueTypeFriendlyName = a.Type.TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "FromJson"))), "(j : Dynamic) : "), GetEscapedIdentifier(Name)))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ValueTypeFriendlyName)), "FromJson"))), "(j);"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ToJson"))), "(o : "), GetEscapedIdentifier(Name)), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ValueTypeFriendlyName)), "ToJson"))), "(o);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Record(RecordDef r)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(r.TypeFriendlyName(), r.Fields)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_Record(String Name, List<VariableDef> Fields)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "FromJson"))), "(j : Dynamic) : "), GetEscapedIdentifier(Name)))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    return";
            yield return "    {";
            foreach (var a in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(LowercaseCamelize(a.Name))), " : "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(a.Type.TypeFriendlyName())), "FromJson"))), "(getField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ")),"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "    };";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ToJson"))), "(o : "), GetEscapedIdentifier(Name)), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var j : Dynamic = {};";
            foreach (var a in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "setField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(a.Type.TypeFriendlyName())), "ToJson"))), "(o."), GetEscapedIdentifier(LowercaseCamelize(a.Name))), "));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return j;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_TaggedUnion(TaggedUnionDef tu)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_TaggedUnion(tu.TypeFriendlyName(), tu.Alternatives)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_TaggedUnion(String Name, List<VariableDef> Alternatives)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "FromJson"))), "(j : Dynamic) : "), GetEscapedIdentifier(Name)))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var a in Alternatives)
            {
                if ((a.Type.OnTypeRef) && (a.Type.TypeRef.Name == "Unit") && (a.Type.TypeRef.Version == ""))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "if (hasField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "))"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), Name), "."), LowercaseCamelize(a.Name)))), ";"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "}";
                }
                else
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "if (hasField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "))"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    var v = "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(a.Type.TypeFriendlyName())), "FromJson"))), "(getField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), Name), "."), LowercaseCamelize(a.Name)))), "(v);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "}";
                }
            }
            yield return "    throw \"InvalidOperation\";";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ToJson"))), "(o : "), GetEscapedIdentifier(Name)), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var j : Dynamic = {};";
            yield return "    switch (o)";
            yield return "    {";
            foreach (var a in Alternatives)
            {
                if ((a.Type.OnTypeRef) && (a.Type.TypeRef.Name == "Unit") && (a.Type.TypeRef.Version == ""))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "case "), GetEscapedIdentifier(LowercaseCamelize(a.Name))), ":"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    setField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", unitToJson({}));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
                else
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "case "), GetEscapedIdentifier(LowercaseCamelize(a.Name))), "(v):"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    setField(j, "), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(a.Type.TypeFriendlyName())), "ToJson"))), "(v));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "    return j;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Enum(EnumDef e)
        {
            var Name = e.TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "FromJson"))), "(j : Dynamic) : "), GetTypeString(e.UnderlyingType)))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return cast(j, "), GetTypeString(e.UnderlyingType)), ");"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ToJson"))), "(o : "), GetTypeString(e.UnderlyingType)), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    return o;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_ClientCommand(ClientCommandDef c)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(c.TypeFriendlyName() + "Request", c.OutParameters)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), JsonTranslator_TaggedUnion(c.TypeFriendlyName() + "Reply", c.InParameters)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_ServerCommand(ServerCommandDef c)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(c.TypeFriendlyName() + "Event", c.OutParameters)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_Tuple(TypeSpec tp)
        {
            var Name = tp.TypeFriendlyName();
            var TypeString = GetTypeString(tp);
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "FromJson"))), "(j : Dynamic) : "), GetEscapedIdentifier(Name)))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = cast(j, Array<Dynamic>);";
            yield return "    return";
            yield return "    {";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), "item"), k))), " : "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(t.TypeFriendlyName())), "FromJson"))), "(ja["), k), "]),"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "    };";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(Name)), "ToJson"))), "(t : "), GetEscapedIdentifier(Name)), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new Array<Dynamic>();";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ja.push("), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(t.TypeFriendlyName())), "ToJson"))), "(t."), GetEscapedIdentifier(Combine(Combine(Begin(), "item"), k))), "));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Optional(TypeSpec o)
        {
            var TypeFriendlyName = o.TypeFriendlyName();
            var TypeString = GetTypeString(o);
            var ElementTypeFriendlyName = o.GenericTypeSpec.ParameterValues.Single().TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "FromJson"))), "(j : Dynamic) : "), TypeString))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (hasField(j, \"notHasValue\"))";
            yield return "    {";
            yield return "        return null;";
            yield return "    }";
            yield return "    if (hasField(j, \"hasValue\"))";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var v = "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "FromJson"))), "(getField(j, \"hasValue\"));"))
            {
                yield return _Line;
            }
            yield return "        return v;";
            yield return "    }";
            yield return "    throw \"InvalidOperation\";";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "ToJson"))), "(o : "), TypeString), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var j : Dynamic = {};";
            yield return "    if (o == null)";
            yield return "    {";
            yield return "        setField(j, \"notHasValue\", unitToJson({}));";
            yield return "    }";
            yield return "    else";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        setField(j, \"hasValue\", "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "ToJson"))), "(o));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return j;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_List(TypeSpec l)
        {
            var TypeFriendlyName = l.TypeFriendlyName();
            var TypeString = GetTypeString(l);
            var ElementTypeFriendlyName = l.GenericTypeSpec.ParameterValues.Single().TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "FromJson"))), "(j : Dynamic) : "), TypeString))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = cast(j, Array<Dynamic>);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    for (e in ja)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        a.push("), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "FromJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "ToJson"))), "(c : "), TypeString), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new Array<Dynamic>();";
            yield return "    for (e in c)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        ja.push("), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "ToJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Set(TypeSpec l)
        {
            var TypeFriendlyName = l.TypeFriendlyName();
            var TypeString = GetTypeString(l);
            var ElementTypeFriendlyName = l.GenericTypeSpec.ParameterValues.Single().TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "FromJson"))), "(j : Dynamic) : "), TypeString))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = cast(j, Array<Dynamic>);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    for (e in ja)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        a.set("), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "FromJson"))), "(e), {});"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "ToJson"))), "(c : "), TypeString), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new Array<Dynamic>();";
            yield return "    for (e in c.keys())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        ja.push("), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ElementTypeFriendlyName)), "ToJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Map(TypeSpec l)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var TypeFriendlyName = l.TypeFriendlyName();
            var TypeString = GetTypeString(l);
            var KeyTypeFriendlyName = gp[0].TypeFriendlyName();
            var ValueTypeFriendlyName = gp[1].TypeFriendlyName();
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "FromJson"))), "(j : Dynamic) : "), TypeString))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = cast(j, Array<Dynamic>);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    for (e in ja)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var key = "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(KeyTypeFriendlyName)), "FromJson"))), "(getField(e, \"key\"));"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var value = "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ValueTypeFriendlyName)), "FromJson"))), "(getField(e, \"value\"));"))
            {
                yield return _Line;
            }
            yield return "        a.set(key, value);";
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static function "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(TypeFriendlyName)), "ToJson"))), "(c : "), TypeString), ") : Dynamic"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new Array<Dynamic>();";
            yield return "    for (key in c.keys())";
            yield return "    {";
            yield return "        var value = c.get(key);";
            yield return "        var jp : Dynamic = {};";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        setField(jp, \"key\", "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(KeyTypeFriendlyName)), "ToJson"))), "(key));"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        setField(jp, \"value\", "), GetEscapedIdentifier(Combine(Combine(Begin(), LowercaseCamelize(ValueTypeFriendlyName)), "ToJson"))), "(value));"))
            {
                yield return _Line;
            }
            yield return "        ja.push(jp);";
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String PackageName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            if (PackageName != "")
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "package "), GetEscapedIdentifier(PackageName)), ";"))
                {
                    yield return _Line;
                }
            }
            yield return "import haxe.Json;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "import "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), GetTypes(Schema)))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
