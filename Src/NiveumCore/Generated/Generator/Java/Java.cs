//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.Java
{
    partial class Templates
    {
        public readonly List<String> Keywords = new List<String> {"abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "default", "do", "double", "else", "extends", "final", "finally", "float", "for", "goto", "if", "implements", "import", "instanceof", "int", "interface", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "strictfp", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "try", "void", "volatile", "while", "true", "false", "null"};
        public readonly Dictionary<String, String> PrimitiveMapping = new Dictionary<String, String> {{"Unit", "Unit"}, {"Boolean", "boolean"}, {"String", "java.lang.String"}, {"Int", "int"}, {"Real", "double"}, {"Byte", "byte"}, {"UInt8", "byte"}, {"UInt16", "short"}, {"UInt32", "int"}, {"UInt64", "long"}, {"Int8", "byte"}, {"Int16", "short"}, {"Int32", "int"}, {"Int64", "long"}, {"Float32", "float"}, {"Float64", "double"}, {"Type", "java.lang.reflect.Type"}, {"Optional", "Optional"}, {"List", "java.util.ArrayList"}, {"Set", "java.util.LinkedHashSet"}, {"Map", "java.util.LinkedHashMap"}};
        public readonly Dictionary<String, String> ReferenceTypeMapping = new Dictionary<String, String> {{"boolean", "java.lang.Boolean"}, {"byte", "java.lang.Byte"}, {"short", "java.lang.Short"}, {"int", "java.lang.Integer"}, {"long", "java.lang.Long"}, {"float", "java.lang.Float"}, {"double", "java.lang.Double"}};
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> SingleLineXmlComment(String Description)
        {
            foreach (var _Line in Combine(Combine(Combine(Begin(), "/** "), Description), " */"))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> MultiLineXmlComment(List<String> Description)
        {
            yield return "/**";
            foreach (var _Line in Combine(Combine(Begin(), "  * "), Description))
            {
                yield return _Line;
            }
            yield return "  * */";
        }
        public IEnumerable<String> Attribute_Record()
        {
            yield return "public @interface Record";
            yield return "{";
            yield return "}";
        }
        public IEnumerable<String> Attribute_Alias()
        {
            yield return "public @interface Alias";
            yield return "{";
            yield return "}";
        }
        public IEnumerable<String> Attribute_TaggedUnion()
        {
            yield return "public @interface TaggedUnion";
            yield return "{";
            yield return "}";
        }
        public IEnumerable<String> Attribute_Tag()
        {
            yield return "public @interface Tag";
            yield return "{";
            yield return "}";
        }
        public IEnumerable<String> Attribute_Tuple()
        {
            yield return "public @interface Tuple";
            yield return "{";
            yield return "}";
        }
        public IEnumerable<String> Primitive_Unit()
        {
            yield return "@Record";
            yield return "public final class Unit";
            yield return "{";
            yield return "    public static final Unit Value = new Unit();";
            yield return "    private Unit()";
            yield return "    {";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Alias(AliasDef a)
        {
            var Name = GetEscapedIdentifier(a.DefinitionName()) + GetGenericParameters(a.GenericParameters);
            var Type = GetTypeString(a.Type, a.NamespaceName());
            foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
            {
                yield return _Line;
            }
            yield return "@Alias";
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), Name))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    public "), Type), " Value;"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    public static "), Name), " Create("), Type), " o)"))
            {
                yield return _Line;
            }
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "        "), Name), " r = new "), Name), "();"))
            {
                yield return _Line;
            }
            yield return "        r.Value = o;";
            yield return "        return r;";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Record(RecordDef r)
        {
            var Name = GetEscapedIdentifier(r.DefinitionName()) + GetGenericParameters(r.GenericParameters);
            foreach (var _Line in Combine(Begin(), GetXmlComment(r.Description)))
            {
                yield return _Line;
            }
            yield return "@Record";
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), Name))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var f in r.Fields)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(f.Description, f.Type)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetTypeString(f.Type, r.NamespaceName())), " "), GetEscapedIdentifier(f.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> TaggedUnionTag(TaggedUnionDef tu)
        {
            var TagName = GetEscapedIdentifier(GetSuffixedTypeName(tu.Name, tu.Version, "Tag", tu.NamespaceName()));
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), TagName))
            {
                yield return _Line;
            }
            yield return "{";
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static final int "), GetEscapedIdentifier(a.Name)), " = "), k), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            yield return "}";
        }
        public IEnumerable<String> TaggedUnion(TaggedUnionDef tu)
        {
            var TagTypeString = GetSuffixedTypeString(tu.Name, tu.Version, "Tag", tu.NamespaceName());
            foreach (var _Line in Combine(Begin(), TaggedUnion(tu, TagTypeString)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> TaggedUnion(TaggedUnionDef tu, String TagTypeString)
        {
            var Name = GetEscapedIdentifier(tu.DefinitionName()) + GetGenericParameters(tu.GenericParameters);
            foreach (var _Line in Combine(Begin(), GetXmlComment(tu.Description)))
            {
                yield return _Line;
            }
            yield return "@TaggedUnion";
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), Name))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    @Tag public int _Tag;";
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description, a.Type)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetTypeString(a.Type, tu.NamespaceName())), " "), GetEscapedIdentifier(a.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), Name), " "), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "()"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), Name), " r = new "), Name), "();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    r._Tag = "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    r."), GetEscapedIdentifier(a.Name)), " = Unit.Value;"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "    return r;";
                    yield return "    " + "}";
                }
                else
                {
                    foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), Name), " "), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "("), GetTypeString(a.Type, tu.NamespaceName())), " Value)"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), Name), " r = new "), Name), "();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    r._Tag = "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    r."), GetEscapedIdentifier(a.Name)), " = Value;"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "    return r;";
                    yield return "    " + "}";
                }
            }
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public boolean "), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), "() { return _Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), "; }"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> Enum(EnumDef e)
        {
            var Name = GetEscapedIdentifier(e.DefinitionName());
            foreach (var _Line in Combine(Begin(), GetXmlComment(e.Description)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), Name))
            {
                yield return _Line;
            }
            yield return "{";
            var k = 0;
            foreach (var l in e.Literals)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(l.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public static final "), GetTypeString(e.UnderlyingType, e.NamespaceName())), " "), GetEscapedIdentifier(l.Name)), " = "), l.Value), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            yield return "}";
        }
        public IEnumerable<String> Tuple(TypeSpec tp, String NamespaceName)
        {
            var Name = GetEscapedIdentifier(tp.SimpleName(NamespaceName));
            var Types = tp.Tuple;
            yield return "@Tuple";
            foreach (var _Line in Combine(Combine(Begin(), "public final class "), Name))
            {
                yield return _Line;
            }
            yield return "{";
            var k = 0;
            foreach (var e in Types)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetTypeString(e, NamespaceName)), " "), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            yield return "}";
        }
        public IEnumerable<String> WrapModule(String NamespaceName, List<String> Imports, IEnumerable<String> Contents)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            if (NamespaceName != "")
            {
                var n = String.Join(".", NamespaceName.Split('.').Select(NamespacePart => LowercaseCamelize(NamespacePart)));
                foreach (var _Line in Combine(Combine(Combine(Begin(), "package "), n), ";"))
                {
                    yield return _Line;
                }
                yield return "";
            }
            yield return "import niveum.lang.*;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "import "), Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), Contents))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
