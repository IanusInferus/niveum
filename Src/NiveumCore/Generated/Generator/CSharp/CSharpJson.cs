//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.CSharpJson
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> JsonSerializationServer(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "public sealed class JsonSerializationServer";
            yield return "{";
            yield return "    private Dictionary<String, Func<IApplicationServer, String, String>> ClientCommandsWithoutHash;";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>> ClientCommands;";
            yield return "    private Dictionary<String, Func<IApplicationServer, String, Task<String>>> AsyncClientCommandsWithoutHash;";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, Task<String>>> AsyncClientCommands;";
            yield return "";
            yield return "    private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>";
            yield return "    {";
            yield return "        public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)";
            yield return "        {";
            yield return "            if (!x.Key.Equals(y.Key)) { return false; }";
            yield return "            if (!x.Value.Equals(y.Value)) { return false; }";
            yield return "            return true;";
            yield return "        }";
            yield return "";
            yield return "        public int GetHashCode(KeyValuePair<TKey, TValue> obj)";
            yield return "        {";
            yield return "            var KeyHash = obj.Key.GetHashCode();";
            yield return "            var ValueHash = obj.Value.GetHashCode();";
            yield return "            return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public JsonSerializationServer()";
            yield return "    {";
            yield return "        ClientCommandsWithoutHash = new Dictionary<String, Func<IApplicationServer, String, String>>(StringComparer.OrdinalIgnoreCase);";
            yield return "        ClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            yield return "        AsyncClientCommandsWithoutHash = new Dictionary<String, Func<IApplicationServer, String, Task<String>>>(StringComparer.OrdinalIgnoreCase);";
            yield return "        AsyncClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, Task<String>>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (c.ClientCommand.Version == "")
                    {
                        if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "AsyncClientCommandsWithoutHash.Add("), CommandNameString), ", async (s, p) => JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(await s."), GetEscapedIdentifier(Name)), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromJson"))), "(JToken.Parse(p)))).ToString(Formatting.None));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                        else
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ClientCommandsWithoutHash.Add("), CommandNameString), ", (s, p) => JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(s."), GetEscapedIdentifier(Name)), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromJson"))), "(JToken.Parse(p)))).ToString(Formatting.None));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                    }
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "AsyncClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), async (s, p) => JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(await s."), GetEscapedIdentifier(Name)), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromJson"))), "(JToken.Parse(p)))).ToString(Formatting.None));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), (s, p) => JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(s."), GetEscapedIdentifier(Name)), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromJson"))), "(JToken.Parse(p)))).ToString(Formatting.None));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public UInt64 Hash";
            yield return "    {";
            yield return "        get";
            yield return "        {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "            return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public Boolean HasCommand(String CommandName)";
            yield return "    {";
            yield return "        return ClientCommandsWithoutHash.ContainsKey(CommandName);";
            yield return "    }";
            yield return "    public Boolean HasCommandAsync(String CommandName)";
            yield return "    {";
            yield return "        return AsyncClientCommandsWithoutHash.ContainsKey(CommandName);";
            yield return "    }";
            yield return "";
            yield return "    public Boolean HasCommand(String CommandName, UInt32 CommandHash)";
            yield return "    {";
            yield return "        return ClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));";
            yield return "    }";
            yield return "    public Boolean HasCommandAsync(String CommandName, UInt32 CommandHash)";
            yield return "    {";
            yield return "        return AsyncClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));";
            yield return "    }";
            yield return "";
            yield return "    public String ExecuteCommand(IApplicationServer s, String CommandName, String Parameters)";
            yield return "    {";
            yield return "        var cmd = ClientCommandsWithoutHash[CommandName];";
            yield return "        return cmd(s, Parameters);";
            yield return "    }";
            yield return "    public async Task<String> ExecuteCommandAsync(IApplicationServer s, String CommandName, String Parameters)";
            yield return "    {";
            yield return "        var cmd = AsyncClientCommandsWithoutHash[CommandName];";
            yield return "        return await cmd(s, Parameters);";
            yield return "    }";
            yield return "";
            yield return "    public String ExecuteCommand(IApplicationServer s, String CommandName, UInt32 CommandHash, String Parameters)";
            yield return "    {";
            yield return "        var cmd = ClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];";
            yield return "        return cmd(s, Parameters);";
            yield return "    }";
            yield return "    public async Task<String> ExecuteCommandAsync(IApplicationServer s, String CommandName, UInt32 CommandHash, String Parameters)";
            yield return "    {";
            yield return "        var cmd = AsyncClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];";
            yield return "        return await cmd(s, Parameters);";
            yield return "    }";
            yield return "}";
            yield return "public sealed class JsonSerializationServerEventDispatcher";
            yield return "{";
            yield return "    public JsonSerializationServerEventDispatcher(IApplicationServer s)";
            yield return "    {";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "s."), Name), " += e => OnServerEvent("), CommandNameString), ", 0x"), CommandHash), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "ToJson"))), "(e).ToString(Formatting.None));"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public delegate void ServerEventDelegate(String CommandName, UInt32 CommandHash, String Parameters);";
            yield return "    public event ServerEventDelegate ServerEvent;";
            yield return "    private void OnServerEvent(String CommandName, UInt32 CommandHash, String Parameters)";
            yield return "    {";
            yield return "        if (ServerEvent != null) { ServerEvent(CommandName, CommandHash, Parameters); }";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> IJsonSender()
        {
            yield return "public interface IJsonSender";
            yield return "{";
            yield return "    void Send(String CommandName, UInt32 CommandHash, String Parameters);";
            yield return "}";
        }
        public IEnumerable<String> JsonSerializationClient(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "public sealed class JsonSerializationClient";
            yield return "{";
            yield return "    private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>";
            yield return "    {";
            yield return "        public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)";
            yield return "        {";
            yield return "            if (!x.Key.Equals(y.Key)) { return false; }";
            yield return "            if (!x.Value.Equals(y.Value)) { return false; }";
            yield return "            return true;";
            yield return "        }";
            yield return "";
            yield return "        public int GetHashCode(KeyValuePair<TKey, TValue> obj)";
            yield return "        {";
            yield return "            var KeyHash = obj.Key.GetHashCode();";
            yield return "            var ValueHash = obj.Value.GetHashCode();";
            yield return "            return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    private class ApplicationClient : IApplicationClient";
            yield return "    {";
            yield return "        public IJsonSender s;";
            yield return "        public Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>> ClientCommandCallbacks;";
            yield return "";
            yield return "        public UInt64 Hash";
            yield return "        {";
            yield return "            get";
            yield return "            {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "                return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "            }";
            yield return "        }";
            yield return "";
            yield return "        public void DequeueCallback(String CommandName)";
            yield return "        {";
            yield return "            ClientCommandCallbacks[CommandName].Dequeue();";
            yield return "        }";
            yield return "";
            yield return "        private void AddCallback(String CommandName, UInt32 CommandHash, Action<String> Callback)";
            yield return "        {";
            yield return "            if (ClientCommandCallbacks.ContainsKey(CommandName))";
            yield return "            {";
            yield return "                ClientCommandCallbacks[CommandName].Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));";
            yield return "            }";
            yield return "            else";
            yield return "            {";
            yield return "                var q = new Queue<KeyValuePair<UInt32, Action<String>>>();";
            yield return "                q.Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));";
            yield return "                ClientCommandCallbacks.Add(CommandName, q);";
            yield return "            }";
            yield return "        }";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public Task<"), ReplyTypeString), "> "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " r)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Source = new TaskCompletionSource<"), ReplyTypeString), ">();"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Request = JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "ToJson"))), "(r).ToString(Formatting.None);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    AddCallback("), CommandNameString), ", 0x"), CommandHash), ", Parameters => Source.SetResult(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "FromJson"))), "(JToken.Parse(Parameters))));"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s.Send("), CommandNameString), ", 0x"), CommandHash), ", Request);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    return Source.Task;";
                    yield return "        " + "}";
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public event Action<"), EventTypeString), "> "), GetEscapedIdentifier(Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public void "), GetEscapedIdentifier(Combine(Combine(Begin(), "Raise"), Name))), "("), EventTypeString), " e) { if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(e); } }"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    private ApplicationClient c;";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Action<String>> ServerCommands;";
            yield return "";
            yield return "    public JsonSerializationClient(IJsonSender s)";
            yield return "    {";
            yield return "        c = new ApplicationClient();";
            yield return "        c.s = s;";
            yield return "        c.ClientCommandCallbacks = new Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>>();";
            yield return "        ServerCommands = new Dictionary<KeyValuePair<String, UInt32>, Action<String>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ServerCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), Parameters => c."), GetEscapedIdentifier(Combine(Combine(Begin(), "Raise"), Name))), "(JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "FromJson"))), "(JToken.Parse(Parameters))));"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public IApplicationClient GetApplicationClient()";
            yield return "    {";
            yield return "        return c;";
            yield return "    }";
            yield return "";
            yield return "    public void HandleResult(String CommandName, UInt32 CommandHash, String Parameters)";
            yield return "    {";
            yield return "        if (c.ClientCommandCallbacks.ContainsKey(CommandName))";
            yield return "        {";
            yield return "            var q = c.ClientCommandCallbacks[CommandName];";
            yield return "            if (q.Count == 0)";
            yield return "            {";
            yield return "                throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "            }";
            yield return "            var CallbackPair = q.Peek();";
            yield return "            if (CallbackPair.Key != CommandHash)";
            yield return "            {";
            yield return "                throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "            }";
            yield return "            q.Dequeue();";
            yield return "            var Callback = CallbackPair.Value;";
            yield return "            Callback(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        var p = new KeyValuePair<String, UInt32>(CommandName, CommandHash);";
            yield return "        if (ServerCommands.ContainsKey(p))";
            yield return "        {";
            yield return "            var a = ServerCommands[p];";
            yield return "            a(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> JsonLogAspectWrapper(List<TypeDef> Commands, String NamespaceName)
        {
            yield return "public sealed class JsonLogAspectWrapper : IApplicationServer";
            yield return "{";
            yield return "    private IApplicationServer Inner;";
            yield return "";
            yield return "    public JsonLogAspectWrapper(IApplicationServer Inner)";
            yield return "    {";
            yield return "        this.Inner = Inner;";
            foreach (var c in Commands.Where(c => c.OnServerCommand))
            {
                var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                foreach (var _Line in Combine(Combine(Combine(Begin(), "Inner."), GetEscapedIdentifier(Name)), " += e =>"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                yield return "        " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ServerCommand != null) { ServerCommand("), CommandNameString), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "ToJson"))), "(e).ToString(Formatting.None)); }"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(e); }"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                yield return "        " + "};";
            }
            yield return "    }";
            yield return "";
            yield return "    public event Action<String, String> ClientCommandIn;";
            yield return "    public event Action<String, String> ClientCommandOut;";
            yield return "    public event Action<String, String> ServerCommand;";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public async Task<"), ReplyTypeString), "> "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " Request)"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ClientCommandIn != null) { ClientCommandIn("), CommandNameString), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "ToJson"))), "(Request).ToString(Formatting.None)); }"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Reply = await Inner."), GetEscapedIdentifier(Name)), "(Request);"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ClientCommandOut != null) { ClientCommandOut("), CommandNameString), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(Reply).ToString(Formatting.None)); }"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "    return Reply;";
                        yield return "    " + "}";
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), ReplyTypeString), " "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " Request)"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ClientCommandIn != null) { ClientCommandIn("), CommandNameString), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "ToJson"))), "(Request).ToString(Formatting.None)); }"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Reply = Inner."), GetEscapedIdentifier(Name)), "(Request);"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ClientCommandOut != null) { ClientCommandOut("), CommandNameString), ", JsonTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToJson"))), "(Reply).ToString(Formatting.None)); }"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "    return Reply;";
                        yield return "    " + "}";
                    }
                }
                else if (c.OnServerCommand)
                {
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public event Action<"), EventTypeString), "> "), GetEscapedIdentifier(Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator(Schema Schema, String NamespaceName)
        {
            yield return "public static class JsonTranslator";
            yield return "{";
            foreach (var _Line in Combine(Combine(Begin(), "    "), GetJsonTranslatorSerializers(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Unit()
        {
            yield return "public static Unit UnitFromJson(JToken j)";
            yield return "{";
            yield return "    return new Unit();";
            yield return "}";
            yield return "public static JObject UnitToJson(Unit v)";
            yield return "{";
            yield return "    return new JObject();";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Boolean()
        {
            yield return "public static Boolean BooleanFromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Boolean) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToBoolean(jv.Value);";
            yield return "}";
            yield return "public static JValue BooleanToJson(Boolean v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_String()
        {
            yield return "public static String StringFromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.String) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToString(jv.Value);";
            yield return "}";
            yield return "public static JValue StringToJson(String v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int()
        {
            yield return "public static Int IntFromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToInt32(jv.Value);";
            yield return "}";
            yield return "public static JValue IntToJson(Int v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Real()
        {
            yield return "public static Real RealFromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToDouble(jv.Value);";
            yield return "}";
            yield return "public static JValue RealToJson(Real v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Byte()
        {
            yield return "public static Byte ByteFromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToByte(jv.Value);";
            yield return "}";
            yield return "public static JValue ByteToJson(Byte v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt8()
        {
            yield return "public static UInt8 UInt8FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToByte(jv.Value);";
            yield return "}";
            yield return "public static JValue UInt8ToJson(UInt8 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt16()
        {
            yield return "public static UInt16 UInt16FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToUInt16(jv.Value);";
            yield return "}";
            yield return "public static JValue UInt16ToJson(UInt16 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt32()
        {
            yield return "public static UInt32 UInt32FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToUInt32(jv.Value);";
            yield return "}";
            yield return "public static JValue UInt32ToJson(UInt32 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_UInt64()
        {
            yield return "public static UInt64 UInt64FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToUInt64(jv.Value);";
            yield return "}";
            yield return "public static JValue UInt64ToJson(UInt64 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int8()
        {
            yield return "public static Int8 Int8FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToSByte(jv.Value);";
            yield return "}";
            yield return "public static JValue Int8ToJson(Int8 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int16()
        {
            yield return "public static Int16 Int16FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToInt16(jv.Value);";
            yield return "}";
            yield return "public static JValue Int16ToJson(Int16 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int32()
        {
            yield return "public static Int32 Int32FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToInt32(jv.Value);";
            yield return "}";
            yield return "public static JValue Int32ToJson(Int32 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Int64()
        {
            yield return "public static Int64 Int64FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToInt64(jv.Value);";
            yield return "}";
            yield return "public static JValue Int64ToJson(Int64 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Float32()
        {
            yield return "public static Float32 Float32FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToSingle(jv.Value);";
            yield return "}";
            yield return "public static JValue Float32ToJson(Float32 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Float64()
        {
            yield return "public static Float64 Float64FromJson(JToken j)";
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            yield return "    return Convert.ToDouble(jv.Value);";
            yield return "}";
            yield return "public static JValue Float64ToJson(Float64 v)";
            yield return "{";
            yield return "    return new JValue(v);";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Primitive_Type()
        {
            yield return "public static Type TypeFromJson(JToken j)";
            yield return "{";
            yield return "    throw new NotSupportedException();";
            yield return "}";
            yield return "public static JValue TypeToJson(Type v)";
            yield return "{";
            yield return "    throw new NotSupportedException();";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Alias(AliasDef a, String NamespaceName)
        {
            var TypeString = GetTypeString(a.GetTypeSpec(), NamespaceName);
            var Name = a.GetTypeSpec().SimpleName(NamespaceName);
            var ValueSimpleName = a.Type.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return new "), TypeString), " { Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromJson"))), "(j) };"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JToken "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToJson"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToJson"))), "(o.Value);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Record(RecordDef r, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_Record(String Name, String TypeString, List<VariableDef> Fields, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }";
            yield return "    var jo = j as JObject;";
            yield return "    if (jo == null) { throw new InvalidOperationException(); }";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var a in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromJson"))), "(jo["), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "]);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JObject "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToJson"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var jo = new JObject();";
            foreach (var a in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "jo.Add("), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToJson"))), "(o."), GetEscapedIdentifier(a.Name)), "));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return jo;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_TaggedUnion(TaggedUnionDef tu, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_TaggedUnion(String Name, String TypeString, String TagName, String TagTypeString, List<VariableDef> Alternatives, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Enum(TagName, TagTypeString, NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }";
            yield return "    var jo = j as JObject;";
            yield return "    if (jo == null) { throw new InvalidOperationException(); }";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    var d = (IDictionary<string, JToken>)(jo);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (d.ContainsKey("), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "))"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    o._Tag = "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    o."), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromJson"))), "(jo["), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "]);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return o;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JObject "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToJson"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var jo = new JObject();";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o._Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    jo.Add("), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToJson"))), "(o."), GetEscapedIdentifier(a.Name)), "));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return jo;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Enum(EnumDef e, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_Enum(String Name, String TypeString, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Number) { throw new InvalidOperationException(); }";
            yield return "    var jv = j as JValue;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return ("), TypeString), ")(Convert.ToInt64(jv.Value));"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JValue "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToJson"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    return new JValue(Convert.ToInt64(o));";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_ClientCommand(ClientCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Request", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Request", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), JsonTranslator_TaggedUnion(GetSuffixedTypeName(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeName(c.Name, c.Version, "ReplyTag", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName), c.InParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_ServerCommand(ServerCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), JsonTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Event", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Event", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> JsonTranslator_Tuple(TypeSpec tp, String NamespaceName)
        {
            var SimpleName = tp.SimpleName(NamespaceName);
            var TypeString = GetTypeString(tp, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }";
            yield return "    var ja = j as JArray;";
            var ItemNames = new List<String>{};
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "var "), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k + 1))), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "FromJson"))), "(ja["), k), "]);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    ItemNames.Add("Item" + (k + 1).ToString(System.Globalization.CultureInfo.InvariantCulture));
                    k += 1;
                }
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return Tuple.Create("), String.Join(", ", ItemNames)), ");"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JArray "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToJson"))), "("), TypeString), " t)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new JArray();";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ja.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "ToJson"))), "(t."), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k + 1))), "));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Optional(TypeSpec o, TaggedUnionDef GenericOptionalType, String NamespaceName)
        {
            var ElementType = o.GenericTypeSpec.ParameterValues.Single();
            var Alternatives = GenericOptionalType.Alternatives.Select(a => new VariableDef { Name = a.Name, Type = a.Type.OnGenericParameterRef ? ElementType : a.Type, Attributes = a.Attributes, Description = a.Description }).ToList();
            var SimpleName = o.SimpleName(NamespaceName);
            var TypeString = GetTypeString(o, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }";
            yield return "    var jo = j as JObject;";
            yield return "    if (jo == null) { throw new InvalidOperationException(); }";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    var d = (IDictionary<string, JToken>)(jo);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (d.ContainsKey("), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "))"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    o._Tag = OptionalTag."), GetEscapedIdentifier(a.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    o."), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromJson"))), "(jo["), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), "]);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return o;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JObject "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToJson"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var jo = new JObject();";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o._Tag == OptionalTag."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    jo.Add("), GetEscapedStringLiteral(LowercaseCamelize(a.Name))), ", "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToJson"))), "(o."), GetEscapedIdentifier(a.Name)), "));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return jo;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_List(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }";
            yield return "    var ja = j as JArray;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    foreach (var e in ja.Children())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        a.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JArray "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToJson"))), "("), TypeString), " c)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new JArray();";
            yield return "    foreach (var e in c)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        ja.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Set(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }";
            yield return "    var ja = j as JArray;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    foreach (var e in ja.Children())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        a.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JArray "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToJson"))), "("), TypeString), " c)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new JArray();";
            yield return "    foreach (var e in c)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        ja.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToJson"))), "(e));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> JsonTranslator_Map(TypeSpec l, String NamespaceName)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var KeySimpleName = gp[0].SimpleName(NamespaceName);
            var ValueSimpleName = gp[1].SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromJson"))), "(JToken j)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }";
            yield return "    var ja = j as JArray;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var a = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    foreach (var e in ja.Children().OfType<JObject>())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "FromJson"))), "(e[\"key\"]);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromJson"))), "(e[\"value\"]);"))
            {
                yield return _Line;
            }
            yield return "        a.Add(Key, Value);";
            yield return "    }";
            yield return "    return a;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static JArray "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToJson"))), "("), TypeString), " c)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var ja = new JArray();";
            yield return "    foreach (var e in c)";
            yield return "    {";
            yield return "        var je = new JObject();";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        je.Add(\"key\", "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "ToJson"))), "(e.Key));"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        je.Add(\"value\", "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToJson"))), "(e.Value));"))
            {
                yield return _Line;
            }
            yield return "        ja.Add(je);";
            yield return "    }";
            yield return "    return ja;";
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "//Reference:";
            yield return "//NiveumJson";
            yield return "";
            yield return "using System;";
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";
            var Commands = Schema.Types.Where(t => t.OnClientCommand || t.OnServerCommand).ToList();
            if (Commands.Count > 0)
            {
                yield return "using System.Threading.Tasks;";
            }
            yield return "using Niveum.Json;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "using "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), GetTypes(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
