//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.CSharpCompatible
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> EventPump(List<ServerCommandDef> ServerCommands)
        {
            var ServerCommandGroups = ServerCommands.GroupBy(sc => sc.Name).Where(g => g.Any(sc => sc.Version == "")).ToList();
            yield return "private class EventPump : IEventPump";
            yield return "{";
            foreach (var g in ServerCommandGroups)
            {
                var Name = g.Key;
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), "> "), GetEscapedIdentifier(Name)), " { get; set; }"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
            yield return "private IEventPump CreateEventPump(Func<String> GetVersion)";
            yield return "{";
            yield return "    var ep = new EventPump();";
            foreach (var g in ServerCommandGroups)
            {
                var Name = g.Key;
                var GroupCommands = g.ToList();
                if (GroupCommands.Count == 1)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), "ep."), Name))), " = e => { if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(e); } };"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
                else
                {
                    var SortedGroupCommands = GroupCommands.Where(sc => sc.Version != "").OrderByDescending(sc => new NumericString(sc.Version)).ToList();
                    foreach (var _Line in Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), "ep."), Name))), " = eHead =>"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "{";
                    yield return "    " + "    var Version = GetVersion();";
                    yield return "    " + "    if (Version == \"\")";
                    yield return "    " + "    {";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "        if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(eHead); }"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "        return;";
                    yield return "    " + "    }";
                    foreach (var sc in SortedGroupCommands)
                    {
                        var VersionedTypeFriendlyName = sc.TypeFriendlyName();
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (Version == \""), sc.Version), "\")"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var e = "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "EventFromHead"))), "(eHead);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if ("), GetEscapedIdentifier(VersionedTypeFriendlyName)), " != null) { "), GetEscapedIdentifier(VersionedTypeFriendlyName)), "(e); }"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    return;";
                        yield return "        " + "}";
                    }
                    yield return "    " + "    throw new InvalidOperationException();";
                    yield return "    " + "};";
                }
            }
            yield return "    return ep;";
            yield return "}";
        }
        public IEnumerable<String> Translator_RecordFrom(String Name, String VersionedName, List<VariableDef> Fields, List<VariableDef> HeadFields, Boolean InitialHasError)
        {
            var d = HeadFields.ToDictionary(f => f.Name);
            var HasError = InitialHasError || !Fields.All(f => IsNullType(f.Type) || (d.ContainsKey(f.Name) && (IsSameType(f.Type, d[f.Name].Type, false) || IsSameType(f.Type, d[f.Name].Type, true))));
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_RecordFrom(Name, VersionedName, Fields, HeadFields)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_RecordFrom(Name, VersionedName, Fields, HeadFields)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_RecordFrom(String Name, String VersionedName, List<VariableDef> Fields, List<VariableDef> HeadFields)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(VersionedName)), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "FromHead"))), "("), GetEscapedIdentifier(Name)), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), GetEscapedIdentifier(VersionedName)), "();"))
            {
                yield return _Line;
            }
            var d = HeadFields.ToDictionary(f => f.Name);
            foreach (var f in Fields)
            {
                if (IsNullType(f.Type))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = new Unit();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    continue;
                }
                if (d.ContainsKey(f.Name))
                {
                    var fHead = d[f.Name];
                    if (IsSameType(f.Type, fHead.Type, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = ho."), GetEscapedIdentifier(f.Name)), ";"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        continue;
                    }
                    else if (IsSameType(f.Type, fHead.Type, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.TypeFriendlyName()), "FromHead"))), "(ho."), GetEscapedIdentifier(f.Name)), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = ho."), GetEscapedIdentifier(f.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return o;";
            yield return "}";
        }
        public IEnumerable<String> Translator_RecordTo(String Name, String VersionedName, List<VariableDef> Fields, List<VariableDef> HeadFields, Boolean InitialHasError)
        {
            var d = Fields.ToDictionary(f => f.Name);
            var HasError = InitialHasError || !HeadFields.All(fHead => IsNullType(fHead.Type) || (d.ContainsKey(fHead.Name) && (IsSameType(d[fHead.Name].Type, fHead.Type, false) || IsSameType(d[fHead.Name].Type, fHead.Type, true))));
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_RecordTo(Name, VersionedName, Fields, HeadFields)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_RecordTo(Name, VersionedName, Fields, HeadFields)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_RecordTo(String Name, String VersionedName, List<VariableDef> Fields, List<VariableDef> HeadFields)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(Name)), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ToHead"))), "("), GetEscapedIdentifier(VersionedName)), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var ho = new "), GetEscapedIdentifier(Name)), "();"))
            {
                yield return _Line;
            }
            var d = Fields.ToDictionary(f => f.Name);
            foreach (var fHead in HeadFields)
            {
                if (IsNullType(fHead.Type))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "ho."), GetEscapedIdentifier(fHead.Name)), " = new Unit();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    continue;
                }
                if (d.ContainsKey(fHead.Name))
                {
                    var f = d[fHead.Name];
                    if (IsSameType(f.Type, fHead.Type, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ho."), GetEscapedIdentifier(f.Name)), " = o."), GetEscapedIdentifier(f.Name)), ";"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        continue;
                    }
                    else if (IsSameType(f.Type, fHead.Type, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ho."), GetEscapedIdentifier(f.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.TypeFriendlyName()), "ToHead"))), "(o."), GetEscapedIdentifier(f.Name)), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ho."), GetEscapedIdentifier(fHead.Name)), " = o."), GetEscapedIdentifier(fHead.Name)), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return ho;";
            yield return "}";
        }
        public IEnumerable<String> Translator_TaggedUnionFrom(String VersionedName, String TypeString, String VersionedTypeString, List<VariableDef> Alternatives, List<VariableDef> HeadAlternatives, Boolean InitialHasError)
        {
            var d = Alternatives.ToDictionary(a => a.Name);
            var HasError = InitialHasError || !HeadAlternatives.All(aHead => d.ContainsKey(aHead.Name) && (IsNullType(d[aHead.Name].Type) || IsSameType(d[aHead.Name].Type, aHead.Type, false) || IsSameType(d[aHead.Name].Type, aHead.Type, true)));
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_TaggedUnionFrom(VersionedName, TypeString, VersionedTypeString, Alternatives, HeadAlternatives)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_TaggedUnionFrom(VersionedName, TypeString, VersionedTypeString, Alternatives, HeadAlternatives)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_TaggedUnionFrom(String VersionedName, String TypeString, String VersionedTypeString, List<VariableDef> Alternatives, List<VariableDef> HeadAlternatives)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), VersionedTypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "FromHead"))), "("), TypeString), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            var d = Alternatives.ToDictionary(a => a.Name);
            foreach (var aHead in HeadAlternatives)
            {
                if (d.ContainsKey(aHead.Name))
                {
                    var a = d[aHead.Name];
                    if (IsNullType(a.Type))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (ho."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedTypeString), ".Create"), a.Name))), "();"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                    else if (IsSameType(a.Type, aHead.Type, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (ho."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedTypeString), ".Create"), a.Name))), "(ho."), GetEscapedIdentifier(a.Name)), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                    else if (IsSameType(a.Type, aHead.Type, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (ho."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedTypeString), ".Create"), a.Name))), "("), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.TypeFriendlyName()), "FromHead"))), "(ho."), GetEscapedIdentifier(a.Name)), "));"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (ho."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), aHead.Name))), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedTypeString), ".Create"), aHead.Name))), "(ho."), GetEscapedIdentifier(aHead.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> Translator_TaggedUnionTo(String VersionedName, String TypeString, String VersionedTypeString, List<VariableDef> Alternatives, List<VariableDef> HeadAlternatives, Boolean InitialHasError)
        {
            var d = Alternatives.ToDictionary(a => a.Name);
            var HasError = InitialHasError || !HeadAlternatives.All(aHead => d.ContainsKey(aHead.Name) && (IsNullType(aHead.Type) || IsSameType(d[aHead.Name].Type, aHead.Type, false) || IsSameType(d[aHead.Name].Type, aHead.Type, true)));
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_TaggedUnionTo(VersionedName, TypeString, VersionedTypeString, Alternatives, HeadAlternatives)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_TaggedUnionTo(VersionedName, TypeString, VersionedTypeString, Alternatives, HeadAlternatives)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_TaggedUnionTo(String VersionedName, String TypeString, String VersionedTypeString, List<VariableDef> Alternatives, List<VariableDef> HeadAlternatives)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ToHead"))), "("), VersionedTypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            var d = Alternatives.ToDictionary(a => a.Name);
            foreach (var aHead in HeadAlternatives)
            {
                if (d.ContainsKey(aHead.Name))
                {
                    var a = d[aHead.Name];
                    if (IsNullType(aHead.Type))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), TypeString), ".Create"), a.Name))), "();"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                    else if (IsSameType(a.Type, aHead.Type, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), TypeString), ".Create"), a.Name))), "(o."), GetEscapedIdentifier(a.Name)), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                    else if (IsSameType(a.Type, aHead.Type, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), ")"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), TypeString), ".Create"), a.Name))), "("), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.TypeFriendlyName()), "ToHead"))), "(o."), GetEscapedIdentifier(a.Name)), "));"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "}";
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o."), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), aHead.Name))), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), TypeString), ".Create"), aHead.Name))), "(o."), GetEscapedIdentifier(aHead.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> Translator_EnumFrom(String Name, String VersionedName, List<LiteralDef> Literals, List<LiteralDef> HeadLiterals)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(VersionedName)), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "FromHead"))), "("), GetEscapedIdentifier(Name)), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var ltl in HeadLiterals)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (ho == "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), Name), "."), ltl.Name))), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedName), "."), ltl.Name))), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> Translator_EnumTo(String Name, String VersionedName, List<LiteralDef> Literals, List<LiteralDef> HeadLiterals)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(Name)), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ToHead"))), "("), GetEscapedIdentifier(VersionedName)), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var ltl in Literals)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o == "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), VersionedName), "."), ltl.Name))), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Combine(Begin(), Name), "."), ltl.Name))), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
        }
        public IEnumerable<String> Translator_ClientCommand(String Name, String VersionedName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "Reply"))), " "), GetEscapedIdentifier(VersionedName)), "("), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "Request"))), " r)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var HeadRequest = "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "RequestToHead"))), "(r);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var HeadReply = "), GetEscapedIdentifier(Name)), "(HeadRequest);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Reply = "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ReplyFromHead"))), "(HeadReply);"))
            {
                yield return _Line;
            }
            yield return "    return Reply;";
            yield return "}";
        }
        public IEnumerable<String> Translator_ClientCommandAsync(String Name, String VersionedName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public void "), GetEscapedIdentifier(VersionedName)), "("), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "Request"))), " r, Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "Reply"))), "> Callback, Action<Exception> OnFailure)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var HeadRequest = "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "RequestToHead"))), "(r);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Name)), "(HeadRequest, HeadReply => Callback("), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ReplyFromHead"))), "(HeadReply)), OnFailure);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_ServerCommand(String VersionedName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public event Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "Event"))), "> "), GetEscapedIdentifier(VersionedName)), ";"))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> Translator_TupleFrom(String VersionedName, String TypeString, String VersionedTypeString, List<TypeSpec> Elements, List<TypeSpec> HeadElements, Boolean InitialHasError)
        {
            var HasError = InitialHasError || (Elements.Count != HeadElements.Count) || !Elements.Zip(HeadElements, (e, eHead) => IsNullType(e) || IsSameType(e, eHead, false) || IsSameType(e, eHead, true)).All(b => b);
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_TupleFrom(VersionedName, TypeString, VersionedTypeString, Elements, HeadElements)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_TupleFrom(VersionedName, TypeString, VersionedTypeString, Elements, HeadElements)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_TupleFrom(String VersionedName, String TypeString, String VersionedTypeString, List<TypeSpec> Elements, List<TypeSpec> HeadElements)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), VersionedTypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "FromHead"))), "("), TypeString), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            var k = 0;
            foreach (var e in Elements)
            {
                if (IsNullType(e))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = new Unit();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                    continue;
                }
                if (k < HeadElements.Count)
                {
                    var eHead = HeadElements[k];
                    if (IsSameType(e, eHead, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = ho.Item"), k + 1), ";"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        k += 1;
                        continue;
                    }
                    else if (IsSameType(e, eHead, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), e.TypeFriendlyName()), "FromHead"))), "(ho.Item"), k + 1), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        k += 1;
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = ho.Item"), k + 1), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return new "), VersionedTypeString), "("), String.Join(", ", Enumerable.Range(0, Elements.Count).Select(i => "Item" + (i + 1).ToInvariantString()))), ");"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_TupleTo(String VersionedName, String TypeString, String VersionedTypeString, List<TypeSpec> Elements, List<TypeSpec> HeadElements, Boolean InitialHasError)
        {
            var HasError = InitialHasError || (Elements.Count != HeadElements.Count) || !Elements.Zip(HeadElements, (e, eHead) => IsNullType(e) || IsSameType(e, eHead, false) || IsSameType(e, eHead, true)).All(b => b);
            if (HasError)
            {
                foreach (var _Line in Combine(Combine(Begin(), "//"), Translator_TupleTo(VersionedName, TypeString, VersionedTypeString, Elements, HeadElements)))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Begin(), Translator_TupleTo(VersionedName, TypeString, VersionedTypeString, Elements, HeadElements)))
                {
                    yield return _Line;
                }
            }
        }
        public IEnumerable<String> Translator_TupleTo(String VersionedName, String TypeString, String VersionedTypeString, List<TypeSpec> Elements, List<TypeSpec> HeadElements)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedName), "ToHead"))), "("), VersionedTypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            var k = 0;
            foreach (var eHead in HeadElements)
            {
                if (IsNullType(eHead))
                {
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = new Unit();"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                    continue;
                }
                if (k < Elements.Count)
                {
                    var e = Elements[k];
                    if (IsSameType(e, eHead, false))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = o.Item"), k + 1), ";"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        k += 1;
                        continue;
                    }
                    else if (IsSameType(e, eHead, true))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), e.TypeFriendlyName()), "ToHead"))), "(o.Item"), k + 1), ");"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        k += 1;
                        continue;
                    }
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "var Item"), k + 1), " = o.Item"), k + 1), ";"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return new "), TypeString), "("), String.Join(", ", Enumerable.Range(0, Elements.Count).Select(i => "Item" + (i + 1).ToInvariantString()))), ");"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_ListFrom(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, String VersionedElementTypeFriendlyName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), VersionedTypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "FromHead"))), "("), TypeString), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return ho.Select(he => "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedElementTypeFriendlyName), "FromHead"))), "(he)).ToList();"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_ListTo(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, String VersionedElementTypeFriendlyName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "ToHead"))), "("), VersionedTypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return o.Select(e => "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedElementTypeFriendlyName), "ToHead"))), "(e)).ToList();"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_SetFrom(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, String VersionedElementTypeFriendlyName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), VersionedTypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "FromHead"))), "("), TypeString), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return new "), VersionedTypeString), "(ho.Select(he => "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedElementTypeFriendlyName), "FromHead"))), "(he)));"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_SetTo(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, String VersionedElementTypeFriendlyName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "ToHead"))), "("), VersionedTypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return new "), TypeString), "(o.Select(e => "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedElementTypeFriendlyName), "ToHead"))), "(e)));"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> Translator_MapFrom(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, TypeSpec KeyTypeSpec, TypeSpec HeadKeyTypeSpec, TypeSpec ValueTypeSpec, TypeSpec HeadValueTypeSpec)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), VersionedTypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "FromHead"))), "("), TypeString), " ho)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), VersionedTypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    foreach (var hp in ho)";
            yield return "    {";
            if (IsSameType(KeyTypeSpec, HeadKeyTypeSpec, false))
            {
                yield return "        " + "var Key = hp.Key;";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "var Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeyTypeSpec.TypeFriendlyName()), "FromHead"))), "(hp.Key);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            if (IsSameType(ValueTypeSpec, HeadValueTypeSpec, false))
            {
                yield return "        " + "var Value = hp.Value;";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "var Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueTypeSpec.TypeFriendlyName()), "FromHead"))), "(hp.Value);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "        o.Add(Key, Value);";
            yield return "    }";
            yield return "    return o;";
            yield return "}";
        }
        public IEnumerable<String> Translator_MapTo(String VersionedTypeFriendlyName, String TypeString, String VersionedTypeString, TypeSpec KeyTypeSpec, TypeSpec HeadKeyTypeSpec, TypeSpec ValueTypeSpec, TypeSpec HeadValueTypeSpec)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), VersionedTypeFriendlyName), "ToHead"))), "("), VersionedTypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var ho = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    foreach (var p in o)";
            yield return "    {";
            if (IsSameType(KeyTypeSpec, HeadKeyTypeSpec, false))
            {
                yield return "        " + "var Key = p.Key;";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "var Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeyTypeSpec.TypeFriendlyName()), "ToHead"))), "(p.Key);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            if (IsSameType(ValueTypeSpec, HeadValueTypeSpec, false))
            {
                yield return "        " + "var Value = p.Value;";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "var Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueTypeSpec.TypeFriendlyName()), "ToHead"))), "(p.Value);"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "        ho.Add(Key, Value);";
            yield return "    }";
            yield return "    return ho;";
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName, String ClassName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "using System;";
            yield return "using System.Collections.Generic;";
            yield return "using System.Linq;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "using "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            var Primitives = GetPrimitives(Schema);
            foreach (var _Line in Combine(Begin(), Primitives))
            {
                yield return _Line;
            }
            yield return "";
            var ComplexTypes = GetComplexTypes(Schema);
            if (NamespaceName == "")
            {
                foreach (var _Line in Combine(Combine(Begin(), "public partial class "), GetEscapedIdentifier(ClassName)))
                {
                    yield return _Line;
                }
                yield return "{";
                foreach (var _Line in Combine(Combine(Begin(), "    "), ComplexTypes))
                {
                    yield return _Line;
                }
                yield return "}";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), "namespace "), GetEscapedIdentifier(NamespaceName)))
                {
                    yield return _Line;
                }
                yield return "{";
                foreach (var _Line in Combine(Combine(Begin(), "    public partial class "), GetEscapedIdentifier(ClassName)))
                {
                    yield return _Line;
                }
                yield return "    {";
                foreach (var _Line in Combine(Combine(Begin(), "        "), ComplexTypes))
                {
                    yield return _Line;
                }
                yield return "    }";
                yield return "}";
            }
            yield return "";
        }
    }
}
