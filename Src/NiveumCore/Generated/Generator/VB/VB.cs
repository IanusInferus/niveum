//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.VB
{
    partial class Templates
    {
        public readonly List<String> Keywords = new List<String> {"AddHandler", "AddressOf", "Alias", "And", "AndAlso", "As", "Boolean", "ByRef", "Byte", "ByVal", "Call", "Case", "Catch", "CBool", "CByte", "CChar", "CDate", "CDec", "CDbl", "Char", "CInt", "Class", "CLng", "CObj", "Const", "Continue", "CSByte", "CShort", "CSng", "CStr", "CType", "CUInt", "CULng", "CUShort", "Date", "Decimal", "Declare", "Default", "Delegate", "Dim", "DirectCast", "Do", "Double", "Each", "Else", "ElseIf", "End", "EndIf", "Enum", "Erase", "Error", "Event", "Exit", "False", "Finally", "For", "Friend", "Function", "Get", "GetType", "GetXMLNamespace", "Global", "GoSub", "GoTo", "Handles", "If", "Implements", "Imports", "In", "Inherits", "Integer", "Interface", "Is", "IsNot", "Let", "Lib", "Like", "Long", "Loop", "Me", "Mod", "Module", "MustInherit", "MustOverride", "MyBase", "MyClass", "Namespace", "Narrowing", "New", "Next", "Not", "Nothing", "NotInheritable", "NotOverridable", "Object", "Of", "On", "Operator", "Option", "Optional", "Or", "OrElse", "Overloads", "Overridable", "Overrides", "ParamArray", "Partial", "Private", "Property", "Protected", "Public", "RaiseEvent", "ReadOnly", "ReDim", "REM", "RemoveHandler", "Resume", "Return", "SByte", "Select", "Set", "Shadows", "Shared", "Short", "Single", "Static", "Step", "Stop", "String", "Structure", "Sub", "SyncLock", "Then", "Throw", "To", "True", "Try", "TryCast", "TypeOf", "Variant", "Wend", "UInteger", "ULong", "UShort", "Using", "When", "While", "Widening", "With", "WithEvents", "WriteOnly", "Xor"};
        public readonly Dictionary<String, String> PrimitiveMapping = new Dictionary<String, String> {{"Unit", "Unit"}, {"Boolean", "System.Boolean"}, {"String", "System.String"}, {"Int", "System.Int32"}, {"Real", "System.Double"}, {"Byte", "System.Byte"}, {"UInt8", "System.Byte"}, {"UInt16", "System.UInt16"}, {"UInt32", "System.UInt32"}, {"UInt64", "System.UInt64"}, {"Int8", "System.SByte"}, {"Int16", "System.Int16"}, {"Int32", "System.Int32"}, {"Int64", "System.Int64"}, {"Float32", "System.Single"}, {"Float64", "System.Double"}, {"Type", "System.Type"}, {"Optional", "Optional"}, {"List", "System.Collections.Generic.List"}, {"Set", "System.Collections.Generic.HashSet"}, {"Map", "System.Collections.Generic.Dictionary"}};
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> SingleLineXmlComment(String Description)
        {
            foreach (var _Line in Combine(Combine(Combine(Begin(), "''' <summary>"), Description), "</summary>"))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> MultiLineXmlComment(List<String> Description)
        {
            yield return "''' <summary>";
            foreach (var _Line in Combine(Combine(Begin(), "''' "), Description))
            {
                yield return _Line;
            }
            yield return "''' </summary>";
        }
        public IEnumerable<String> Primitive(String Name, String PlatformName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "Imports "), GetEscapedIdentifier(Name)), " = "), PlatformName))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> Primitive_Unit()
        {
            yield return "Public Class AliasAttribute";
            yield return "    Inherits Attribute";
            yield return "End Class";
            yield return "Public Class RecordAttribute";
            yield return "    Inherits Attribute";
            yield return "End Class";
            yield return "Public Class TaggedUnionAttribute";
            yield return "    Inherits Attribute";
            yield return "End Class";
            yield return "Public Class TagAttribute";
            yield return "    Inherits Attribute";
            yield return "End Class";
            yield return "Public Class TupleAttribute";
            yield return "    Inherits Attribute";
            yield return "End Class";
            yield return "";
            yield return "<Record()>";
            yield return "Public Structure Unit";
            yield return "End Structure";
        }
        public IEnumerable<String> Primitive_Optional()
        {
            yield return "Public Enum OptionalTag";
            yield return "    NotHasValue = 0";
            yield return "    HasValue = 1";
            yield return "End Enum";
            yield return "<TaggedUnion>";
            yield return "Public Structure [Optional](Of T)";
            yield return "    <Tag> Public _Tag As OptionalTag";
            yield return "";
            yield return "    Public NotHasValue As Unit";
            yield return "    Public HasValue As T";
            yield return "";
            yield return "    Public Shared Function CreateNotHasValue() As [Optional](Of T)";
            yield return "        Return New [Optional](Of T) With {._Tag = OptionalTag.NotHasValue, .NotHasValue = Nothing}";
            yield return "    End Function";
            yield return "    Public Shared Function CreateHasValue(ByVal Value As T) As [Optional](Of T)";
            yield return "        Return New [Optional](Of T) With {._Tag = OptionalTag.HasValue, .HasValue = Value}";
            yield return "    End Function";
            yield return "";
            yield return "    Public ReadOnly Property OnNotHasValue As Boolean";
            yield return "        Get";
            yield return "            Return _Tag = OptionalTag.NotHasValue";
            yield return "        End Get";
            yield return "    End Property";
            yield return "    Public ReadOnly Property OnHasValue As Boolean";
            yield return "        Get";
            yield return "            Return _Tag = OptionalTag.HasValue";
            yield return "        End Get";
            yield return "    End Property";
            yield return "";
            yield return "    Public Shared ReadOnly Property Empty As [Optional](Of T)";
            yield return "        Get";
            yield return "            Return CreateNotHasValue()";
            yield return "        End Get";
            yield return "    End Property";
            yield return "    Public Shared Widening Operator CType(ByVal v As T) As [Optional](Of T)";
            yield return "        If v Is Nothing Then Return CreateNotHasValue()";
            yield return "        Return CreateHasValue(v)";
            yield return "    End Operator";
            yield return "    Public Shared Narrowing Operator CType(ByVal v As [Optional](Of T)) As T";
            yield return "        If v.OnNotHasValue Then Throw New InvalidOperationException()";
            yield return "        Return v.HasValue";
            yield return "    End Operator";
            yield return "    Public Shared Operator =(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean";
            yield return "        Return Equals(Left, Right)";
            yield return "    End Operator";
            yield return "    Public Shared Operator <>(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean";
            yield return "        Return Not Equals(Left, Right)";
            yield return "    End Operator";
            yield return "    Public Shared Operator =(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean";
            yield return "        Return Equals(Left, Right)";
            yield return "    End Operator";
            yield return "    Public Shared Operator <>(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean";
            yield return "        Return Not Equals(Left, Right)";
            yield return "    End Operator";
            yield return "    Public Overrides Function Equals(ByVal obj As Object) As Boolean";
            yield return "        If obj Is Nothing Then Return Equals(Me, Nothing)";
            yield return "        If obj.GetType() <> GetType([Optional](Of T)) Then Return False";
            yield return "        Dim o = CType(obj, [Optional](Of T))";
            yield return "        Return Equals(Me, o)";
            yield return "    End Function";
            yield return "    Public Overrides Function GetHashCode() As Int32";
            yield return "        If OnNotHasValue Then Return 0";
            yield return "        Return HasValue.GetHashCode()";
            yield return "    End Function";
            yield return "";
            yield return "    Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T), ByVal Right As [Optional](Of T)) As Boolean";
            yield return "        If Left.OnNotHasValue AndAlso Right.OnNotHasValue Then Return True";
            yield return "        If Left.OnNotHasValue OrElse Right.OnNotHasValue Then Return False";
            yield return "        Return Left.HasValue.Equals(Right.HasValue)";
            yield return "    End Function";
            yield return "    Private Overloads Shared Function Equals(ByVal Left As [Optional](Of T)?, ByVal Right As [Optional](Of T)?) As Boolean";
            yield return "        If (Not Left.HasValue OrElse Left.Value.OnNotHasValue) AndAlso (Not Right.HasValue OrElse Right.Value.OnNotHasValue) Then Return True";
            yield return "        If Not Left.HasValue OrElse Left.Value.OnNotHasValue OrElse Not Right.HasValue OrElse Right.Value.OnNotHasValue Then Return False";
            yield return "        Return Equals(Left.Value, Right.Value)";
            yield return "    End Function";
            yield return "";
            yield return "    Public ReadOnly Property Value() As T";
            yield return "        Get";
            yield return "            If OnHasValue Then";
            yield return "                Return HasValue";
            yield return "            Else";
            yield return "                Throw New InvalidOperationException()";
            yield return "            End If";
            yield return "        End Get";
            yield return "    End Property";
            yield return "    Public Function ValueOrDefault(ByVal [Default] As T) As T";
            yield return "        If OnHasValue Then";
            yield return "            Return HasValue";
            yield return "        Else";
            yield return "            Return [Default]";
            yield return "        End If";
            yield return "    End Function";
            yield return "";
            yield return "    Public Overrides Function ToString() As String";
            yield return "        If OnHasValue Then";
            yield return "            Return HasValue.ToString()";
            yield return "        Else";
            yield return "            Return \"-\"";
            yield return "        End If";
            yield return "    End Function";
            yield return "End Structure";
        }
        public IEnumerable<String> Alias(AliasDef a)
        {
            var Name = GetEscapedIdentifier(a.TypeFriendlyName()) + GetGenericParameters(a.GenericParameters);
            var Type = GetTypeString(a.Type);
            foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
            {
                yield return _Line;
            }
            yield return "<[Alias]()>";
            foreach (var _Line in Combine(Combine(Begin(), "Public NotInheritable Class "), Name))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Begin(), "    Public Value As "), Type))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "    Public Shared Widening Operator CType(ByVal o As "), Type), ") As "), Name))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        Return New "), GetEscapedIdentifier(Name)), " With {.Value = o}"))
            {
                yield return _Line;
            }
            yield return "    End Operator";
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "    Public Shared Widening Operator CType(ByVal c As "), Name), ") As "), Type))
            {
                yield return _Line;
            }
            yield return "        Return c.Value";
            yield return "    End Operator";
            yield return "End Class";
        }
        public IEnumerable<String> Record(RecordDef r)
        {
            var Name = GetEscapedIdentifier(r.TypeFriendlyName()) + GetGenericParameters(r.GenericParameters);
            foreach (var _Line in Combine(Begin(), GetXmlComment(r.Description)))
            {
                yield return _Line;
            }
            yield return "<Record()>";
            foreach (var _Line in Combine(Combine(Begin(), "Public NotInheritable Class "), Name))
            {
                yield return _Line;
            }
            foreach (var f in r.Fields)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(f.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "Public "), GetEscapedIdentifier(f.Name)), " As "), GetTypeString(f.Type)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "End Class";
        }
        public IEnumerable<String> TaggedUnion(TaggedUnionDef tu)
        {
            var Name = GetEscapedIdentifier(tu.TypeFriendlyName()) + GetGenericParameters(tu.GenericParameters);
            var TagName = GetEscapedIdentifier(tu.TypeFriendlyName() + "Tag");
            foreach (var _Line in Combine(Combine(Begin(), "Public Enum "), TagName))
            {
                yield return _Line;
            }
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), GetEscapedIdentifier(a.Name)), " = "), k))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            yield return "End Enum";
            foreach (var _Line in Combine(Begin(), GetXmlComment(tu.Description)))
            {
                yield return _Line;
            }
            yield return "<TaggedUnion()>";
            foreach (var _Line in Combine(Combine(Begin(), "Public NotInheritable Class "), Name))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Begin(), "    <Tag()> Public _Tag As "), TagName))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "Public "), GetEscapedIdentifier(a.Name)), " As "), GetTypeString(a.Type)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                if ((a.Type.OnTypeRef) && (a.Type.TypeRef.Name == "Unit") && (a.Type.TypeRef.Version == ""))
                {
                    foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "Public Shared Function "), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "() As "), Name))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    Return New "), Name), " With {._Tag = "), TagName), "."), GetEscapedIdentifier(a.Name)), ", ."), GetEscapedIdentifier(a.Name)), " = Nothing}"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "End Function";
                }
                else
                {
                    foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "Public Shared Function "), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "(Value As "), GetTypeString(a.Type)), ") As "), Name))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    Return New "), Name), " With {._Tag = "), TagName), "."), GetEscapedIdentifier(a.Name)), ", ."), GetEscapedIdentifier(a.Name)), " = Value}"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    yield return "    " + "End Function";
                }
            }
            yield return "";
            foreach (var a in tu.Alternatives)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(a.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "Public Readonly Property "), GetEscapedIdentifier(Combine(Combine(Begin(), "On"), a.Name))), " As Boolean"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    Get";
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "        Return _Tag = "), TagName), "."), GetEscapedIdentifier(a.Name)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    End Get";
                yield return "    " + "End Property";
            }
            yield return "End Class";
        }
        public IEnumerable<String> Enum(EnumDef e)
        {
            var Name = GetEscapedIdentifier(e.TypeFriendlyName());
            var ParserName = GetEscapedIdentifier(e.TypeFriendlyName() + "Parser");
            var WriterName = GetEscapedIdentifier(e.TypeFriendlyName() + "Writer");
            foreach (var _Line in Combine(Begin(), GetXmlComment(e.Description)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), "Public Enum "), Name), " As "), GetEnumTypeString(e.UnderlyingType)))
            {
                yield return _Line;
            }
            var k = 0;
            foreach (var l in e.Literals)
            {
                foreach (var _Line in Combine(Begin(), GetXmlComment(l.Description)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), GetEscapedIdentifier(l.Name)), " = "), l.Value))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                k += 1;
            }
            yield return "End Enum";
            foreach (var _Line in Combine(Begin(), GetXmlComment(e.Description)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Begin(), "Public NotInheritable Class "), ParserName))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Private Shared d As New Dictionary(Of String, "), Name), ")"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Shared Sub "), ParserName), "()"))
            {
                yield return _Line;
            }
            var LiteralDict = e.Literals.ToDictionary(l => l.Name);
            var LiteralNameAdds = e.Literals.Select(l => new { Name = l.Name, NameOrDescription = l.Name });
            var LiteralDescriptionAdds = e.Literals.GroupBy(l => l.Description).Where(l => l.Count() == 1).Select(l => l.Single()).Where(l => !LiteralDict.ContainsKey(l.Description)).Select(l => new { Name = l.Name, NameOrDescription = l.Description });
            foreach (var l in LiteralNameAdds.Concat(LiteralDescriptionAdds))
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "d.Add("), GetEscapedStringLiteral(l.NameOrDescription)), ", "), Name), "."), GetEscapedIdentifier(l.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "    End Sub";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Public Shared Function TryParse(ByVal Value As String) As "), Name), "?"))
            {
                yield return _Line;
            }
            yield return "        If d.ContainsKey(Value) Then Return d(Value)";
            yield return "        Return Nothing";
            yield return "    End Function";
            yield return "End Class";
            foreach (var _Line in Combine(Begin(), GetXmlComment(e.Description)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Begin(), "Public NotInheritable Class "), WriterName))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Private Shared d As New Dictionary(Of "), GetEscapedIdentifier(Name)), ", String)"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Shared Sub "), WriterName), "()"))
            {
                yield return _Line;
            }
            foreach (var l in e.Literals)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "If Not d.ContainsKey("), Name), "."), GetEscapedIdentifier(l.Name)), ")) Then d.Add("), Name), "."), GetEscapedIdentifier(l.Name)), ", "), GetEscapedStringLiteral(l.Description)), ")"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
            }
            yield return "    End Sub";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Public Shared Function GetDescription(ByVal Value As "), GetEscapedIdentifier(Name)), ") As String"))
            {
                yield return _Line;
            }
            yield return "        Return d(Value)";
            yield return "    End Function";
            yield return "End Class";
        }
        public IEnumerable<String> ClientCommand(ClientCommandDef c)
        {
            var Request = new RecordDef { Name = c.TypeFriendlyName() + "Request", Version = "", GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
            var Reply = new TaggedUnionDef { Name = c.TypeFriendlyName() + "Reply", Version = "", GenericParameters = new List<VariableDef> { }, Alternatives = c.InParameters, Attributes = c.Attributes, Description = c.Description };
            foreach (var _Line in Combine(Begin(), Record(Request)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), TaggedUnion(Reply)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> ServerCommand(ServerCommandDef c)
        {
            var Event = new RecordDef { Name = c.TypeFriendlyName() + "Event", Version = "", GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
            foreach (var _Line in Combine(Begin(), Record(Event)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> IApplicationServer(List<TypeDef> Commands)
        {
            yield return "Public Interface IApplicationServer";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.TypeFriendlyName();
                    var Description = c.ClientCommand.Description;
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "Sub "), GetEscapedIdentifier(Name)), "(ByVal r As "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), ", ByVal Callback As Action(Of "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), "), ByVal OnFailure As Action(Of Exception))"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                    }
                    else
                    {
                        foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "Function "), GetEscapedIdentifier(Name)), "(ByVal r As "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), ") As "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "Event "), GetEscapedIdentifier(Name)), " As Action(Of "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), ")"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "End Interface";
        }
        public IEnumerable<String> IApplicationClient(List<TypeDef> Commands)
        {
            yield return "Public Interface IApplicationClient";
            yield return "    ReadOnly Property Hash As UInt64";
            yield return "    Sub DequeueCallback(ByVal CommandName As String)";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.TypeFriendlyName();
                    var Description = c.ClientCommand.Description;
                    foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "Sub "), GetEscapedIdentifier(Name)), "(ByVal r As "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), ", ByVal Callback As Action(Of "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), "))"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "Event "), GetEscapedIdentifier(Name)), " As Action(Of "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), ")"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "End Interface";
        }
        public IEnumerable<String> IEventPump(List<TypeDef> Commands)
        {
            yield return "Public Interface IEventPump";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    if (c.ServerCommand.Version != "") { continue; }
                    var Name = c.ServerCommand.TypeFriendlyName();
                    var Description = c.ServerCommand.Description;
                    foreach (var _Line in Combine(Begin(), GetXmlComment(Description)))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ReadOnly Property "), GetEscapedIdentifier(Name)), " As Action(Of "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), ")"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "End Interface";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName)
        {
            yield return "'==========================================================================";
            yield return "'";
            yield return "'  Notice:      This file is automatically generated.";
            yield return "'               Please don't modify this file.";
            yield return "'";
            yield return "'==========================================================================";
            yield return "";
            yield return "Imports System";
            yield return "Imports System.Collections.Generic";
            foreach (var _Line in Combine(Combine(Begin(), "Imports "), Schema.Imports))
            {
                yield return _Line;
            }
            var Primitives = GetPrimitives(Schema);
            foreach (var _Line in Combine(Begin(), Primitives))
            {
                yield return _Line;
            }
            yield return "";
            var ComplexTypes = GetComplexTypes(Schema);
            if (NamespaceName == "")
            {
                foreach (var _Line in Combine(Begin(), ComplexTypes))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), "Namespace "), GetEscapedIdentifier(NamespaceName)))
                {
                    yield return _Line;
                }
                foreach (var _Line in Combine(Combine(Begin(), "    "), ComplexTypes))
                {
                    yield return _Line;
                }
                yield return "End Namespace";
            }
            yield return "";
        }
    }
}
