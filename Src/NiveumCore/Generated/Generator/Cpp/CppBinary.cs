//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.CppBinary
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> BinarySerializationServer(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "class BinarySerializationServer final";
            yield return "{";
            yield return "private:";
            yield return "    struct Hash";
            yield return "    {";
            yield return "        std::size_t operator() (const std::pair<std::u16string, std::uint32_t> &p) const";
            yield return "        {";
            yield return "            return std::hash<std::u16string>()(std::get<0>(p)) ^ std::get<1>(p);";
            yield return "        }";
            yield return "    };";
            yield return "    std::unordered_map<std::pair<std::u16string, std::uint32_t>, std::function<std::vector<std::uint8_t>(std::shared_ptr<IApplicationServer>, std::vector<std::uint8_t>)>, Hash> ClientCommands;";
            yield return "    std::unordered_map<std::pair<std::u16string, std::uint32_t>, std::function<void(std::shared_ptr<IApplicationServer>, std::vector<std::uint8_t>, std::function<void(std::vector<std::uint8_t>)>, std::function<void(const std::exception &)>)>, Hash> AsyncClientCommands;";
            yield return "";
            yield return "public:";
            yield return "    BinarySerializationServer()";
            yield return "    {";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "AsyncClientCommands[std::pair<std::u16string, std::uint32_t>("), CommandNameString), ", 0x"), CommandHash), ")] = [](std::shared_ptr<IApplicationServer> s, std::vector<std::uint8_t> p, std::function<void(std::vector<std::uint8_t>)> Callback, std::function<void(const std::exception &)> OnFailure) -> void"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "{";
                        yield return "        " + "    ByteArrayStream bas;";
                        yield return "        " + "    bas.WriteBytes(p);";
                        yield return "        " + "    bas.SetPosition(0);";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto Request = BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromBinary"))), "(bas);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s->"), GetEscapedIdentifier(Name)), "(Request, [=]("), ReplyTypeString), " Reply)"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    {";
                        yield return "        " + "        ByteArrayStream bas;";
                        yield return "        " + "        bas.SetPosition(0);";
                        yield return "        " + "        bas.SetLength(0);";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToBinary"))), "(bas, Reply);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "        bas.SetPosition(0);";
                        yield return "        " + "        Callback(bas.ReadBytes(bas.GetLength()));";
                        yield return "        " + "    }, OnFailure);";
                        yield return "        " + "};";
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ClientCommands[std::pair<std::u16string, std::uint32_t>("), CommandNameString), ", 0x"), CommandHash), ")] = [](std::shared_ptr<IApplicationServer> s, std::vector<std::uint8_t> p) -> std::vector<std::uint8_t>"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "{";
                        yield return "        " + "    ByteArrayStream bas;";
                        yield return "        " + "    bas.WriteBytes(p);";
                        yield return "        " + "    bas.SetPosition(0);";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto Request = BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromBinary"))), "(bas);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto Reply = s->"), GetEscapedIdentifier(Name)), "(Request);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    bas.SetPosition(0);";
                        yield return "        " + "    bas.SetLength(0);";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToBinary"))), "(bas, Reply);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    bas.SetPosition(0);";
                        yield return "        " + "    return bas.ReadBytes(bas.GetLength());";
                        yield return "        " + "};";
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    std::uint64_t Hash()";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "";
            yield return "    Boolean HasCommand(std::u16string CommandName, std::uint32_t CommandHash)";
            yield return "    {";
            yield return "        return ClientCommands.count(std::pair<String, std::uint32_t>(CommandName, CommandHash)) > 0;";
            yield return "    }";
            yield return "    Boolean HasCommandAsync(std::u16string CommandName, std::uint32_t CommandHash)";
            yield return "    {";
            yield return "        return AsyncClientCommands.count(std::pair<String, std::uint32_t>(CommandName, CommandHash)) > 0;";
            yield return "    }";
            yield return "";
            yield return "    std::vector<std::uint8_t> ExecuteCommand(std::shared_ptr<IApplicationServer> s, std::u16string CommandName, std::uint32_t CommandHash, std::vector<std::uint8_t> Parameters)";
            yield return "    {";
            yield return "        auto cmd = ClientCommands[std::pair<std::u16string, std::uint32_t>(CommandName, CommandHash)];";
            yield return "        return cmd(s, Parameters);";
            yield return "    }";
            yield return "    void ExecuteCommandAsync(std::shared_ptr<IApplicationServer> s, std::u16string CommandName, std::uint32_t CommandHash, std::vector<std::uint8_t> Parameters, std::function<void(std::vector<std::uint8_t>)> Callback, std::function<void(const std::exception &)> OnFailure)";
            yield return "    {";
            yield return "        auto cmd = AsyncClientCommands[std::pair<std::u16string, std::uint32_t>(CommandName, CommandHash)];";
            yield return "        cmd(s, Parameters, Callback, OnFailure);";
            yield return "    }";
            yield return "};";
            yield return "class BinarySerializationServerEventDispatcher final";
            yield return "{";
            yield return "public:";
            yield return "    BinarySerializationServerEventDispatcher(std::shared_ptr<IApplicationServer> s)";
            yield return "    {";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "s->"), GetEscapedIdentifier(Name)), " = [=]("), EventTypeString), " e)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "{";
                    yield return "        " + "    ByteArrayStream bas;";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "ToBinary"))), "(bas, e);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    bas.SetPosition(0);";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if (ServerEvent != nullptr) { ServerEvent("), CommandNameString), ", 0x"), CommandHash), ", bas.ReadBytes(bas.GetLength())); }"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "};";
                }
            }
            yield return "    }";
            yield return "";
            yield return "    /// (std::u16string CommandName, std::uint32_t CommandHash, std::vector<std::uint8_t> Parameters) -> void";
            yield return "    typedef std::function<void(std::u16string, std::uint32_t, std::vector<std::uint8_t>)> ServerEventDelegate;";
            yield return "    ServerEventDelegate ServerEvent;";
            yield return "};";
        }
        public IEnumerable<String> IBinarySender()
        {
            yield return "class IBinarySender";
            yield return "{";
            yield return "public:";
            yield return "    virtual ~IBinarySender() {}";
            yield return "";
            yield return "    virtual void Send(std::u16string CommandName, std::uint32_t CommandHash, std::vector<std::uint8_t> Parameters, std::function<void(std::u16string)> OnError) = 0;";
            yield return "};";
        }
        public IEnumerable<String> BinarySerializationClient(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "class BinarySerializationClient final";
            yield return "{";
            yield return "private:";
            yield return "    struct Hash";
            yield return "    {";
            yield return "        std::size_t operator() (const std::pair<std::u16string, std::uint32_t> &p) const";
            yield return "        {";
            yield return "            return std::hash<std::u16string>()(std::get<0>(p)) ^ std::get<1>(p);";
            yield return "        }";
            yield return "    };";
            yield return "";
            yield return "    class ClientCommandTriple";
            yield return "    {";
            yield return "    public:";
            yield return "        std::uint32_t Hash;";
            yield return "        std::function<void(std::vector<std::uint8_t>)> Callback;";
            yield return "        std::function<void(std::u16string)> OnError;";
            yield return "    };";
            yield return "    class ApplicationClient : public IApplicationClient";
            yield return "    {";
            yield return "    public:";
            yield return "        std::shared_ptr<IBinarySender> s;";
            yield return "        std::unordered_map<std::u16string, std::shared_ptr<std::queue<ClientCommandTriple>>> ClientCommandCallbacks;";
            yield return "";
            yield return "        std::uint64_t Hash()";
            yield return "        {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "            return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "        }";
            yield return "";
            yield return "        void DequeueCallback(std::u16string CommandName)";
            yield return "        {";
            yield return "            ClientCommandCallbacks[CommandName]->pop();";
            yield return "        }";
            yield return "        void NotifyErrorCommand(std::u16string CommandName, std::u16string Message)";
            yield return "        {";
            yield return "            auto q = ClientCommandCallbacks[CommandName];";
            yield return "            auto t = q->front();";
            yield return "            q->pop();";
            yield return "            t.OnError(Message);";
            yield return "        }";
            yield return "";
            yield return "    private:";
            yield return "        void AddCallback(std::u16string CommandName, std::uint32_t CommandHash, std::function<void(std::vector<std::uint8_t>)> Callback, std::function<void(std::u16string)> OnError)";
            yield return "        {";
            yield return "            if (ClientCommandCallbacks.count(CommandName) > 0)";
            yield return "            {";
            yield return "                ClientCommandCallbacks[CommandName]->push({CommandHash, Callback, OnError});";
            yield return "            }";
            yield return "            else";
            yield return "            {";
            yield return "                auto q = std::make_shared<std::queue<ClientCommandTriple>>();";
            yield return "                q->push({CommandHash, Callback, OnError});";
            yield return "                ClientCommandCallbacks[CommandName] = q;";
            yield return "            }";
            yield return "        }";
            yield return "";
            yield return "    public:";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "void "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " r, std::function<void("), ReplyTypeString), ")> Callback, std::function<void(std::u16string)> OnError = nullptr)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "{";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    if (OnError == nullptr) { OnError = [GlobalErrorHandler = this->GlobalErrorHandler](std::u16string Message) { GlobalErrorHandler("), CommandNameString), ", Message); }; }"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    ByteArrayStream bas;";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "ToBinary"))), "(bas, r);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    bas.SetPosition(0);";
                    yield return "        " + "    auto Request = bas.ReadBytes(bas.GetLength());";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    AddCallback("), CommandNameString), ", 0x"), CommandHash), ", [=](std::vector<std::uint8_t> Parameters)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    {";
                    yield return "        " + "        ByteArrayStream bas;";
                    yield return "        " + "        bas.WriteBytes(Parameters);";
                    yield return "        " + "        bas.SetPosition(0);";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "        auto Reply = BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "FromBinary"))), "(bas);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "        Callback(Reply);";
                    yield return "        " + "    }, OnError);";
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s->Send("), CommandNameString), ", 0x"), CommandHash), ", Request, OnError);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "}";
                }
            }
            yield return "    };";
            yield return "";
            yield return "    std::shared_ptr<ApplicationClient> c;";
            yield return "    std::unordered_map<std::pair<std::u16string, std::uint32_t>, std::function<void(std::vector<std::uint8_t>)>, Hash> ServerCommands;";
            yield return "";
            yield return "private:";
            yield return "    static std::string utf16ToSystem(std::u16string us)";
            yield return "    {";
            yield return "        std::string s;";
            yield return "        s.reserve(us.size() * 2);";
            yield return "        std::mbstate_t State{};";
            yield return "        char cOut[MB_LEN_MAX]{};";
            yield return "        for (char16_t c16 : us)";
            yield return "        {";
            yield return "            std::size_t OutCharCount = std::c16rtomb(cOut, c16, &State);";
            yield return "            if (OutCharCount == static_cast<std::size_t>(-1))";
            yield return "            {";
            yield return "                throw std::logic_error(\"InvalidChar\");";
            yield return "            }";
            yield return "            s.append(cOut, OutCharCount);";
            yield return "        }";
            yield return "        return s;";
            yield return "    }";
            yield return "";
            yield return "public:";
            yield return "    BinarySerializationClient(std::shared_ptr<IBinarySender> s)";
            yield return "    {";
            yield return "        c = std::make_shared<ApplicationClient>();";
            yield return "        c->GlobalErrorHandler = [](std::u16string CommandName, std::u16string Message)";
            yield return "        {";
            yield return "            throw std::runtime_error(utf16ToSystem(CommandName) + \": \" + utf16ToSystem(Message));";
            yield return "        };";
            yield return "        c->s = s;";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "ServerCommands[std::pair<String, std::uint32_t>("), CommandNameString), ", 0x"), CommandHash), ")] = [&](std::vector<std::uint8_t> Parameters)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "{";
                    yield return "        " + "    ByteArrayStream bas;";
                    yield return "        " + "    bas.WriteBytes(Parameters);";
                    yield return "        " + "    bas.SetPosition(0);";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto e = BinaryTranslator::"), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "FromBinary"))), "(bas);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "    if (c->"), GetEscapedIdentifier(Name)), " != nullptr)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    {";
                    foreach (var _Line in Combine(Combine(Combine(Begin(), "        c->"), GetEscapedIdentifier(Name)), "(e);"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    yield return "        " + "    }";
                    yield return "        " + "};";
                }
            }
            yield return "    }";
            yield return "";
            yield return "    std::shared_ptr<IApplicationClient> GetApplicationClient()";
            yield return "    {";
            yield return "        return c;";
            yield return "    }";
            yield return "";
            yield return "    void HandleResult(std::u16string CommandName, std::uint32_t CommandHash, std::vector<std::uint8_t> Parameters)";
            yield return "    {";
            yield return "        if (c->ClientCommandCallbacks.count(CommandName) > 0)";
            yield return "        {";
            yield return "            auto q = c->ClientCommandCallbacks[CommandName];";
            yield return "            if (q->size() == 0)";
            yield return "            {";
            yield return "                throw std::logic_error(\"InvalidOperation: \" + utf16ToSystem(CommandName));";
            yield return "            }";
            yield return "            auto t = q->front();";
            yield return "            if (t.Hash != CommandHash)";
            yield return "            {";
            yield return "                throw std::logic_error(\"InvalidOperation: \" + utf16ToSystem(CommandName));";
            yield return "            }";
            yield return "            q->pop();";
            yield return "            auto Callback = t.Callback;";
            yield return "            Callback(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        auto p = std::pair<std::u16string, std::uint32_t>(CommandName, CommandHash);";
            yield return "        if (ServerCommands.count(p) > 0)";
            yield return "        {";
            yield return "            auto a = ServerCommands[p];";
            yield return "            a(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        throw std::logic_error(\"InvalidOperation: \" + utf16ToSystem(CommandName));";
            yield return "    }";
            yield return "};";
        }
        public IEnumerable<String> Streams()
        {
            yield return "class IReadableStream";
            yield return "{";
            yield return "public:";
            yield return "    virtual std::uint8_t ReadByte() = 0;";
            yield return "    virtual std::vector<std::uint8_t> ReadBytes(std::size_t Size) = 0;";
            yield return "";
            yield return "    Unit ReadUnit()";
            yield return "    {";
            yield return "        return Unit();";
            yield return "    }";
            yield return "    Boolean ReadBoolean()";
            yield return "    {";
            yield return "        return ReadByte() != 0;";
            yield return "    }";
            yield return "";
            yield return "    std::uint8_t ReadUInt8()";
            yield return "    {";
            yield return "        return ReadByte();";
            yield return "    }";
            yield return "    std::uint16_t ReadUInt16()";
            yield return "    {";
            yield return "        std::uint16_t o;";
            yield return "        o = static_cast<std::uint16_t>(static_cast<std::uint16_t>(ReadByte()) & static_cast<std::uint16_t>(0xFF));";
            yield return "        o = static_cast<std::uint16_t>(o | ((static_cast<std::uint16_t>(ReadByte()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    std::uint32_t ReadUInt32()";
            yield return "    {";
            yield return "        std::uint32_t o;";
            yield return "        o = static_cast<std::uint32_t>(ReadByte()) & 0xFF;";
            yield return "        o = o | ((static_cast<std::uint32_t>(ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | ((static_cast<std::uint32_t>(ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | ((static_cast<std::uint32_t>(ReadByte()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    std::uint64_t ReadUInt64()";
            yield return "    {";
            yield return "        std::uint64_t o;";
            yield return "        o = static_cast<std::uint64_t>(ReadByte()) & 0xFF;";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 24);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 32);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 40);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 48);";
            yield return "        o = o | ((static_cast<std::uint64_t>(ReadByte()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "    std::int8_t ReadInt8()";
            yield return "    {";
            yield return "        return static_cast<std::int8_t>(ReadByte());";
            yield return "    }";
            yield return "    std::int16_t ReadInt16()";
            yield return "    {";
            yield return "        std::int16_t o;";
            yield return "        o = static_cast<std::int16_t>(static_cast<std::int16_t>(ReadByte()) & static_cast<std::int16_t>(0xFF));";
            yield return "        o = static_cast<std::int16_t>(o | ((static_cast<std::int16_t>(ReadByte()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    std::int32_t ReadInt32()";
            yield return "    {";
            yield return "        std::int32_t o;";
            yield return "        o = static_cast<std::int32_t>(ReadByte()) & 0xFF;";
            yield return "        o = o | ((static_cast<std::int32_t>(ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | ((static_cast<std::int32_t>(ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | ((static_cast<std::int32_t>(ReadByte()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    std::int64_t ReadInt64()";
            yield return "    {";
            yield return "        std::int64_t o;";
            yield return "        o = static_cast<std::int64_t>(ReadByte()) & 0xFF;";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 24);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 32);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 40);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 48);";
            yield return "        o = o | ((static_cast<std::int64_t>(ReadByte()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "";
            yield return "    float ReadFloat32()";
            yield return "    {";
            yield return "        std::int32_t i = ReadInt32();";
            yield return "        return *reinterpret_cast<float *>(&i);";
            yield return "    }";
            yield return "    double ReadFloat64()";
            yield return "    {";
            yield return "        std::int64_t i = ReadInt64();";
            yield return "        return *reinterpret_cast<double *>(&i);";
            yield return "    }";
            yield return "";
            yield return "    String ReadString()";
            yield return "    {";
            yield return "        std::int32_t Length = ReadInt32();";
            yield return "        int n = static_cast<int>(Length) / 2;";
            yield return "        std::u16string v;";
            yield return "        for (int k = 0; k < n; k += 1)";
            yield return "        {";
            yield return "            v.push_back(static_cast<char16_t>(ReadUInt16()));";
            yield return "        }";
            yield return "        return v;";
            yield return "    }";
            yield return "";
            yield return "    virtual ~IReadableStream() {}";
            yield return "};";
            yield return "";
            yield return "class IWritableStream";
            yield return "{";
            yield return "public:";
            yield return "    virtual void WriteByte(std::uint8_t b) = 0;";
            yield return "    virtual void WriteBytes(const std::vector<std::uint8_t> & l) = 0;";
            yield return "";
            yield return "    void WriteUnit(Unit v)";
            yield return "    {";
            yield return "    }";
            yield return "    void WriteBoolean(Boolean v)";
            yield return "    {";
            yield return "        if (v)";
            yield return "        {";
            yield return "            WriteByte(0xFF);";
            yield return "        }";
            yield return "        else";
            yield return "        {";
            yield return "            WriteByte(0);";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    void WriteUInt8(std::uint8_t v)";
            yield return "    {";
            yield return "        WriteByte(v);";
            yield return "    }";
            yield return "    void WriteUInt16(std::uint16_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    void WriteUInt32(std::uint32_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 16) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    void WriteUInt64(std::uint64_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 16) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 24) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 32) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 40) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 48) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "    void WriteInt8(std::int8_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v));";
            yield return "    }";
            yield return "    void WriteInt16(std::int16_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    void WriteInt32(std::int32_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 16) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    void WriteInt64(std::int64_t v)";
            yield return "    {";
            yield return "        WriteByte(static_cast<std::uint8_t>(v & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 8) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 16) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 24) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 32) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 40) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 48) & 0xFF));";
            yield return "        WriteByte(static_cast<std::uint8_t>((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "";
            yield return "    void WriteFloat32(float v)";
            yield return "    {";
            yield return "        WriteInt32(*reinterpret_cast<std::int32_t *>(&v));";
            yield return "    }";
            yield return "    void WriteFloat64(double v)";
            yield return "    {";
            yield return "        WriteInt64(*reinterpret_cast<std::int64_t *>(&v));";
            yield return "    }";
            yield return "";
            yield return "    void WriteString(String v)";
            yield return "    {";
            yield return "        WriteInt32(static_cast<std::int32_t>(v.size()) * 2);";
            yield return "        for (auto c : v)";
            yield return "        {";
            yield return "            WriteUInt16(static_cast<std::uint16_t>(c));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    virtual ~IWritableStream() {}";
            yield return "};";
            yield return "";
            yield return "class IReadableWritableStream : public IReadableStream, public IWritableStream";
            yield return "{";
            yield return "public:";
            yield return "    virtual ~IReadableWritableStream() {}";
            yield return "};";
            yield return "";
            yield return "class ByteArrayStream final : public IReadableWritableStream";
            yield return "{";
            yield return "private:";
            yield return "    std::vector<std::uint8_t> Buffer;";
            yield return "    std::size_t Position;";
            yield return "public:";
            yield return "    ByteArrayStream() : Position(0)";
            yield return "    {";
            yield return "    }";
            yield return "";
            yield return "    std::uint8_t ReadByte()";
            yield return "    {";
            yield return "        if (Position + 1 > Buffer.size()) { throw std::out_of_range(\"\"); }";
            yield return "        std::uint8_t b = Buffer[Position];";
            yield return "        Position += 1;";
            yield return "        return b;";
            yield return "    }";
            yield return "    std::vector<std::uint8_t> ReadBytes(std::size_t Size)";
            yield return "    {";
            yield return "        if (Position + Size > Buffer.size()) { throw std::out_of_range(\"\"); }";
            yield return "        std::vector<std::uint8_t> l;";
            yield return "        l.resize(Size, 0);";
            yield return "        if (Size == 0) { return l; }";
            yield return "        std::copy(Buffer.data() + Position, Buffer.data() + Position + Size, l.data());";
            yield return "        Position += Size;";
            yield return "        return l;";
            yield return "    }";
            yield return "";
            yield return "    void WriteByte(std::uint8_t b)";
            yield return "    {";
            yield return "        if (Position + 1 > Buffer.size()) { Buffer.resize(Position + 1, 0); }";
            yield return "        Buffer[Position] = b;";
            yield return "        Position += 1;";
            yield return "    }";
            yield return "    void WriteBytes(const std::vector<std::uint8_t> & l)";
            yield return "    {";
            yield return "        auto Size = l.size();";
            yield return "        if (Size == 0) { return; }";
            yield return "        if (Position + Size > Buffer.size()) { Buffer.resize(Position + Size, 0); }";
            yield return "        std::copy(l.data(), l.data() + Size, Buffer.data() + Position);";
            yield return "        Position += Size;";
            yield return "    }";
            yield return "";
            yield return "    std::size_t GetPosition()";
            yield return "    {";
            yield return "        return Position;";
            yield return "    }";
            yield return "";
            yield return "    void SetPosition(std::size_t Position)";
            yield return "    {";
            yield return "        this->Position = Position;";
            yield return "    }";
            yield return "";
            yield return "    std::size_t GetLength()";
            yield return "    {";
            yield return "        return Buffer.size();";
            yield return "    }";
            yield return "";
            yield return "    void SetLength(std::size_t Length)";
            yield return "    {";
            yield return "        Buffer.resize(Length, 0);";
            yield return "    }";
            yield return "};";
        }
        public IEnumerable<String> BinaryTranslator(Schema Schema, String NamespaceName)
        {
            yield return "class BinaryTranslator final";
            yield return "{";
            yield return "public:";
            foreach (var _Line in Combine(Combine(Begin(), "    "), GetBinaryTranslatorSerializers(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "};";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Unit()
        {
            yield return "static Unit UnitFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadUnit();";
            yield return "}";
            yield return "static void UnitToBinary(IWritableStream &s, Unit v)";
            yield return "{";
            yield return "    s.WriteUnit(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Boolean()
        {
            yield return "static Boolean BooleanFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadBoolean();";
            yield return "}";
            yield return "static void BooleanToBinary(IWritableStream &s, Boolean v)";
            yield return "{";
            yield return "    s.WriteBoolean(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_String()
        {
            yield return "static String StringFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadString();";
            yield return "}";
            yield return "static void StringToBinary(IWritableStream &s, String v)";
            yield return "{";
            yield return "    s.WriteString(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int()
        {
            yield return "static Int IntFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return static_cast<Int>(s.ReadInt32());";
            yield return "}";
            yield return "static void IntToBinary(IWritableStream &s, Int v)";
            yield return "{";
            yield return "    s.WriteInt32(static_cast<Int>(v));";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Real()
        {
            yield return "static Real RealFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadFloat64();";
            yield return "}";
            yield return "static void RealToBinary(IWritableStream &s, Real v)";
            yield return "{";
            yield return "    s.WriteFloat64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Byte()
        {
            yield return "static Byte ByteFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadByte();";
            yield return "}";
            yield return "static void ByteToBinary(IWritableStream &s, Byte v)";
            yield return "{";
            yield return "    s.WriteByte(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt8()
        {
            yield return "static UInt8 UInt8FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadUInt8();";
            yield return "}";
            yield return "static void UInt8ToBinary(IWritableStream &s, UInt8 v)";
            yield return "{";
            yield return "    s.WriteUInt8(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt16()
        {
            yield return "static UInt16 UInt16FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadUInt16();";
            yield return "}";
            yield return "static void UInt16ToBinary(IWritableStream &s, UInt16 v)";
            yield return "{";
            yield return "    s.WriteUInt16(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt32()
        {
            yield return "static UInt32 UInt32FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadUInt32();";
            yield return "}";
            yield return "static void UInt32ToBinary(IWritableStream &s, UInt32 v)";
            yield return "{";
            yield return "    s.WriteUInt32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt64()
        {
            yield return "static UInt64 UInt64FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadUInt64();";
            yield return "}";
            yield return "static void UInt64ToBinary(IWritableStream &s, UInt64 v)";
            yield return "{";
            yield return "    s.WriteUInt64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int8()
        {
            yield return "static Int8 Int8FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadInt8();";
            yield return "}";
            yield return "static void Int8ToBinary(IWritableStream &s, Int8 v)";
            yield return "{";
            yield return "    s.WriteInt8(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int16()
        {
            yield return "static Int16 Int16FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadInt16();";
            yield return "}";
            yield return "static void Int16ToBinary(IWritableStream &s, Int16 v)";
            yield return "{";
            yield return "    s.WriteInt16(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int32()
        {
            yield return "static Int32 Int32FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadInt32();";
            yield return "}";
            yield return "static void Int32ToBinary(IWritableStream &s, Int32 v)";
            yield return "{";
            yield return "    s.WriteInt32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int64()
        {
            yield return "static Int64 Int64FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadInt64();";
            yield return "}";
            yield return "static void Int64ToBinary(IWritableStream &s, Int64 v)";
            yield return "{";
            yield return "    s.WriteInt64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float32()
        {
            yield return "static Float32 Float32FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadFloat32();";
            yield return "}";
            yield return "static void Float32ToBinary(IWritableStream &s, Float32 v)";
            yield return "{";
            yield return "    s.WriteFloat32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float64()
        {
            yield return "static Float64 Float64FromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    return s.ReadFloat64();";
            yield return "}";
            yield return "static void Float64ToBinary(IWritableStream &s, Float64 v)";
            yield return "{";
            yield return "    s.WriteFloat64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Type()
        {
            yield return "static Type TypeFromBinary(IReadableStream &s)";
            yield return "{";
            yield return "    throw std::logic_error(\"NotSupported\");";
            yield return "}";
            yield return "static void TypeToBinary(IWritableStream &s, Type v)";
            yield return "{";
            yield return "    throw std::logic_error(\"NotSupported\");";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Alias(AliasDef a, String NamespaceName)
        {
            var TypeString = GetTypeString(a.GetTypeSpec(), NamespaceName);
            var Name = a.GetTypeSpec().SimpleName(NamespaceName);
            var ValueSimpleName = a.Type.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    class "), GetEscapedIdentifier(Name)), " o;"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    o.Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream &s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, o.Value);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Record(RecordDef r, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Record(String Name, String TypeString, List<VariableDef> Fields, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto o = std::make_shared<"), TypeString), "::element_type>();"))
            {
                yield return _Line;
            }
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "o->"), GetEscapedIdentifier(f.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream &s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o->"), GetEscapedIdentifier(f.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(TaggedUnionDef tu, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName, ForceAsEnum: true), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName, NoElaboratedTypeSpecifier: true, ForceAsEnum: true), tu.Alternatives, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(String Name, String TypeString, String TagName, String TagTypeString, String SimpleTagTypeString, List<VariableDef> Alternatives, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(TagName, TagTypeString, "Int", "Int", NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    auto o = std::make_shared<"), TypeString), "::element_type>();"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    o->_Tag = "), GetEscapedIdentifier(Combine(Combine(Begin(), TagName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o->_Tag == "), SimpleTagTypeString), "::"), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    o->"), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return o;";
                yield return "    " + "}";
            }
            yield return "    throw std::logic_error(\"InvalidOperation\");";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream &s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), TagName), "ToBinary"))), "(s, o->_Tag);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o->_Tag == "), SimpleTagTypeString), "::"), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o->"), GetEscapedIdentifier(a.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return;";
                yield return "    " + "}";
            }
            yield return "    throw std::logic_error(\"InvalidOperation\");";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Enum(EnumDef e, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Enum(String Name, String TypeString, String UnderlyingSimpleName, String UnderlyingType, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return static_cast<"), TypeString), ">("), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream &s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "ToBinary"))), "(s, static_cast<"), UnderlyingType), ">(o));"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_ClientCommand(ClientCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Request", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Request", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(GetSuffixedTypeName(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeName(c.Name, c.Version, "ReplyTag", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName, ForceAsEnum: true), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName, NoElaboratedTypeSpecifier: true, ForceAsEnum: true), c.InParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_ServerCommand(ServerCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Event", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Event", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Tuple(TypeSpec tp, String NamespaceName)
        {
            var SimpleName = tp.SimpleName(NamespaceName);
            var TypeString = GetTypeString(tp, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            var ItemNames = new List<String>{};
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "auto "), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    ItemNames.Add("Item" + (k).ToString(System.Globalization.CultureInfo.InvariantCulture));
                    k += 1;
                }
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return std::make_tuple("), String.Join(", ", ItemNames)), ");"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream &s, "), TypeString), " t)"))
            {
                yield return _Line;
            }
            yield return "{";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "ToBinary"))), "(s, std::get<"), k), ">(t));"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Optional(TypeSpec o, String NamespaceName)
        {
            var ElementType = o.GenericTypeSpec.ParameterValues.Single();
            var SimpleName = o.SimpleName(NamespaceName);
            var TypeString = GetTypeString(o, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    auto Tag = IntFromBinary(s);";
            yield return "    if (Tag == 0)";
            yield return "    {";
            yield return "        return {};";
            yield return "    }";
            yield return "    else";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementType.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream &s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    if (!o.has_value())";
            yield return "    {";
            yield return "        IntToBinary(s, 0);";
            yield return "    }";
            yield return "    else";
            yield return "    {";
            yield return "        IntToBinary(s, 1);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementType.SimpleName(NamespaceName)), "ToBinary"))), "(s, o.value());"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_List(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementType = l.GenericTypeSpec.ParameterValues.Single();
            var ElementSimpleName = ElementType.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(IntFromBinary(s));";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "auto l = s.ReadBytes(Length);";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), TypeString), " l;"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "l.reserve(static_cast<std::size_t>(Length));";
                yield return "    " + "for (int k = 0; k < Length; k += 1)";
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    l.push_back("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream &s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(l.size());";
            yield return "    IntToBinary(s, static_cast<Int>(Length));";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "s.WriteBytes(l);";
            }
            else
            {
                yield return "    " + "for (auto e : l)";
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Set(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(IntFromBinary(s));";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), TypeString), " l;"))
            {
                yield return _Line;
            }
            yield return "    l.reserve(static_cast<std::size_t>(Length));";
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.insert("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream &s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(l.size());";
            yield return "    IntToBinary(s, static_cast<Int>(Length));";
            yield return "    for (auto e : l)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Map(TypeSpec l, String NamespaceName)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var KeySimpleName = gp[0].SimpleName(NamespaceName);
            var ValueSimpleName = gp[1].SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream &s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(IntFromBinary(s));";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), TypeString), " l;"))
            {
                yield return _Line;
            }
            yield return "    l.reserve(static_cast<std::size_t>(Length));";
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        auto Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l[Key] = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream &s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = static_cast<int>(l.size());";
            yield return "    IntToBinary(s, static_cast<Int>(Length));";
            yield return "    for (auto p : l)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "ToBinary"))), "(s, std::get<0>(p));"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, std::get<1>(p));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "#pragma once";
            yield return "";
            yield return "#include <cstdint>";
            yield return "#include <cuchar>";
            yield return "#include <climits>";
            yield return "#include <string>";
            yield return "#include <vector>";
            yield return "#include <queue>";
            yield return "#include <unordered_set>";
            yield return "#include <unordered_map>";
            yield return "#include <tuple>";
            yield return "#include <memory>";
            yield return "#include <functional>";
            yield return "#include <stdexcept>";
            foreach (var _Line in Combine(Combine(Begin(), "#include "), Schema.Imports.Where(i => IsInclude(i))))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), GetTypes(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
