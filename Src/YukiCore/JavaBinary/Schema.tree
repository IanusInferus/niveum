$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构Java二进制模板数据
      Version:     2012.12.13.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name Main
            //Parameters: ${Header}, ${ClassName}, ${PackageName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}

                    package ${PackageName};
                    import ${Imports}.*;
                    ${Primitives}

                    public class ${ClassName}
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

        Template
            Name Streams
            Value
                $String
                    public static abstract class IReadableStream
                    {
                        public abstract byte ReadByte();
                        public abstract byte[] ReadBytes(int Size);

                        public Unit ReadUnit()
                        {
                            return new Unit();
                        }
                        public Boolean ReadBoolean()
                        {
                            return ReadByte() != 0;
                        }

                        public byte ReadUInt8()
                        {
                            return ReadByte();
                        }
                        public short ReadUInt16()
                        {
                            short o;
                            o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));
                            o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));
                            return o;
                        }
                        public int ReadUInt32()
                        {
                            int o;
                            o = (int) (this.ReadInt8()) & 0xFF;
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);
                            return o;
                        }
                        public long ReadUInt64()
                        {
                            long o;
                            o = (long) (this.ReadInt8()) & 0xFF;
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);
                            return o;
                        }
                        public byte ReadInt8()
                        {
                            return ReadByte();
                        }
                        public short ReadInt16()
                        {
                            short o;
                            o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));
                            o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));
                            return o;
                        }
                        public int ReadInt32()
                        {
                            int o;
                            o = (int) (this.ReadInt8()) & 0xFF;
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);
                            o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);
                            return o;
                        }
                        public long ReadInt64()
                        {
                            long o;
                            o = (long) (this.ReadInt8()) & 0xFF;
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);
                            o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);
                            return o;
                        }

                        public float ReadFloat32()
                        {
                            return Float.intBitsToFloat(this.ReadInt32());
                        }
                        public double ReadFloat64()
                        {
                            return Double.longBitsToDouble(this.ReadInt64());
                        }

                        public String ReadString()
                        {
                            int n = this.ReadInt32();
                            byte[] s = new byte[n];
                            for (int k = 0; k < n; k += 1)
                            {
                                s[k] = this.ReadInt8();
                            }
                            try
                            {
                                return new String(s, "UTF-16LE");
                            }
                            catch (java.io.UnsupportedEncodingException ex)
                            {
                                throw new RuntimeException(ex);
                            }
                        }
                    };

                    public static abstract class IWritableStream
                    {
                        public abstract void WriteByte(byte b);
                        public abstract void WriteBytes(byte[] l);

                        public void WriteUnit(Unit v)
                        {
                        }
                        public void WriteBoolean(boolean v)
                        {
                            if (v)
                            {
                                WriteByte((byte)(0xFF));
                            }
                            else
                            {
                                WriteByte((byte)(0));
                            }
                        }

                        public void WriteUInt8(byte v)
                        {
                            WriteByte(v);
                        }
                        public void WriteUInt16(short v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                        }
                        public void WriteUInt32(int v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                            WriteByte((byte)((v >> 16) & 0xFF));
                            WriteByte((byte)((v >> 24) & 0xFF));
                        }
                        public void WriteUInt64(long v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                            WriteByte((byte)((v >> 16) & 0xFF));
                            WriteByte((byte)((v >> 24) & 0xFF));
                            WriteByte((byte)((v >> 32) & 0xFF));
                            WriteByte((byte)((v >> 40) & 0xFF));
                            WriteByte((byte)((v >> 48) & 0xFF));
                            WriteByte((byte)((v >> 56) & 0xFF));
                        }
                        public void WriteInt8(byte v)
                        {
                            WriteByte((byte)(v));
                        }
                        public void WriteInt16(short v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                        }
                        public void WriteInt32(int v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                            WriteByte((byte)((v >> 16) & 0xFF));
                            WriteByte((byte)((v >> 24) & 0xFF));
                        }
                        public void WriteInt64(long v)
                        {
                            WriteByte((byte)(v & 0xFF));
                            WriteByte((byte)((v >> 8) & 0xFF));
                            WriteByte((byte)((v >> 16) & 0xFF));
                            WriteByte((byte)((v >> 24) & 0xFF));
                            WriteByte((byte)((v >> 32) & 0xFF));
                            WriteByte((byte)((v >> 40) & 0xFF));
                            WriteByte((byte)((v >> 48) & 0xFF));
                            WriteByte((byte)((v >> 56) & 0xFF));
                        }

                        public void WriteFloat32(float v)
                        {
                            WriteInt32(Float.floatToIntBits(v));
                        }
                        public void WriteFloat64(double v)
                        {
                            WriteInt64(Double.doubleToLongBits(v));
                        }

                        public void WriteString(String v)
                        {
                            byte[] l;
                            try
                            {
                                l = v.getBytes("UTF-16LE");
                            }
                            catch (java.io.UnsupportedEncodingException ex)
                            {
                                throw new RuntimeException(ex);
                            }
                            WriteInt32(l.length);
                            for (int k = 0; k < l.length; k += 1)
                            {
                                WriteByte(l[k]);
                            }
                        }
                    };
        Template
            Name BinaryTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    public static final class BinaryTranslator
                    {
                        ${Serializers}
                    };
        Template
            Name BinaryTranslator_Primitive_Unit
            Value
                $String
                    public static Unit UnitFromBinary(IReadableStream s)
                    {
                        return s.ReadUnit();
                    }
                    public static void UnitToBinary(IWritableStream s, Unit v)
                    {
                        s.WriteUnit(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Boolean
            Value
                $String
                    public static Boolean BooleanFromBinary(IReadableStream s)
                    {
                        return s.ReadBoolean();
                    }
                    public static void BooleanToBinary(IWritableStream s, Boolean v)
                    {
                        s.WriteBoolean(v);
                    }
        Template
            Name BinaryTranslator_Primitive_String
            Value
                $String
                    public static String StringFromBinary(IReadableStream s)
                    {
                        return s.ReadString();
                    }
                    public static void StringToBinary(IWritableStream s, String v)
                    {
                        s.WriteString(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int
            Value
                $String
                    public static int IntFromBinary(IReadableStream s)
                    {
                        return s.ReadInt32();
                    }
                    public static void IntToBinary(IWritableStream s, int v)
                    {
                        s.WriteInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Real
            Value
                $String
                    public static double RealFromBinary(IReadableStream s)
                    {
                        return s.ReadFloat64();
                    }
                    public static void RealToBinary(IWritableStream s, double v)
                    {
                        s.WriteFloat64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Byte
            Value
                $String
                    public static byte ByteFromBinary(IReadableStream s)
                    {
                        return s.ReadByte();
                    }
                    public static void ByteToBinary(IWritableStream s, byte v)
                    {
                        s.WriteByte(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt8
            Value
                $String
                    public static byte UInt8FromBinary(IReadableStream s)
                    {
                        return s.ReadUInt8();
                    }
                    public static void UInt8ToBinary(IWritableStream s, byte v)
                    {
                        s.WriteUInt8(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt16
            Value
                $String
                    public static short UInt16FromBinary(IReadableStream s)
                    {
                        return s.ReadUInt16();
                    }
                    public static void UInt16ToBinary(IWritableStream s, short v)
                    {
                        s.WriteUInt16(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt32
            Value
                $String
                    public static int UInt32FromBinary(IReadableStream s)
                    {
                        return s.ReadUInt32();
                    }
                    public static void UInt32ToBinary(IWritableStream s, int v)
                    {
                        s.WriteUInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_UInt64
            Value
                $String
                    public static long UInt64FromBinary(IReadableStream s)
                    {
                        return s.ReadUInt64();
                    }
                    public static void UInt64ToBinary(IWritableStream s, long v)
                    {
                        s.WriteUInt64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int8
            Value
                $String
                    public static byte Int8FromBinary(IReadableStream s)
                    {
                        return s.ReadInt8();
                    }
                    public static void Int8ToBinary(IWritableStream s, byte v)
                    {
                        s.WriteInt8(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int16
            Value
                $String
                    public static short Int16FromBinary(IReadableStream s)
                    {
                        return s.ReadInt16();
                    }
                    public static void Int16ToBinary(IWritableStream s, short v)
                    {
                        s.WriteInt16(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int32
            Value
                $String
                    public static int Int32FromBinary(IReadableStream s)
                    {
                        return s.ReadInt32();
                    }
                    public static void Int32ToBinary(IWritableStream s, int v)
                    {
                        s.WriteInt32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Int64
            Value
                $String
                    public static long Int64FromBinary(IReadableStream s)
                    {
                        return s.ReadInt64();
                    }
                    public static void Int64ToBinary(IWritableStream s, long v)
                    {
                        s.WriteInt64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Float32
            Value
                $String
                    public static float Float32FromBinary(IReadableStream s)
                    {
                        return s.ReadFloat32();
                    }
                    public static void Float32ToBinary(IWritableStream s, float v)
                    {
                        s.WriteFloat32(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Float64
            Value
                $String
                    public static double Float64FromBinary(IReadableStream s)
                    {
                        return s.ReadFloat64();
                    }
                    public static void Float64ToBinary(IWritableStream s, double v)
                    {
                        s.WriteFloat64(v);
                    }
        Template
            Name BinaryTranslator_Primitive_Type
            Value
                $String
                    public static java.lang.reflect.Type TypeFromBinary(IReadableStream s)
                    {
                        throw new RuntimeException("NotSupported");
                    }
                    public static void TypeToBinary(IWritableStream s, java.lang.reflect.Type v)
                    {
                        throw new RuntimeException("NotSupported");
                    }
        Template
            Name BinaryTranslator_Alias
            //Parameters: ${Name}, ${ValueTypeFriendlyName}
            Value
                $String
                    public static [[(${Name})]] [[${Name}FromBinary]](IReadableStream s)
                    {
                        [[(${Name})]] o = new [[(${Name})]]();
                        o.Value = [[${ValueTypeFriendlyName}FromBinary]](s);
                        return o;
                    }
                    public static void [[${Name}ToBinary]](IWritableStream s, [[(${Name})]] o)
                    {
                        [[${ValueTypeFriendlyName}ToBinary]](s, o.Value);
                    }
        Template
            Name BinaryTranslator_Record
            //Parameters: ${Name}, ${FieldFroms}, ${FieldTos}
            Value
                $String
                    public static [[(${Name})]] [[${Name}FromBinary]](IReadableStream s)
                    {
                        [[(${Name})]] o = new [[(${Name})]]();
                        ${FieldFroms}
                        return o;
                    }
                    public static void [[${Name}ToBinary]](IWritableStream s, [[(${Name})]] o)
                    {
                        ${FieldTos}
                    }
        Template
            Name BinaryTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    o.[[${Name}]] = [[${TypeFriendlyName}FromBinary]](s);
        Template
            Name BinaryTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    [[${TypeFriendlyName}ToBinary]](s, o.[[${Name}]]);
        Template
            Name BinaryTranslator_TaggedUnion
            //Parameters: ${Name}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[(${Name})]] [[${Name}FromBinary]](IReadableStream s)
                    {
                        [[(${Name})]] o = new [[(${Name})]]();
                        o._Tag = [[${Name}TagFromBinary]](s);
                        ${AlternativeFroms}
                        throw new RuntimeException("InvalidOperation");
                    }
                    public static void [[${Name}ToBinary]](IWritableStream s, [[(${Name})]] o)
                    {
                        [[${Name}TagToBinary]](s, o._Tag);
                        ${AlternativeTos}
                        throw new RuntimeException("InvalidOperation");
                    }
        Template
            Name BinaryTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._Tag == [[${TaggedUnionName}Tag.${Name}]])
                    {
                        o.[[${Name}]] = [[${TypeFriendlyName}FromBinary]](s);
                        return o;
                    }
        Template
            Name BinaryTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._Tag == [[${TaggedUnionName}Tag.${Name}]])
                    {
                        [[${TypeFriendlyName}ToBinary]](s, o.[[${Name}]]);
                        return;
                    }
        Template
            Name BinaryTranslator_Enum
            //Parameters: ${Name}, ${UnderlyingTypeFriendlyName}, ${UnderlyingType}
            Value
                $String
                    public static [[(${UnderlyingType})]] [[${Name}FromBinary]](IReadableStream s)
                    {
                        return [[${UnderlyingTypeFriendlyName}FromBinary]](s);
                    }
                    public static void [[${Name}ToBinary]](IWritableStream s, [[(${UnderlyingType})]] o)
                    {
                        [[${UnderlyingTypeFriendlyName}ToBinary]](s, o);
                    }
        Template
            Name BinaryTranslator_Tuple
            //Parameters: ${TypeFriendlyName}, ${TupleElementFroms}, ${TupleElementTos}
            Value
                $String
                    public static [[(${TypeFriendlyName})]] [[${TypeFriendlyName}FromBinary]](IReadableStream s)
                    {
                        [[(${TypeFriendlyName})]] t = new [[(${TypeFriendlyName})]]();
                        ${TupleElementFroms}
                        return t;
                    }
                    public static void [[${TypeFriendlyName}ToBinary]](IWritableStream s, [[(${TypeFriendlyName})]] t)
                    {
                        ${TupleElementTos}
                    }
        Template
            Name BinaryTranslator_TupleElementFrom
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    t.[[Item${NameIndex}]] = [[${TypeFriendlyName}FromBinary]](s);
        Template
            Name BinaryTranslator_TupleElementTo
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    [[${TypeFriendlyName}ToBinary]](s, t.[[Item${NameIndex}]]);
        Template
            Name BinaryTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    public static [[(${TypeString})]] [[${TypeFriendlyName}FromBinary]](IReadableStream s)
                    {
                        [[(${TypeString})]] l = new [[(${TypeString})]]();
                        int Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            l.add([[${ElementTypeFriendlyName}FromBinary]](s));
                        }
                        return l;
                    }
                    public static void [[${TypeFriendlyName}ToBinary]](IWritableStream s, [[(${TypeString})]] l)
                    {
                        int Length = l.size();
                        IntToBinary(s, Length);
                        for (int k = 0; k < Length; k += 1)
                        {
                            [[${ElementTypeFriendlyName}ToBinary]](s, l.get(k));
                        }
                    }
        Template
            Name BinaryTranslator_Set
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}, ${ElementTypeString}
            Value
                $String
                    public static [[(${TypeString})]] [[${TypeFriendlyName}FromBinary]](IReadableStream s)
                    {
                        [[(${TypeString})]] l = new [[(${TypeString})]]();
                        int Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            l.add([[${ElementTypeFriendlyName}FromBinary]](s));
                        }
                        return l;
                    }
                    public static void [[${TypeFriendlyName}ToBinary]](IWritableStream s, [[(${TypeString})]] l)
                    {
                        int Length = l.size();
                        IntToBinary(s, Length);
                        for (${ElementTypeString} e : l)
                        {
                            [[${ElementTypeFriendlyName}ToBinary]](s, e);
                        }
                    }
        Template
            Name BinaryTranslator_Map
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${KeyTypeFriendlyName}, ${ValueTypeFriendlyName}, ${KeyTypeString}
            Value
                $String
                    public static [[(${TypeString})]] [[${TypeFriendlyName}FromBinary]](IReadableStream s)
                    {
                        [[(${TypeString})]] l = new [[(${TypeString})]]();
                        int Length = IntFromBinary(s);
                        for (int k = 0; k < Length; k += 1)
                        {
                            ${KeyTypeString} Key = [[${KeyTypeFriendlyName}FromBinary]](s);
                            l.put(Key, [[${ValueTypeFriendlyName}FromBinary]](s));
                        }
                        return l;
                    }
                    public static void [[${TypeFriendlyName}ToBinary]](IWritableStream s, [[(${TypeString})]] l)
                    {
                        int Length = l.size();
                        IntToBinary(s, Length);
                        for (${KeyTypeString} Key : l.keySet())
                        {
                            [[${KeyTypeFriendlyName}ToBinary]](s, Key);
                            [[${ValueTypeFriendlyName}ToBinary]](s, l.get(Key));
                        }
                    }
        Template
            Name BinaryTranslator_Optional
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[(${TypeString})]] [[${TypeFriendlyName}FromBinary]](IReadableStream s)
                    {
                        [[(${TypeString})]] o = new [[(${TypeString})]]();
                        o._Tag = OptionalTagFromBinary(s);
                        ${AlternativeFroms}
                        throw new RuntimeException("InvalidOperation");
                    }
                    public static void [[${TypeFriendlyName}ToBinary]](IWritableStream s, [[(${TypeString})]] o)
                    {
                        OptionalTagToBinary(s, o._Tag);
                        ${AlternativeTos}
                        throw new RuntimeException("InvalidOperation");
                    }
