$Comment
    ==========================================================================

      File:        Python.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构Python3模板
      Version:     2017.05.08.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Yuki.ObjectSchema.Python

#Import
    System
    System.Collections.Generic
    System.Linq

#Constant Keywords:List<String>
    $List String
        False
        class
        finally
        is
        return
        None
        continue
        for
        lambda
        try
        True
        def
        from
        nonlocal
        while
        and
        del
        global
        not
        with
        as
        elif
        if
        or
        yield
        assert
        else
        import
        pass
        break
        except
        in
        raise

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                None
        Boolean             bool
        String              str
        Int                 int
        Real                float
        Byte                int
        UInt8               int
        UInt16              int
        UInt32              int
        UInt64              int
        Int8                int
        Int16               int
        Int32               int
        Int64               int
        Float32             float
        Float64             float
        Type                type
        Optional            Optional
        List                List
        Set                 Set
        Map                 Dict

#Template SingleLineXmlComment Description:String
    ''' ${Description} '''

#Template MultiLineXmlComment Description:List<String>
    '''
    ${Description}
    '''

#Template Primitive Name:String PlatformName:String
    [[${Name}]] = ${PlatformName}

#Template Alias a:AliasDef
    $$
        var Name = GetEscapedIdentifier(a.TypeFriendlyName()) + GetGenericParameters(a.GenericParameters);
        var Type = GetTypeString(a.Type);
    ${GetXmlComment(a.Description)}
    ${Name} = ${Type}

#Template Record r:RecordDef
    $$
        var Name = GetEscapedIdentifier(r.TypeFriendlyName()) + GetGenericParameters(r.GenericParameters);
    #Record
    class ${Name}(NamedTuple):
        ${GetXmlComment(r.Description)}

        $$
            foreach (var f in r.Fields)
            {
                ##
                    ${GetXmlComment(f.Description)}
                    [[${f.Name}]]: ${GetTypeString(f.Type)}
            }
            if (r.Fields.Count == 0)
            {
                ##
                    pass
            }

#Template TaggedUnion tu:TaggedUnionDef
    $$
        var Name = GetEscapedIdentifier(tu.TypeFriendlyName()) + GetGenericParameters(tu.GenericParameters);
        var TagName = GetEscapedIdentifier(tu.TypeFriendlyName() + "Tag");
    class ${TagName}(IntEnum):
        $$
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    [[${a.Name}]] = ${k}
                k += 1;
            }
            if (tu.Alternatives.Count == 0)
            {
                ##
                    pass
            }
    #TaggedUnion
    class ${Name}(NamedTuple):
        ${GetXmlComment(tu.Description)}

        Tag_: ${TagName}
        Value_: Any

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    def [[${a.Name}]](self) -> ${GetTypeString(a.Type)}:
                        ${GetXmlComment(a.Description)}
                        if self.Tag_ != ${TagName}.[[${a.Name}]]:
                            raise TypeError('TagMismatch')
                        return self.Value_
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                if (a.Type.OnTypeRef && (a.Type.TypeRef.Name == "Unit") && (a.Type.TypeRef.Version == ""))
                {
                    ##
                        @staticmethod
                        def [[Create${a.Name}]]() -> '${Name}':
                            ${GetXmlComment(a.Description)}
                            return ${Name}(${TagName}.[[${a.Name}]], None)
                }
                else
                {
                    ##
                        @staticmethod
                        def [[Create${a.Name}]](Value: ${GetTypeString(a.Type)}) -> '${Name}':
                            ${GetXmlComment(a.Description)}
                            return ${Name}(${TagName}.[[${a.Name}]], Value)
                }
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    def [[On${a.Name}]](self) -> bool:
                        ${GetXmlComment(a.Description)}
                        return self.Tag_ == ${TagName}.[[${a.Name}]]
            }

#Template Enum e:EnumDef
    $$
        var Name = GetEscapedIdentifier(e.TypeFriendlyName());
    class ${Name}(IntFlag):
        ${GetXmlComment(e.Description)}

        $$
            var k = 0;
            foreach (var l in e.Literals)
            {
                ##
                    ${GetXmlComment(l.Description)}
                    [[${l.Name}]] = ${l.Value}
                k += 1;
            }
            if (e.Literals.Count == 0)
            {
                ##
                    pass
            }

#Template Main Schema:Schema
    #!/usr/bin/python3

    #==========================================================================
    #
    #  Notice:      This file is automatically generated.
    #               Please don't modify this file.
    #
    #==========================================================================

    from typing import Any
    from typing import NamedTuple
    from typing import Tuple
    from typing import Optional
    from typing import List
    from typing import Set
    from typing import Dict
    from enum import IntEnum
    from enum import IntFlag
    from ${Schema.Imports} import *
    $$
        var Primitives = GetPrimitives(Schema);
    ${Primitives}

    $$
        var ComplexTypes = GetComplexTypes(Schema);
    ${ComplexTypes}

$End
