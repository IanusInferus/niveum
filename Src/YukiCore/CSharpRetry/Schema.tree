$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构C#重试循环模板数据
      Version:     2015.02.10.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    using System;
                    using System.Collections.Generic;
        Template
            Name RetryWrapper
            //Parameters: ${ServerCommandHooks}, ${Commands}
            Value
                $String
                    public sealed class RetryWrapper : IApplicationServer
                    {
                        private IApplicationServer Inner;
                        private Func<Exception, Boolean> IsRetryable;
                        private int MaxRetryCount;

                        public RetryWrapper(IApplicationServer Inner, Func<Exception, Boolean> IsRetryable, int MaxRetryCount)
                        {
                            this.Inner = Inner;
                            this.IsRetryable = IsRetryable;
                            this.MaxRetryCount = MaxRetryCount;
                            ${ServerCommandHooks}
                        }

                        ${Commands}
                    }
        Template
            Name RetryWrapper_ServerCommandHook
            //Parameters: ${Name}
            Value
                $String
                    Inner.[[${Name}]] += e =>
                    {
                        if ([[${Name}]] != null) { [[${Name}]](e); }
                    };
        Template
            Name RetryWrapper_ClientCommandHook
            //Parameters: ${Name}
            Value
                $String
                    public [[${Name}Reply]] [[${Name}]]([[${Name}Request]] Request)
                    {
                        var RetryCount = 0;
                        while (RetryCount < MaxRetryCount)
                        {
                            try
                            {
                                var Reply = Inner.[[${Name}]](Request);
                                return Reply;
                            }
                            catch (Exception ex)
                            {
                                if (IsRetryable(ex))
                                {
                                    RetryCount += 1;
                                    continue;
                                }
                                else
                                {
                                    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();
                                    throw;
                                }
                            }
                        }
                        throw new InvalidOperationException("MaxRetryCountReached");
                    }
        Template
            Name RetryWrapper_ClientCommandAsyncHook
            //Parameters: ${Name}
            Value
                $String
                    public void [[${Name}]]([[${Name}Request]] Request, Action<[[${Name}Reply]]> Callback, Action<Exception> OnFailure)
                    {
                        Action<[[${Name}Reply]]> CallbackInner = Reply =>
                        {
                            Callback(Reply);
                        };

                        var RetryCount = 0;
                        while (RetryCount < MaxRetryCount)
                        {
                            try
                            {
                                Inner.[[${Name}]](Request, CallbackInner, OnFailure);
                            }
                            catch (Exception ex)
                            {
                                if (IsRetryable(ex))
                                {
                                    RetryCount += 1;
                                    continue;
                                }
                                else
                                {
                                    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();
                                    throw;
                                }
                            }
                        }
                    }
        Template
            Name RetryWrapper_ServerCommand
            //Parameters: ${Name}
            Value
                $String
                    public event Action<[[${Name}Event]]> [[${Name}]];
