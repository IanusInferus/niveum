$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构Haxe JSON通讯模板数据
      Version:     2012.12.21.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name Main
            //Parameters: ${Header}, ${PackageName}, ${Imports}, ${Types}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    package [[${PackageName}]];
                    import haxe.Json;
                    import ${Imports};

                    ${Types}

                $End
        Template
            Name IJsonSender
            Value
                $String
                    interface IJsonSender
                    {
                        function send(commandName : String, commandHash : Int, parameters : String) : Void;
                    }
        Template
            Name JsonSerializationClient
            //Parameters: ${Hash}, ${ApplicationCommands}, ${ServerCommands}
            Value
                $String
                    private class ApplicationClient implements IApplicationClient
                    {
                        public var s : IJsonSender;
                        public var clientCommandCallbacks : Hash<Array<{commandHash : UInt32, _callback : String -> Void}>>;
                    
                        public function new()
                        {
                        }

                        public var hash(get, null) : String;
                        public function get_hash() : String
                        {
                            return "${Hash}";
                        }
                    
                        public function dequeueCallback(commandName : String) : Void
                        {
                            clientCommandCallbacks.get(commandName).shift();
                        }
                    
                        private function addCallback(commandName : String, commandHash : UInt32, _callback : String -> Void) : Void
                        {
                            if (clientCommandCallbacks.exists(commandName))
                            {
                                clientCommandCallbacks.get(commandName).push({commandHash : commandHash, _callback : _callback});
                            }
                            else
                            {
                                var q = new Array<{commandHash : UInt32, _callback : String -> Void}>();
                                q.push({commandHash : commandHash, _callback : _callback});
                                clientCommandCallbacks.set(commandName, q);
                            }
                        }
                    
                        ${ApplicationCommands}
                    }

                    class JsonSerializationClient /* final */
                    {
                        public function GetApplicationClient() : IApplicationClient
                        {
                            return c;
                        }
                    
                        private var c : ApplicationClient;
                        private var serverCommands : Hash<{commandHash : UInt32, _callback : String -> Void}>;
                    
                        public function new(s : IJsonSender)
                        {
                            c = new ApplicationClient();
                            c.s = s;
                            c.clientCommandCallbacks = new Hash<Array<{commandHash : UInt32, _callback : String -> Void}>>();
                            serverCommands = new Hash<{commandHash : UInt32, _callback : String -> Void}>();
                            ${ServerCommands}
                        }
                    
                        public function handleResult(commandName : String, commandHash : UInt32, parameters : String) : Void
                        {
                            if (c.clientCommandCallbacks.exists(commandName))
                            {
                                var q = c.clientCommandCallbacks.get(commandName);
                                if (q.length == 0)
                                {
                                    throw "InvalidOperationException: " + commandName + "@" + StringTools.hex(commandHash, 8);
                                }
                                var callbackPair = q[0];
                                if (callbackPair.commandHash != commandHash)
                                {
                                    throw "InvalidOperationException: " + commandName + "@" + StringTools.hex(commandHash, 8);
                                }
                                q.shift();
                                var _callback = callbackPair._callback;
                                _callback(parameters);
                                return;
                            }
                    
                            if (serverCommands.exists(commandName))
                            {
                                var callbackPair = serverCommands.get(commandName);
                                if (callbackPair.commandHash != commandHash)
                                {
                                    throw "InvalidOperationException: " + commandName + "@" + StringTools.hex(commandHash, 8);
                                }
                                var _callback = callbackPair._callback;
                                _callback(parameters);
                                return;
                            }
                    
                            throw "InvalidOperationException: " + commandName + "@" + StringTools.hex(commandHash, 8);
                        }
                    }
        Template
            Name JsonSerializationClient_ApplicationClientCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    public function [[${name}]](r : [[${Name}Request]], _callback : [[${Name}Reply]] -> Void) : Void
                    {
                        var request = Json.stringify(JsonTranslator.[[${name}RequestToJson]](r));
                        addCallback("${CommandName}", 0x${CommandHash}, function(parameters) { return _callback(JsonTranslator.[[${name}ReplyFromJson]](Json.parse(parameters))); });
                        s.send("${CommandName}", 0x${CommandHash}, request);
                    }
        Template
            Name JsonSerializationClient_ApplicationServerCommand
            //Parameters: ${Name}
            Value
                $String
                    public var [[${name}]] : [[${Name}Event]] -> Void;
                    public function [[raise${Name}]](e : [[${Name}Event]]) : Void { if ([[${name}]] != null) { [[${name}]](e); } }
        Template
            Name JsonSerializationClient_ServerCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    serverCommands.set("${CommandName}", {commandHash : 0x${CommandHash}, _callback : function(parameters) { c.[[raise${Name}]](JsonTranslator.[[${name}EventFromJson]](Json.parse(parameters))); }});
        Template
            Name JsonTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    class JsonTranslator /* static */
                    {
                        private static function hasField(o : Dynamic, field : String) : Boolean
                        {
                            return Reflect.hasField(o, field);
                        }
                        private static function getField(o : Dynamic, field : String) : Dynamic
                        {
                            if (!Reflect.hasField(o, field)) { throw "InvalidOperationException"; }
                            return Reflect.field(o, field);
                        }
                        private static function setField(o : Dynamic, field : String, value : Dynamic) : Void
                        {
                            Reflect.setField(o, field, value);
                        }

                        ${Serializers}
                    }
        Template
            Name JsonTranslator_Primitive_Unit
            Value
                $String
                    public static function unitFromJson(j : Dynamic) : Unit
                    {
                        return {};
                    }
                    public static function unitToJson(v : Unit) : Dynamic
                    {
                        return {};
                    }
        Template
            Name JsonTranslator_Primitive_Boolean
            Value
                $String
                    public static function booleanFromJson(j : Dynamic) : Boolean
                    {
                        return cast(j, Boolean);
                    }
                    public static function booleanToJson(v : Boolean) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_String
            Value
                $String
                    public static function stringFromJson(j : Dynamic) : String
                    {
                        return cast(j, String);
                    }
                    public static function stringToJson(v : String) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Int
            Value
                $String
                    public static function intFromJson(j : Dynamic) : Int
                    {
                        return cast(j, Int);
                    }
                    public static function intToJson(v : Int)
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Real
            Value
                $String
                    public static function realFromJson(j : Dynamic) : Real
                    {
                        return cast(j, Real);
                    }
                    public static function realToJson(v : Real) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Byte
            Value
                $String
                    public static function byteFromJson(j : Dynamic) : Byte
                    {
                        return cast(j, Byte);
                    }
                    public static function byteToJson(v : Byte) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_UInt8
            Value
                $String
                    public static function uint8FromJson(j : Dynamic) : UInt8
                    {
                        return cast(j, UInt8);
                    }
                    public static function uint8ToJson(v : UInt8) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_UInt16
            Value
                $String
                    public static function uint16FromJson(j : Dynamic) : UInt16
                    {
                        return cast(j, UInt16);
                    }
                    public static function uint16ToJson(v : UInt16) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_UInt32
            Value
                $String
                    public static function uint32FromJson(j : Dynamic) : UInt32
                    {
                        return cast(j, UInt32);
                    }
                    public static function uint32ToJson(v : UInt32) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_UInt64
            Value
                $String
                    public static function uint64FromJson(j : Dynamic) : UInt64
                    {
                        return cast(j, UInt64);
                    }
                    public static function uint64ToJson(v : UInt64) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Int8
            Value
                $String
                    public static function int8FromJson(j : Dynamic) : Int8
                    {
                        return cast(j, Int8);
                    }
                    public static function int8ToJson(v : Int8) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Int16
            Value
                $String
                    public static function int16FromJson(j : Dynamic) : Int16
                    {
                        return cast(j, Int16);
                    }
                    public static function int16ToJson(v : Int16) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Int32
            Value
                $String
                    public static function int32FromJson(j : Dynamic) : Int32
                    {
                        return cast(j, Int32);
                    }
                    public static function int32ToJson(v : Int32) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Int64
            Value
                $String
                    public static function int64FromJson(j : Dynamic) : Int64
                    {
                        return cast(j, Int64);
                    }
                    public static function int64ToJson(v : Int64) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Float32
            Value
                $String
                    public static function float32FromJson(j : Dynamic) : Float32
                    {
                        return cast(j, Float32);
                    }
                    public static function float32ToJson(v : Float32) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Float64
            Value
                $String
                    public static function float64FromJson(j : Dynamic) : Float64
                    {
                        return cast(j, Float64);
                    }
                    public static function float64ToJson(v : Float64) : Dynamic
                    {
                        return v;
                    }
        Template
            Name JsonTranslator_Primitive_Type
            Value
                $String
                    public static function typeFromJson(j : Dynamic) : Void
                    {
                        throw "NotSupportedException";
                    }
                    public static function typeToJson(v : Dynamic) : Void
                    {
                        throw "NotSupportedException";
                    }
        Template
            Name JsonTranslator_Alias
            //Parameters: ${Name}, ${ValueTypeFriendlyName}
            Value
                $String
                    public static function [[${name}FromJson]](j : Dynamic) : [[${Name}]]
                    {
                        return [[${valueTypeFriendlyName}FromJson]](j);
                    }
                    public static function [[${name}ToJson]](o : [[${Name}]]) : Dynamic
                    {
                        return [[${valueTypeFriendlyName}ToJson]](o);
                    }
        Template
            Name JsonTranslator_Record
            //Parameters: ${Name}, ${FieldFroms}, ${FieldTos}
            Value
                $String
                    public static function [[${name}FromJson]](j : Dynamic) : [[${Name}]]
                    {
                        return
                        {
                            ${FieldFroms}
                        };
                    }
                    public static function [[${name}ToJson]](o : [[${Name}]]) : Dynamic
                    {
                        var j : Dynamic = {};
                        ${FieldTos}
                        return j;
                    }
        Template
            Name JsonTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    [[${name}]] : [[${typeFriendlyName}FromJson]](getField(j, "${name}")),
        Template
            Name JsonTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    setField(j, "${name}", [[${typeFriendlyName}ToJson]](o.[[${name}]]));
        Template
            Name JsonTranslator_TaggedUnion
            //Parameters: ${Name}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static function [[${name}FromJson]](j : Dynamic) : [[${Name}]]
                    {
                        ${AlternativeFroms}
                        throw "InvalidOperationException";
                    }
                    public static function [[${name}ToJson]](o : [[${Name}]]) : Dynamic
                    {
                        var j : Dynamic = {};
                        switch (o)
                        {
                            ${AlternativeTos}
                        }
                        return j;
                    }
        Template
            Name JsonTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (hasField(j, "${name}"))
                    {
                        var v = [[${typeFriendlyName}FromJson]](getField(j, "${name}"));
                        return [[${TaggedUnionName}.${name}]](v);
                    }
        Template
            Name JsonTranslator_AlternativeFromUnit
            //Parameters: ${TaggedUnionName}, ${Name}
            Value
                $String
                    if (hasField(j, "${name}"))
                    {
                        return [[${TaggedUnionName}.${name}]];
                    }
        Template
            Name JsonTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    case [[${name}]](v):
                        setField(j, "${name}", [[${typeFriendlyName}ToJson]](v));
        Template
            Name JsonTranslator_AlternativeToUnit
            //Parameters: ${TaggedUnionName}, ${Name}
            Value
                $String
                    case [[${name}]]:
                        setField(j, "${name}", unitToJson({}));
        Template
            Name JsonTranslator_Enum
            //Parameters: ${Name}, ${UnderlyingType}
            Value
                $String
                    public static function [[${name}FromJson]](j : Dynamic) : [[${UnderlyingType}]]
                    {
                        return cast(j, [[${UnderlyingType}]]);
                    }
                    public static function [[${name}ToJson]](o : [[${UnderlyingType}]]) : Dynamic
                    {
                        return o;
                    }
        Template
            Name JsonTranslator_Tuple
            //Parameters: ${TypeFriendlyName}, ${TupleElementFroms}, ${TupleElementTos}
            Value
                $String
                    public static function [[${typeFriendlyName}FromJson]](j : Dynamic) : [[${TypeFriendlyName}]]
                    {
                        var ja = cast(j, Array<Dynamic>);
                        return
                        {
                            ${TupleElementFroms}
                        };
                    }
                    public static function [[${typeFriendlyName}ToJson]](t : [[${TypeFriendlyName}]]) : Dynamic
                    {
                        var ja = new Array<Dynamic>();
                        ${TupleElementTos}
                        return ja;
                    }
        Template
            Name JsonTranslator_TupleElementFrom
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    [[item${NameIndex}]] : [[${typeFriendlyName}FromJson]](ja[${NameIndex}]),
        Template
            Name JsonTranslator_TupleElementTo
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    ja.push([[${typeFriendlyName}ToJson]](t.[[item${NameIndex}]]));
        Template
            Name JsonTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    public static function [[${typeFriendlyName}FromJson]](j : Dynamic) : [[${TypeString}]]
                    {
                        var ja = cast(j, Array<Dynamic>);
                        var a = new [[${TypeString}]]();
                        for (e in ja)
                        {
                            a.push([[${elementTypeFriendlyName}FromJson]](e));
                        }
                        return a;
                    }
                    public static function [[${typeFriendlyName}ToJson]](l : [[${TypeString}]]) : Dynamic
                    {
                        var ja = new Array<Dynamic>();
                        for (e in l)
                        {
                            ja.push([[${elementTypeFriendlyName}ToJson]](e));
                        }
                        return ja;
                    }
        Template
            Name JsonTranslator_Optional
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}, ${ElementTypeString}
            Value
                $String
                    public static function [[${typeFriendlyName}FromJson]](j : Dynamic) : [[${TypeString}]]
                    {
                        if (hasField(j, "notHasValue"))
                        {
                            return null;
                        }
                        if (hasField(j, "hasValue"))
                        {
                            var v = [[${elementTypeFriendlyName}FromJson]](getField(j, "hasValue"));
                            return v;
                        }
                        throw "InvalidOperationException";
                    }
                    public static function [[${typeFriendlyName}ToJson]](o : [[${TypeString}]]) : Dynamic
                    {
                        var j : Dynamic = {};
                        if (o == null)
                        {
                            setField(j, "notHasValue", unitToJson({}));
                        }
                        else
                        {
                            setField(j, "hasValue", [[${elementTypeFriendlyName}ToJson]](cast(o, [[${ElementTypeString}]])));
                        }
                        return j;
                    }
