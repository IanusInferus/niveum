$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Core <Tree>
      Description: 对象类型结构C# JSON通讯模板数据
      Version:     2012.12.21.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:
                    //Newtonsoft.Json.dll

                    using System;
                    using System.Collections.Generic;
                    using Newtonsoft.Json;
                    using Newtonsoft.Json.Linq;
        Template
            Name JsonSerializationServer
            //Parameters: ${Hash}, ${ClientCommands}, ${ServerCommands}
            Value
                $String
                    public sealed class JsonSerializationServer
                    {
                        private Dictionary<String, Func<IApplicationServer, String, String>> ClientCommandsWithoutHash;
                        private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>> ClientCommands;

                        public JsonSerializationServer()
                        {
                            ClientCommandsWithoutHash = new Dictionary<String, Func<IApplicationServer, String, String>>(StringComparer.OrdinalIgnoreCase);
                            ClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, String, String>>();
                            ${ClientCommands}
                        }

                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        public Boolean HasCommand(String CommandName)
                        {
                            return ClientCommandsWithoutHash.ContainsKey(CommandName);
                        }

                        public Boolean HasCommand(String CommandName, UInt32 CommandHash)
                        {
                            return ClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));
                        }

                        public String ExecuteCommand(IApplicationServer s, String CommandName, String Parameters)
                        {
                            var cmd = ClientCommandsWithoutHash[CommandName];
                            return cmd(s, Parameters);
                        }

                        public String ExecuteCommand(IApplicationServer s, String CommandName, UInt32 CommandHash, String Parameters)
                        {
                            var cmd = ClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];
                            return cmd(s, Parameters);
                        }
                    }
                    public sealed class JsonSerializationServerEventDispatcher
                    {
                        public JsonSerializationServerEventDispatcher(IApplicationServer s)
                        {
                            ${ServerCommands}
                        }

                        public delegate void ServerEventDelegate(String CommandName, UInt32 CommandHash, String Parameters);
                        public event ServerEventDelegate ServerEvent;
                        private void OnServerEvent(String CommandName, UInt32 CommandHash, String Parameters)
                        {
                            if (ServerEvent != null) { ServerEvent(CommandName, CommandHash, Parameters); }
                        }
                    }
        Template
            Name JsonSerializationServer_ClientCommandWithoutHash
            //Parameters: ${CommandName}, ${Name}
            Value
                $String
                    ClientCommandsWithoutHash.Add(@"${CommandName}", (s, p) => JsonTranslator.[[${Name}ReplyToJson]](s.[[${Name}]](JsonTranslator.[[${Name}RequestFromJson]](JToken.Parse(p)))).ToString(Formatting.None));
        Template
            Name JsonSerializationServer_ClientCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    ClientCommands.Add(new KeyValuePair<String, UInt32>(@"${CommandName}", 0x${CommandHash}), (s, p) => JsonTranslator.[[${Name}ReplyToJson]](s.[[${Name}]](JsonTranslator.[[${Name}RequestFromJson]](JToken.Parse(p)))).ToString(Formatting.None));
        Template
            Name JsonSerializationServer_ServerCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    s.${Name} += e => OnServerEvent(@"${CommandName}", 0x${CommandHash}, JsonTranslator.[[${Name}EventToJson]](e).ToString(Formatting.None));
        Template
            Name IJsonSender
            Value
                $String
                    public interface IJsonSender
                    {
                        void Send(String CommandName, UInt32 CommandHash, String Parameters);
                    }
        Template
            Name JsonSerializationClient
            //Parameters: ${Hash}, ${ApplicationCommands}, ${ServerCommands}
            Value
                $String
                    public sealed class JsonSerializationClient
                    {
                        public IApplicationClient GetApplicationClient()
                        {
                            return c;
                        }

                        private class ApplicationClient : IApplicationClient
                        {
                            public IJsonSender s;
                            public Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>> ClientCommandCallbacks;

                            public UInt64 Hash
                            {
                                get
                                {
                                    return 0x${Hash};
                                }
                            }

                            public void DequeueCallback(String CommandName)
                            {
                                ClientCommandCallbacks[CommandName].Dequeue();
                            }

                            private void AddCallback(String CommandName, UInt32 CommandHash, Action<String> Callback)
                            {
                                if (ClientCommandCallbacks.ContainsKey(CommandName))
                                {
                                    ClientCommandCallbacks[CommandName].Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));
                                }
                                else
                                {
                                    var q = new Queue<KeyValuePair<UInt32, Action<String>>>();
                                    q.Enqueue(new KeyValuePair<UInt32, Action<String>>(CommandHash, Callback));
                                    ClientCommandCallbacks.Add(CommandName, q);
                                }
                            }

                            ${ApplicationCommands}
                        }

                        private ApplicationClient c;
                        private Dictionary<KeyValuePair<String, UInt32>, Action<String>> ServerCommands;

                        public JsonSerializationClient(IJsonSender s)
                        {
                            c = new ApplicationClient();
                            c.s = s;
                            c.ClientCommandCallbacks = new Dictionary<String, Queue<KeyValuePair<UInt32, Action<String>>>>();
                            ServerCommands = new Dictionary<KeyValuePair<String, UInt32>, Action<String>>();
                            ${ServerCommands}
                        }

                        public void HandleResult(String CommandName, UInt32 CommandHash, String Parameters)
                        {
                            if (c.ClientCommandCallbacks.ContainsKey(CommandName))
                            {
                                var q = c.ClientCommandCallbacks[CommandName];
                                if (q.Count == 0)
                                {
                                    throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
                                }
                                var CallbackPair = q.Peek();
                                if (CallbackPair.Key != CommandHash)
                                {
                                    throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
                                }
                                q.Dequeue();
                                var Callback = CallbackPair.Value;
                                Callback(Parameters);
                                return;
                            }

                            var p = new KeyValuePair<String, UInt32>(CommandName, CommandHash);
                            if (ServerCommands.ContainsKey(p))
                            {
                                var a = ServerCommands[p];
                                a(Parameters);
                                return;
                            }

                            throw new InvalidOperationException(CommandName + "@" + CommandHash.ToString("X8", System.Globalization.CultureInfo.InvariantCulture));
                        }
                    }
        Template
            Name JsonSerializationClient_ApplicationClientCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    public void [[${Name}]]([[${Name}Request]] r, Action<[[${Name}Reply]]> Callback)
                    {
                        var Request = JsonTranslator.[[${Name}RequestToJson]](r).ToString(Formatting.None);
                        AddCallback(@"${CommandName}", 0x${CommandHash}, Parameters => Callback(JsonTranslator.[[${Name}ReplyFromJson]](JToken.Parse(Parameters))));
                        s.Send(@"${CommandName}", 0x${CommandHash}, Request);
                    }
        Template
            Name JsonSerializationClient_ApplicationServerCommand
            //Parameters: ${Name}
            Value
                $String
                    public event Action<[[${Name}Event]]> [[${Name}]];
                    public void [[Raise${Name}]]([[${Name}Event]] e) { if ([[${Name}]] != null) { [[${Name}]](e); } }
        Template
            Name JsonSerializationClient_ServerCommand
            //Parameters: ${CommandName}, ${Name}, ${CommandHash}
            Value
                $String
                    ServerCommands.Add(new KeyValuePair<String, UInt32>(@"${CommandName}", 0x${CommandHash}), Parameters => c.[[Raise${Name}]](JsonTranslator.[[${Name}EventFromJson]](JToken.Parse(Parameters))));
        Template
            Name JsonLogAspectWrapper
            //Parameters: ${ServerCommandHooks}, ${Commands}
            Value
                $String
                    public sealed class JsonLogAspectWrapper : IApplicationServer
                    {
                        private IApplicationServer Inner;

                        public JsonLogAspectWrapper(IApplicationServer Inner)
                        {
                            this.Inner = Inner;
                            ${ServerCommandHooks}
                        }

                        public event Action<String, String> ClientCommandIn;
                        public event Action<String, String> ClientCommandOut;
                        public event Action<String, String> ServerCommand;

                        ${Commands}
                    }
        Template
            Name JsonLogAspectWrapper_ServerCommandHook
            //Parameters: ${Name}
            Value
                $String
                    Inner.[[${Name}]] += e =>
                    {
                        if (ServerCommand != null) { ServerCommand(@"${Name}", JsonTranslator.[[${Name}EventToJson]](e).ToString(Formatting.None)); }
                        if ([[${Name}]] != null) { [[${Name}]](e); }
                    };
        Template
            Name JsonLogAspectWrapper_ClientCommandHook
            //Parameters: ${Name}
            Value
                $String
                    public [[${Name}Reply]] [[${Name}]]([[${Name}Request]] Request)
                    {
                        if (ClientCommandIn != null) { ClientCommandIn(@"${Name}", JsonTranslator.[[${Name}RequestToJson]](Request).ToString(Formatting.None)); }
                        var Reply = Inner.[[${Name}]](Request);
                        if (ClientCommandOut != null) { ClientCommandOut(@"${Name}", JsonTranslator.[[${Name}ReplyToJson]](Reply).ToString(Formatting.None)); }
                        return Reply;
                    }
        Template
            Name JsonLogAspectWrapper_ServerCommand
            //Parameters: ${Name}
            Value
                $String
                    public event Action<[[${Name}Event]]> [[${Name}]];
        Template
            Name JsonTranslator
            //Parameters: ${Serializers}
            Value
                $String
                    public static class JsonTranslator
                    {
                        ${Serializers}
                    }
        Template
            Name JsonTranslator_Primitive_Unit
            Value
                $String
                    public static Unit UnitFromJson(JToken j)
                    {
                        return new Unit();
                    }
                    public static JObject UnitToJson(Unit v)
                    {
                        return new JObject();
                    }
        Template
            Name JsonTranslator_Primitive_Boolean
            Value
                $String
                    public static Boolean BooleanFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Boolean) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToBoolean(jv.Value);
                    }
                    public static JValue BooleanToJson(Boolean v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_String
            Value
                $String
                    public static String StringFromJson(JToken j)
                    {
                        if (j.Type != JTokenType.String) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToString(jv.Value);
                    }
                    public static JValue StringToJson(String v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int
            Value
                $String
                    public static Int IntFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToInt32(jv.Value);
                    }
                    public static JValue IntToJson(Int v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Real
            Value
                $String
                    public static Real RealFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Float) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToDouble(jv.Value);
                    }
                    public static JValue RealToJson(Real v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Byte
            Value
                $String
                    public static Byte ByteFromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToByte(jv.Value);
                    }
                    public static JValue ByteToJson(Byte v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_UInt8
            Value
                $String
                    public static UInt8 UInt8FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToByte(jv.Value);
                    }
                    public static JValue UInt8ToJson(UInt8 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_UInt16
            Value
                $String
                    public static UInt16 UInt16FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToUInt16(jv.Value);
                    }
                    public static JValue UInt16ToJson(UInt16 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_UInt32
            Value
                $String
                    public static UInt32 UInt32FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToUInt32(jv.Value);
                    }
                    public static JValue UInt32ToJson(UInt32 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_UInt64
            Value
                $String
                    public static UInt64 UInt64FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToUInt64(jv.Value);
                    }
                    public static JValue UInt64ToJson(UInt64 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int8
            Value
                $String
                    public static Int8 Int8FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToSByte(jv.Value);
                    }
                    public static JValue Int8ToJson(Int8 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int16
            Value
                $String
                    public static Int16 Int16FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToInt16(jv.Value);
                    }
                    public static JValue Int16ToJson(Int16 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int32
            Value
                $String
                    public static Int32 Int32FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToInt32(jv.Value);
                    }
                    public static JValue Int32ToJson(Int32 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Int64
            Value
                $String
                    public static Int64 Int64FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToInt64(jv.Value);
                    }
                    public static JValue Int64ToJson(Int64 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Float32
            Value
                $String
                    public static Float32 Float32FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.Float) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToSingle(jv.Value);
                    }
                    public static JValue Float32ToJson(Float32 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Float64
            Value
                $String
                    public static Float64 Float64FromJson(JToken j)
                    {
                        if ((j.Type != JTokenType.Integer) && (j.Type != JTokenType.Float) && (j.Type != JTokenType.String)) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return Convert.ToDouble(jv.Value);
                    }
                    public static JValue Float64ToJson(Float64 v)
                    {
                        return new JValue(v);
                    }
        Template
            Name JsonTranslator_Primitive_Type
            Value
                $String
                    public static Type TypeFromJson(JToken j)
                    {
                        throw new NotSupportedException();
                    }
                    public static JValue TypeToJson(Type v)
                    {
                        throw new NotSupportedException();
                    }
        Template
            Name JsonTranslator_Alias
            //Parameters: ${Name}, ${ValueTypeFriendlyName}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        return new [[${Name}]] { Value = [[${ValueTypeFriendlyName}FromJson]](j) };
                    }
                    public static JToken [[${Name}ToJson]]([[${Name}]] o)
                    {
                        return [[${ValueTypeFriendlyName}ToJson]](o.Value);
                    }
        Template
            Name JsonTranslator_Record
            //Parameters: ${Name}, ${FieldFroms}, ${FieldTos}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${Name}]]();
                        ${FieldFroms}
                        return o;
                    }
                    public static JObject [[${Name}ToJson]]([[${Name}]] o)
                    {
                        var jo = new JObject();
                        ${FieldTos}
                        return jo;
                    }
        Template
            Name JsonTranslator_FieldFrom
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    o.[[${Name}]] = [[${TypeFriendlyName}FromJson]](jo[@"${name}"]);
        Template
            Name JsonTranslator_FieldTo
            //Parameters: ${Name}, ${TypeFriendlyName}
            Value
                $String
                    jo.Add(@"${name}", [[${TypeFriendlyName}ToJson]](o.[[${Name}]]));
        Template
            Name JsonTranslator_TaggedUnion
            //Parameters: ${Name}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${Name}]]();
                        var d = (IDictionary<string, JToken>)(jo);
                        ${AlternativeFroms}
                        throw new InvalidOperationException();
                    }
                    public static JObject [[${Name}ToJson]]([[${Name}]] o)
                    {
                        var jo = new JObject();
                        ${AlternativeTos}
                        throw new InvalidOperationException();
                    }
        Template
            Name JsonTranslator_AlternativeFrom
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (d.ContainsKey(@"${name}"))
                    {
                        o._Tag = [[${TaggedUnionName}Tag.${Name}]];
                        o.[[${Name}]] = [[${TypeFriendlyName}FromJson]](jo[@"${name}"]);
                        return o;
                    }
        Template
            Name JsonTranslator_AlternativeTo
            //Parameters: ${TaggedUnionName}, ${Name}, ${TypeFriendlyName}
            Value
                $String
                    if (o._Tag == [[${TaggedUnionName}Tag.${Name}]])
                    {
                        jo.Add(@"${name}", [[${TypeFriendlyName}ToJson]](o.[[${Name}]]));
                        return jo;
                    }
        Template
            Name JsonTranslator_Enum
            //Parameters: ${Name}
            Value
                $String
                    public static [[${Name}]] [[${Name}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Integer) { throw new InvalidOperationException(); }
                        var jv = j as JValue;
                        return ([[${Name}]])(Convert.ToInt64(jv.Value));
                    }
                    public static JValue [[${Name}ToJson]]([[${Name}]] o)
                    {
                        return new JValue(Convert.ToInt64(o));
                    }
        Template
            Name JsonTranslator_Tuple
            //Parameters: ${TypeFriendlyName}, ${TupleElementFroms}, ${TupleElementTos}
            Value
                $String
                    public static [[${TypeFriendlyName}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }
                        var ja = j as JArray;
                        var t = new [[${TypeFriendlyName}]]();
                        ${TupleElementFroms}
                        return t;
                    }
                    public static JArray [[${TypeFriendlyName}ToJson]]([[${TypeFriendlyName}]] t)
                    {
                        var ja = new JArray();
                        ${TupleElementTos}
                        return ja;
                    }
        Template
            Name JsonTranslator_TupleElementFrom
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    t.[[Item${NameIndex}]] = [[${TypeFriendlyName}FromJson]](ja[${NameIndex}]);
        Template
            Name JsonTranslator_TupleElementTo
            //Parameters: ${NameIndex}, ${TypeFriendlyName}
            Value
                $String
                    ja.Add([[${TypeFriendlyName}ToJson]](t.[[Item${NameIndex}]]));
        Template
            Name JsonTranslator_List
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${ElementTypeFriendlyName}
            Value
                $String
                    public static [[${TypeString}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Array) { throw new InvalidOperationException(); }
                        var ja = j as JArray;
                        var a = new [[${TypeString}]]();
                        foreach (var e in ja.Children())
                        {
                            a.Add([[${ElementTypeFriendlyName}FromJson]](e));
                        }
                        return a;
                    }
                    public static JArray [[${TypeFriendlyName}ToJson]]([[${TypeString}]] l)
                    {
                        var ja = new JArray();
                        foreach (var e in l)
                        {
                            ja.Add([[${ElementTypeFriendlyName}ToJson]](e));
                        }
                        return ja;
                    }
        Template
            Name JsonTranslator_Optional
            //Parameters: ${TypeFriendlyName}, ${TypeString}, ${AlternativeFroms}, ${AlternativeTos}
            Value
                $String
                    public static [[${TypeString}]] [[${TypeFriendlyName}FromJson]](JToken j)
                    {
                        if (j.Type != JTokenType.Object) { throw new InvalidOperationException(); }
                        var jo = j as JObject;
                        var o = new [[${TypeString}]]();
                        var d = (IDictionary<string, JToken>)(jo);
                        ${AlternativeFroms}
                        throw new InvalidOperationException();
                    }
                    public static JObject [[${TypeFriendlyName}ToJson]]([[${TypeString}]] o)
                    {
                        var jo = new JObject();
                        ${AlternativeTos}
                        throw new InvalidOperationException();
                    }
