//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Yuki.ObjectSchema.CSharpRetry
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<Object> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(Object Identifier)
        {
            yield return GetEscapedIdentifier(Convert.ToString(Identifier, System.Globalization.CultureInfo.InvariantCulture));
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> Identifiers)
        {
            foreach (var v in Identifiers)
            {
                yield return GetEscapedIdentifier(v);
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<Object> Identifiers)
        {
            foreach (var v in Identifiers)
            {
                yield return GetEscapedIdentifier(Convert.ToString(v, System.Globalization.CultureInfo.InvariantCulture));
            }
        }
        public IEnumerable<String> RetryWrapper(List<TypeDef> Commands)
        {
            yield return "public sealed class RetryWrapper : IApplicationServer";
            yield return "{";
            yield return "    private IApplicationServer Inner;";
            yield return "    private Func<Exception, Boolean> IsRetryable;";
            yield return "    private int MaxRetryCount;";
            yield return "";
            yield return "    public RetryWrapper(IApplicationServer Inner, Func<Exception, Boolean> IsRetryable, int MaxRetryCount)";
            yield return "    {";
            yield return "        this.Inner = Inner;";
            yield return "        this.IsRetryable = IsRetryable;";
            yield return "        this.MaxRetryCount = MaxRetryCount;";
            foreach (var sc in Commands.Where(c => c.OnServerCommand))
            {
                var Name = sc.TypeFriendlyName();
                foreach (var _Line in Combine(Combine(Combine(Begin(), "Inner."), GetEscapedIdentifier(Name)), " += e =>"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                yield return "        " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(e); }"))
                {
                    yield return _Line == "" ? "" : "        " + _Line;
                }
                yield return "        " + "};";
            }
            yield return "    }";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        var Name = c.ClientCommand.TypeFriendlyName();
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public void "), GetEscapedIdentifier(Name)), "("), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), " Request, Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), "> Callback, Action<Exception> OnFailure)"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), "> CallbackInner = Reply =>"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "    {";
                        yield return "    " + "        Callback(Reply);";
                        yield return "    " + "    };";
                        yield return "    " + "";
                        yield return "    " + "    var RetryCount = 0;";
                        yield return "    " + "    while (RetryCount < MaxRetryCount)";
                        yield return "    " + "    {";
                        yield return "    " + "        try";
                        yield return "    " + "        {";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "            Inner."), GetEscapedIdentifier(Name)), "(Request, CallbackInner, OnFailure);"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "            return;";
                        yield return "    " + "        }";
                        yield return "    " + "        catch (Exception ex)";
                        yield return "    " + "        {";
                        yield return "    " + "            if (IsRetryable(ex))";
                        yield return "    " + "            {";
                        yield return "    " + "                RetryCount += 1;";
                        yield return "    " + "                continue;";
                        yield return "    " + "            }";
                        yield return "    " + "            else";
                        yield return "    " + "            {";
                        yield return "    " + "                System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();";
                        yield return "    " + "                throw;";
                        yield return "    " + "            }";
                        yield return "    " + "        }";
                        yield return "    " + "    }";
                        yield return "    " + "}";
                    }
                    else
                    {
                        var Name = c.ClientCommand.TypeFriendlyName();
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Reply"))), " "), GetEscapedIdentifier(Name)), "("), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Request"))), " Request)"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "{";
                        yield return "    " + "    var RetryCount = 0;";
                        yield return "    " + "    while (RetryCount < MaxRetryCount)";
                        yield return "    " + "    {";
                        yield return "    " + "        try";
                        yield return "    " + "        {";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "            var Reply = Inner."), GetEscapedIdentifier(Name)), "(Request);"))
                        {
                            yield return _Line == "" ? "" : "    " + _Line;
                        }
                        yield return "    " + "            return Reply;";
                        yield return "    " + "        }";
                        yield return "    " + "        catch (Exception ex)";
                        yield return "    " + "        {";
                        yield return "    " + "            if (IsRetryable(ex))";
                        yield return "    " + "            {";
                        yield return "    " + "                RetryCount += 1;";
                        yield return "    " + "                continue;";
                        yield return "    " + "            }";
                        yield return "    " + "            else";
                        yield return "    " + "            {";
                        yield return "    " + "                System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(ex).Throw();";
                        yield return "    " + "                throw;";
                        yield return "    " + "            }";
                        yield return "    " + "        }";
                        yield return "    " + "    }";
                        yield return "    " + "    throw new InvalidOperationException(\"MaxRetryCountReached\");";
                        yield return "    " + "}";
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.TypeFriendlyName();
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public event Action<"), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "Event"))), "> "), GetEscapedIdentifier(Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                }
            }
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            yield return "using System;";
            yield return "using System.Collections.Generic;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "using "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            var Primitives = GetPrimitives(Schema);
            foreach (var _Line in Combine(Begin(), Primitives))
            {
                yield return _Line;
            }
            yield return "";
            var ComplexTypes = GetComplexTypes(Schema);
            if (NamespaceName == "")
            {
                foreach (var _Line in Combine(Begin(), ComplexTypes))
                {
                    yield return _Line;
                }
            }
            else
            {
                foreach (var _Line in Combine(Combine(Begin(), "namespace "), GetEscapedIdentifier(NamespaceName)))
                {
                    yield return _Line;
                }
                yield return "{";
                foreach (var _Line in Combine(Combine(Begin(), "    "), ComplexTypes))
                {
                    yield return _Line;
                }
                yield return "}";
            }
            yield return "";
        }
    }
}
