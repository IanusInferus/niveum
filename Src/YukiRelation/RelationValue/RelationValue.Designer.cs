//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

//Reference:

using System;
using System.Collections.Generic;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Yuki.RelationValue
{
    /// <summary>表数据</summary>
    [Record]
    public sealed class RelationVal
    {
        /// <summary>行数据</summary>
        public List<TableVal> Tables { get; set; }
    }

    /// <summary>表数据</summary>
    [Record]
    public sealed class TableVal
    {
        /// <summary>行数据</summary>
        public List<RowVal> Rows { get; set; }
    }

    /// <summary>行数据</summary>
    [Record]
    public sealed class RowVal
    {
        /// <summary>列数据</summary>
        public List<ColumnVal> Columns { get; set; }
    }

    public enum ColumnValTag
    {
        /// <summary>基元数据</summary>
        Primitive = 0,
        /// <summary>可选数据</summary>
        Optional = 1
    }
    /// <summary>列数据</summary>
    [TaggedUnion]
    public sealed class ColumnVal
    {
        [Tag] public ColumnValTag _Tag { get; set; }

        /// <summary>基元数据</summary>
        public PrimitiveVal Primitive { get; set; }
        /// <summary>可选数据</summary>
        public Optional<PrimitiveVal> Optional { get; set; }

        /// <summary>基元数据</summary>
        public static ColumnVal CreatePrimitive(PrimitiveVal Value) { return new ColumnVal { _Tag = ColumnValTag.Primitive, Primitive = Value }; }
        /// <summary>可选数据</summary>
        public static ColumnVal CreateOptional(Optional<PrimitiveVal> Value) { return new ColumnVal { _Tag = ColumnValTag.Optional, Optional = Value }; }

        /// <summary>基元数据</summary>
        public Boolean OnPrimitive { get { return _Tag == ColumnValTag.Primitive; } }
        /// <summary>可选数据</summary>
        public Boolean OnOptional { get { return _Tag == ColumnValTag.Optional; } }
    }

    public enum PrimitiveValTag
    {
        /// <summary>布尔</summary>
        BooleanValue = 0,
        /// <summary>字符串</summary>
        StringValue = 1,
        /// <summary>整数</summary>
        IntValue = 2,
        /// <summary>实数</summary>
        RealValue = 3,
        /// <summary>二进制</summary>
        BinaryValue = 4,
        /// <summary>64位有符号整数</summary>
        Int64Value = 5
    }
    /// <summary>基元数值</summary>
    [TaggedUnion]
    public sealed class PrimitiveVal
    {
        [Tag] public PrimitiveValTag _Tag { get; set; }

        /// <summary>布尔</summary>
        public Boolean BooleanValue { get; set; }
        /// <summary>字符串</summary>
        public String StringValue { get; set; }
        /// <summary>整数</summary>
        public Int IntValue { get; set; }
        /// <summary>实数</summary>
        public Real RealValue { get; set; }
        /// <summary>二进制</summary>
        public List<Byte> BinaryValue { get; set; }
        /// <summary>64位有符号整数</summary>
        public Int64 Int64Value { get; set; }

        /// <summary>布尔</summary>
        public static PrimitiveVal CreateBooleanValue(Boolean Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.BooleanValue, BooleanValue = Value }; }
        /// <summary>字符串</summary>
        public static PrimitiveVal CreateStringValue(String Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.StringValue, StringValue = Value }; }
        /// <summary>整数</summary>
        public static PrimitiveVal CreateIntValue(Int Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.IntValue, IntValue = Value }; }
        /// <summary>实数</summary>
        public static PrimitiveVal CreateRealValue(Real Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.RealValue, RealValue = Value }; }
        /// <summary>二进制</summary>
        public static PrimitiveVal CreateBinaryValue(List<Byte> Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.BinaryValue, BinaryValue = Value }; }
        /// <summary>64位有符号整数</summary>
        public static PrimitiveVal CreateInt64Value(Int64 Value) { return new PrimitiveVal { _Tag = PrimitiveValTag.Int64Value, Int64Value = Value }; }

        /// <summary>布尔</summary>
        public Boolean OnBooleanValue { get { return _Tag == PrimitiveValTag.BooleanValue; } }
        /// <summary>字符串</summary>
        public Boolean OnStringValue { get { return _Tag == PrimitiveValTag.StringValue; } }
        /// <summary>整数</summary>
        public Boolean OnIntValue { get { return _Tag == PrimitiveValTag.IntValue; } }
        /// <summary>实数</summary>
        public Boolean OnRealValue { get { return _Tag == PrimitiveValTag.RealValue; } }
        /// <summary>二进制</summary>
        public Boolean OnBinaryValue { get { return _Tag == PrimitiveValTag.BinaryValue; } }
        /// <summary>64位有符号整数</summary>
        public Boolean OnInt64Value { get { return _Tag == PrimitiveValTag.Int64Value; } }
    }
}
