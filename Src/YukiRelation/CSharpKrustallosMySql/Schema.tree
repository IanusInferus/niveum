$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C# Krustallos-MySQL代码模板数据
      Version:     2014.10.24.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}, ${DataLoad}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}
                    using Version = Krustallos.Version;

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                    ${DataLoad}

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}, ${DataLoad}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}
                    using Version = Krustallos.Version;

                    ${ComplexTypes}

                    ${DataLoad}

                $End
        Template
            Name Header
            //Parameters: ${EntityNamespaceName}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Collections.Concurrent;
                    using System.Diagnostics;
                    using System.Data;
                    using Krustallos;
                    using ${EntityNamespaceName};
        Template
            Name DataAccessBase
            //Parameters:
            Value
                $String
                    public partial class KrustallosMySqlDataAccess : IDataAccess
                    {
                        private KrustallosDataAccess Cache;
                        private MySqlDataAccess Underlying
                        {
                            get
                            {
                                if (UnderlyingValue != null) { return UnderlyingValue; }
                                UnderlyingValue = UnderlyingFactory();
                                return UnderlyingValue;
                            }
                        }
                        private Func<MySqlDataAccess> UnderlyingFactory;
                        private MySqlDataAccess UnderlyingValue;
                        public KrustallosMySqlDataAccess(KrustallosDataAccess Cache, Func<MySqlDataAccess> UnderlyingFactory)
                        {
                            this.Cache = Cache;
                            this.UnderlyingFactory = UnderlyingFactory;
                        }

                        public void Dispose()
                        {
                            Cache.Dispose();
                            if (UnderlyingValue != null)
                            {
                                UnderlyingValue.Dispose();
                            }
                        }

                        public void Complete()
                        {
                            if (UnderlyingValue != null)
                            {
                                UnderlyingValue.Complete();
                            }
                            Cache.Complete();
                        }
                    }
        Template
            Name DataAccess
            //Parameters: ${Queries}
            Value
                $String
                    public partial class KrustallosMySqlDataAccess
                    {
                        ${Queries}
                    }
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    public ${Signature}
                    {
                        ${Content}
                    }
        Template
            Name SelectLock
            //Parameters: ${QueryName}, ${Parameters}
            Value
                $String
                    return this.Cache.[[${QueryName}]](${Parameters});
        Template
            Name InsertUpdateUpsertDelete
            //Parameters: ${QueryName}, ${Parameters}
            Value
                $String
                    this.Cache.[[${QueryName}]](${Parameters});
                    this.Underlying.[[${QueryName}]](${Parameters});
        Template
            Name DataAccessPool
            //Parameters: ${Hash}
            Value
                $String
                    public class KrustallosMySqlDataAccessPool
                    {
                        public UInt64 Hash
                        {
                            get
                            {
                                return 0x${Hash};
                            }
                        }

                        private class InstanceInfo
                        {
                            public Instance Instance = new Instance();
                            private String ConnectionString;
                            private IsolationLevel IsolationLevel;
                            private Object Lockee = new Object();
                            public KrustallosData Data
                            {
                                get
                                {
                                    lock (Lockee)
                                    {
                                        if (DataValue != null)
                                        {
                                            return DataValue;
                                        }
                                        DataValue = new KrustallosData();
                                        using (var da = new MySqlDataAccess(ConnectionString, IsolationLevel, (ITransactionLock)(null)))
                                        {
                                            da.Load(DataValue);
                                        }
                                        return DataValue;
                                    }
                                }
                            }
                            private KrustallosData DataValue;

                            public InstanceInfo(String ConnectionString, IsolationLevel IsolationLevel)
                            {
                                this.ConnectionString = ConnectionString;
                                this.IsolationLevel = IsolationLevel;
                            }
                        }
                        private static ConcurrentDictionary<String, InstanceInfo> Instances = new ConcurrentDictionary<String, InstanceInfo>();

                        public IDataAccess Create(String ConnectionString)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel.ReadCommitted, TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel)
                        {
                            return Create(ConnectionString, IsolationLevel, (ITransactionLock)(null));
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, ITransactionLock TransactionLock)
                        {
                            return Create(ConnectionString, IsolationLevel, t => TransactionLock);
                        }
                        public IDataAccess Create(String ConnectionString, IsolationLevel IsolationLevel, Func<Transaction, ITransactionLock> TransactionLockFactory)
                        {
                            var ii = Instances.GetOrAdd(ConnectionString, Key => new InstanceInfo(Key, IsolationLevel));
                            var k = new KrustallosDataAccess(ii.Instance, ii.Data, IsolationLevel, TransactionLockFactory);
                            return new KrustallosMySqlDataAccess(k, () => new MySqlDataAccess(ConnectionString, IsolationLevel, (ITransactionLock)(null)));
                        }
                    }
        Template
            Name DataLoadWithNamespace
            //Parameters: ${NamespaceName}, ${Loads}
            Value
                $String
                    namespace [[${NamespaceName}]]
                    {
                        public partial class MySqlDataAccess
                        {
                            public void Load(KrustallosData Data)
                            {
                                ${Loads}
                            }
                        }
                    }
        Template
            Name DataLoadWithoutNamespace
            //Parameters: ${Loads}
            Value
                $String
                    public partial class MySqlDataAccess
                    {
                        public void Load(KrustallosData Data)
                        {
                            ${Loads}
                        }
                    }
        Template
            Name DataLoad_Load
            //Parameters: ${IndexNames}, ${Updates}, ${EntityName}, ${SQL}, ${ResultSets}
            Value
                $String
                    {
                        var [[${IndexNames}]] = Data.[[${IndexNames}]].GetLastVersionContent();
                        var cmd = CreateTextCommand();
                        cmd.CommandText = @"${SQL}";
                        using (var dr = cmd.ExecuteReader())
                        {
                            while (dr.Read())
                            {
                                var v = new [[${EntityName}]]
                                {
                                    ${ResultSets}
                                };
                                ${Updates}
                            }
                        }
                        Data.[[${IndexNames}]].PutVersion(new Version(0), [[${IndexNames}]]);
                    }
        Template
            Name DataLoad_Update
            //Parameters: ${IndexName}, ${Key}
            Value
                $String
                    [[${IndexName}]] = [[${IndexName}]].AddOrSetItem(new Key(${Key}), v);
        Template
            Name SelectLock_ResultSet
            //Parameters: ${ParameterName}, ${TypeGet}
            Value
                $String
                    [[${ParameterName}]] = [[${TypeGet}]](dr, "${ParameterName}"),
        Template
            Name SelectLock_ResultSet_Last
            //Parameters: ${ParameterName}, ${TypeGet}
            Value
                $String
                    [[${ParameterName}]] = [[${TypeGet}]](dr, "${ParameterName}")
