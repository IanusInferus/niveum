$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C++ Memory代码模板数据
      Version:     2017.07.18.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name NamespaceImplementation
            //Parameters: ${NamespaceName}, ${Contents}
            Value
                $String
                    namespace _Impl
                    {
                        using namespace cpplinq;
                        using namespace ${EntityNamespaceName};
                        ${Contents}
                    }
                    typedef _Impl::MemoryDataAccess MemoryDataAccess;
        Template
            Name DataAccess
            //Parameters: ${Tables}, ${Indices}, ${Streams}, ${BinaryTranslator}, ${Generates}, ${Hash}, ${Queries}
            Value
                $String
                    class MemoryDataTables
                    {
                    public:
                        ${Tables}
                    };

                    class MemoryDataIndices
                    {
                    public:
                        ${Indices}
                    };

                    ${Streams}

                    ${BinaryTranslator}

                    class MemoryDataAccess : public IDataAccess
                    {
                    public:
                        std::shared_ptr<MemoryDataTables> Tables;
                        std::shared_ptr<MemoryDataIndices> Indices;

                        MemoryDataAccess(std::shared_ptr<std::vector<std::uint8_t>> Buffer)
                        {
                            {
                                ByteArrayStream bas;
                                bas.WriteBytes(Buffer);
                                bas.SetPosition(0);
                                if (bas.ReadUInt64() != 0x415441445355524B) { throw std::logic_error("InvalidOperation"); }
                                auto Hash = bas.ReadUInt64();
                                if (Hash != 0x${Hash}) { throw std::logic_error("InvalidOperation"); }
                                auto SchemaLength = bas.ReadInt64();
                                bas.SetPosition(bas.GetPosition() + SchemaLength);
                                bas.ReadInt64();
                                Tables = BinaryTranslator::MemoryDataTablesFromBinary(bas);
                            }
                            Indices = std::make_shared<MemoryDataIndices>();
                            ${Generates}
                        }

                    public:
                        static inline std::shared_ptr<IDataAccess> Create(std::shared_ptr<std::vector<std::uint8_t>> Buffer)
                        {
                            return std::static_pointer_cast<IDataAccess>(std::make_shared<MemoryDataAccess>(Buffer));
                        }

                        void Complete()
                        {
                        }

                        ${Queries}
                    };
        Template
            Name DataAccessBase_Table
            //Parameters: ${EntityName}
            Value
                $String
                    std::vector<std::shared_ptr<class [[${EntityName}]]>> [[${EntityName}]];
        Template
            Name DataAccessBase_Index
            //Parameters: ${IndexName}, ${IndexType}
            Value
                $String
                    [[${IndexType}]] [[${IndexName}]];
        Template
            Name DataAccessBase_Generate
            //Parameters: ${EntityName}, ${IndexName}, ${IndexType}, ${Fetches}, ${Add}
            Value
                $String
                    {
                        Indices->[[${IndexName}]] = std::make_shared<${IndexType}>();
                        auto &Table = *Indices->[[${IndexName}]];
                        for (auto &&r : Tables->[[${EntityName}]])
                        {
                            ${Fetches}
                            ${Add}
                        }
                    }
        Template
            Name DataAccessBase_Generate_Fetch
            //Parameters: ${ParentByIndex}, ${RemainIndexType}, ${Column}, ${ByIndex}
            Value
                $String
                    if ([[Table${ParentByIndex}]].count(r->[[${Column}]]) <= 0) { [[Table${ParentByIndex}]][r->[[${Column}]]] = std::make_shared<[[${RemainIndexType}]]>(); }
                    auto &[[Table${ByIndex}]] = *[[Table${ParentByIndex}]][r->[[${Column}]]];
        Template
            Name DataAccessBase_Generate_Add
            //Parameters: ${ByIndex}
            Value
                $String
                    [[Table${ByIndex}]].push_back(k);
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    ${Signature}
                    {
                        ${Content}
                    }
        Template
            Name SelectMany_Fetch
            //Parameters: ${EntityName}, ${ParentByIndex}, ${Column}, ${ByIndex}, ${WhenEmpty}
            Value
                $String
                    if ([[_Index${ParentByIndex}_]].count(${Column}) <= 0)
                    {
                        ${WhenEmpty}
                    }
                    auto &[[_Index${ByIndex}_]] = *[[_Index${ParentByIndex}_]][${Column}];
        Template
            Name SelectLock_Optional
            //Parameters: ${ManyName}, ${Parameters}, ${EntityName}, ${IndexName}, ${Fetches}, ${ByIndex}, ${Filters}
            Value
                $String
                    auto &_Index_ = *this->Indices->[[${IndexName}]];
                    ${Fetches}
                    auto _l_ = from([[_Index${ByIndex}_]])${Filters}>>select([&](Int _i_) { return this->Tables->[[${EntityName}]][_i_]; })>>to_vector();
                    if (_l_.size() == 0) { return nullptr; }
                    if (_l_.size() != 1) { throw std::logic_error("NotSingle"); }
                    return _l_[0];
        Template
            Name SelectLock_Optional_WhenEmpty
            //Parameters: ${EntityName}
            Value
                $String
                    return nullptr;
        Template
            Name SelectLock_One
            //Parameters: ${ManyName}, ${Parameters}, ${EntityName}, ${IndexName}, ${Fetches}, ${ByIndex}, ${Filters}
            Value
                $String
                    auto &_Index_ = *this->Indices->[[${IndexName}]];
                    ${Fetches}
                    auto _l_ = from([[_Index${ByIndex}_]])${Filters}>>select([&](Int _i_) { return this->Tables->[[${EntityName}]][_i_]; })>>to_vector();
                    if (_l_.size() != 1) { throw std::logic_error("NotSingle"); }
                    return _l_[0];
        Template
            Name SelectLock_One_WhenEmpty
            //Parameters: ${EntityName}
            Value
                $String
                    throw std::logic_error("NotExist");
        Template
            Name SelectLock_Many
            //Parameters: ${ManyName}, ${Parameters}, ${OrderBys}, ${EntityName}, ${IndexName}, ${Fetches}, ${ByIndex}, ${Filters}
            Value
                $String
                    auto &_Index_ = *this->Indices->[[${IndexName}]];
                    ${Fetches}
                    auto _l_ = from([[_Index${ByIndex}_]])${Filters}>>select([&](Int _i_) { return this->Tables->[[${EntityName}]][_i_]; })${OrderBys}>>to_vector();
                    return std::make_shared<std::vector<std::shared_ptr<class [[${EntityName}]]>>>(std::move(_l_));
        Template
            Name SelectLock_All
            //Parameters: ${AllName}, ${OrderBys}, ${EntityName}
            Value
                $String
                    auto _l_ = from(this->Tables->[[${EntityName}]])${OrderBys}>>to_vector();
                    return std::make_shared<std::vector<std::shared_ptr<class [[${EntityName}]]>>>(std::move(_l_));
        Template
            Name SelectLock_Range
            //Parameters: ${ManyName}, ${Parameters}, ${OrderBys}, ${EntityName}, ${IndexName}, ${Fetches}, ${ByIndex}, ${Filters}
            Value
                $String
                    auto &_Index_ = *this->Indices->[[${IndexName}]];
                    ${Fetches}
                    auto _l_ = from([[_Index${ByIndex}_]])${Filters}>>select([&](Int _i_) { return this->Tables->[[${EntityName}]][_i_]; })${OrderBys}>>skip(_Skip_)>>take(_Take_)>>to_vector();
                    return std::make_shared<std::vector<std::shared_ptr<class [[${EntityName}]]>>>(std::move(_l_));
        Template
            Name SelectLock_RangeAll
            //Parameters: ${AllName}, ${OrderBys}, ${EntityName}
            Value
                $String
                    auto _l_ = from(this->Tables->[[${EntityName}]])${OrderBys}>>skip(_Skip_)>>take(_Take_)>>to_vector();
                    return std::make_shared<std::vector<std::shared_ptr<class [[${EntityName}]]>>>(std::move(_l_));
        Template
            Name SelectLock_ManyRange_WhenEmpty
            //Parameters: ${EntityName}
            Value
                $String
                    return std::make_shared<std::vector<std::shared_ptr<class [[${EntityName}]]>>>();
        Template
            Name SelectLock_Count
            //Parameters: ${ManyName}, ${Parameters}, ${EntityName}, ${IndexName}, ${Fetches}, ${ByIndex}, ${Filters}
            Value
                $String
                    auto &_Index_ = *this->Indices->[[${IndexName}]];
                    ${Fetches}
                    auto _c_ = from([[_Index${ByIndex}_]]${Filters})>>select([&](Int _i_) { return this->Tables->[[${EntityName}]][_i_]; })${OrderBys}>>count();
                    return _c_;
        Template
            Name SelectLock_Count_WhenEmpty
            //Parameters: ${EntityName}
            Value
                $String
                    return 0;
        Template
            Name InsertUpdateUpsertDelete
            //Parameters:
            Value
                $String
                    throw std::logic_error("NotSupportedException");
        Template
            Name Main
            //Parameters: ${Includes}, ${Primitives}, ${SimpleTypes}, ${EnumFunctors}, ${ComplexTypes}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    #pragma once

                    #include <cstddef>
                    #include <cstdint>
                    #include <string>
                    #include <vector>
                    #include <map>
                    #include <memory>
                    #include <stdexcept>
                    #include <utility>
                    #include <cpplinq.hpp>
                    #include ${Includes}
                    ${Primitives}
                    ${SimpleTypes}
                    ${EnumFunctors}
                    ${ComplexTypes}

                $End
