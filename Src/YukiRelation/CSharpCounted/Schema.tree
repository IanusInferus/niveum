$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Relation <Tree>
      Description: 关系类型结构C# 计时包装代码模板数据
      Version:     2014.10.25.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${Primitives}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};
                    ${Primitives}

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters: ${EntityNamespaceName}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Diagnostics;
                    using ${EntityNamespaceName};
        Template
            Name DataAccessBase
            //Parameters:
            Value
                $String
                    public partial class CountedDataAccessWrapper : IDataAccess
                    {
                        private int Count;
                        private Stopwatch sw;
                        private IDataAccess Inner;
                        private Action<int, long> Report;
                        public CountedDataAccessWrapper(Func<IDataAccess> InnerDataAccessFactory, Action<int, long> Report)
                        {
                            if (Report != null)
                            {
                                Count = 0;
                                sw = new Stopwatch();
                                sw.Start();
                            }
                            try
                            {
                                this.Inner = InnerDataAccessFactory();
                            }
                            finally
                            {
                                if (Report != null)
                                {
                                    sw.Stop();
                                }
                            }
                            this.Report = Report;
                        }

                        public void Dispose()
                        {
                            if (Report != null)
                            {
                                sw.Start();
                            }
                            try
                            {
                                Inner.Dispose();
                            }
                            finally
                            {
                                if (Report != null)
                                {
                                    sw.Stop();
                                    Report(Count, (sw.ElapsedTicks * 1000000) / Stopwatch.Frequency);
                                }
                            }
                        }

                        public void Complete()
                        {
                            if (Report != null)
                            {
                                sw.Start();
                            }
                            try
                            {
                                Inner.Complete();
                            }
                            finally
                            {
                                if (Report != null)
                                {
                                    sw.Stop();
                                }
                            }
                        }
                    }
        Template
            Name DataAccess
            //Parameters: ${Queries}
            Value
                $String
                    public partial class CountedDataAccessWrapper
                    {
                        ${Queries}
                    }
        Template
            Name Query
            //Parameters: ${Signature}, ${Content}
            Value
                $String
                    public ${Signature}
                    {
                        if (this.Report != null)
                        {
                            this.Count += 1;
                            this.sw.Start();
                        }
                        try
                        {
                            ${Content}
                        }
                        finally
                        {
                            if (this.Report != null)
                            {
                                this.sw.Stop();
                            }
                        }
                    }
        Template
            Name SelectLock
            //Parameters: ${QueryName}, ${Parameters}
            Value
                $String
                    return this.Inner.[[${QueryName}]](${Parameters});
        Template
            Name InsertUpdateUpsertDelete
            //Parameters: ${QueryName}, ${Parameters}
            Value
                $String
                    this.Inner.[[${QueryName}]](${Parameters});
