$Comment
    ==========================================================================

      File:        CSharpDatabase.tree
      Location:    Yuki.Relation <Tree>
      Description: 对象类型结构C# Linq to Entities数据库模板数据
      Version:     2012.11.21.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
        PrimitiveMapping
            Name Boolean
            PlatformName System.Boolean
        PrimitiveMapping
            Name String
            PlatformName System.String
        PrimitiveMapping
            Name Int
            PlatformName System.Int32
        PrimitiveMapping
            Name Real
            PlatformName System.Double
        PrimitiveMapping
            Name Binary
            PlatformName System.Byte[]
    Templates
        Template
            Name Main
            //Parameters: ${EntityNamespaceName}, ${ContextNamespaceName}, ${Imports}, ${Primitives}, ${EntityComplexTypes}, ${ContextComplexTypes}
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using System.ComponentModel.DataAnnotations;
                    using System.ComponentModel.DataAnnotations.Schema;
                    using ${Imports};
                    using [[${EntityNamespaceName}]];
                    ${Primitives}

                    namespace [[${EntityNamespaceName}]]
                    {
                        ${EntityComplexTypes}
                    }

                    namespace [[${ContextNamespaceName}]]
                    {
                        ${ContextComplexTypes}
                    }

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
        Template
            Name Primitive
            //Parameters: ${Name}, ${PlatformName}
            Value
                $String
                    using [[${Name}]] = ${PlatformName};
        Template
            Name Literal
            //Parameters: ${Name}, ${Value}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [[${Name}]] = ${Value},
        Template
            Name Enum
            //Parameters: ${Name}, ${UnderlyingType}, ${Literals}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public enum [[${Name}]] : ${UnderlyingType}
                    {
                        ${Literals}
                    }
        Template
            Name Table
            //Parameters: ${RecordName}, ${TableName}, ${Properties}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [Table("${TableName}")]
                    public class [[${RecordName}]]
                    {
                        ${Properties}
                    }
        Template
            Name ColumnProperty
            //Parameters: ${Name}, ${ColumnAttributes}, ${PropertyType}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [${ColumnAttributes}]
                    public [[${PropertyType}]] [[${Name}]] { get; set; }
        Template
            Name AssociationProperty
            //Parameters: ${Name}, ${AssociationAttributes}, ${PropertyType}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    [${AssociationParameters}]
                    public virtual [[${PropertyType}]] [[${Name}]] { get; set; }
        Template
            Name Context
            //Parameters: ${DatabaseName}, ${ContextClassName}, ${TableGetters}
            Value
                $String
                    public partial class [[${ContextClassName}]] : System.Data.Entity.DbContext, IReadonlyContext
                    {
                        public [[${ContextClassName}]](System.Data.Common.DbConnection connection)
                            : base(connection, true)
                        {
                        }

                        ${TableGetters}
                    }
        Template
            Name TableGetter
            //Parameters: ${RecordName}, ${TableName}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    public System.Data.Entity.DbSet<[[${RecordName}]]> [[${TableName}]] { get; set; }
                    IQueryable<[[${RecordName}]]> IReadonlyContext.[[${TableName}]] { get { return [[${TableName}]]; } }
        Template
            Name IReadonlyContext
            //Parameters: ${TableGetters}
            Value
                $String
                    public interface IReadonlyContext
                    {
                        ${TableGetters}
                    }
        Template
            Name IReadonlyContextTableGetter
            //Parameters: ${RecordName}, ${TableName}, ${XmlComment}
            Value
                $String
                    ${XmlComment}
                    IQueryable<[[${RecordName}]]> [[${TableName}]] { get; }
        Template
            Name DbExtensions
            //Parameters: ${Methods}
            Value
                $String
                    public static class DbExtensions
                    {
                        ${Methods}
                    }
        Template
            Name WhereKeyIs
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static IQueryable<[[${RecordName}]]> [[Where${KeyFriendlyName}Is]](this IQueryable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions};
                    }
                    public static IEnumerable<[[${RecordName}]]> [[Where${KeyFriendlyName}Is]](this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions};
                    }
        Template
            Name ByKey
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static [[${RecordName}]] [[By${KeyFriendlyName}]](this IQueryable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions}.Single();
                    }
                    public static [[${RecordName}]] [[By${KeyFriendlyName}]](this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters})
                    {
                        return _This.${KeyWhereExpressions}.Single();
                    }
        Template
            Name ByKeyT
            //Parameters: ${RecordName}, ${KeyFriendlyName}, ${KeyParameters}, ${KeyWhereExpressions}
            Value
                $String
                    public static _T [[By${KeyFriendlyName}]]<_T>(this IQueryable<[[${RecordName}]]> _This, ${KeyParameters}, Func<[[${RecordName}]], _T> _Projector)
                    {
                        return _This.${KeyWhereExpressions}.Select(_Projector).Single();
                    }
                    public static _T [[By${KeyFriendlyName}]]<_T>(this IEnumerable<[[${RecordName}]]> _This, ${KeyParameters}, Func<[[${RecordName}]], _T> _Projector)
                    {
                        return _This.${KeyWhereExpressions}.Select(_Projector).Single();
                    }
        Template
            Name MultiLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /// <summary>
                    /// ${Description}
                    /// </summary>
        Template
            Name SingleLineXmlComment
            //Parameters: ${Description}
            Value
                $String
                    /// <summary>${Description}</summary>
