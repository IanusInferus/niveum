#Option
    InlineExpressionRegex "\$(?<open>{)+(?<Expr>.*?)(?<-open>})+(?(open)(?!))" //${xxxx}, ${{xxxx}}, ${{{xxxx}}}, ...
    Filters
        Filter
            Name GetEscapedIdentifier
            Regex "\[\[(?<Identifier>.*?)\]\]"
            Parameters
                Identifier
    EnableEmbeddedExpr False

#Namespace Niveum.ObjectSchema.CSharp

#Constant A:Map<String, Optional<Int>>
    Pair
        Key
            1
        Value
            Some 2
    Pair
        Key
            1
        Value
            None $Empty

#Constant B:Float64
    1.5

#Constant C:String
    1.5

#Constant D:Type
    Map<Int, String>

#Constant Keywords:Set<String>
    $List String
        abstract
        event
        new
        struct
        as
        explicit
        null
        switch
        base
        extern
        object
        this
        bool
        false
        operator
        throw
        break
        finally
        out
        true
        byte
        fixed
        override
        try
        case
        float
        params
        typeof
        catch
        for
        private
        uint
        char
        foreach
        protected
        ulong
        checked
        goto
        public
        unchecked
        class
        if
        readonly
        unsafe
        const
        implicit
        ref
        ushort
        continue
        in
        return
        using
        decimal
        int
        sbyte
        virtual
        default
        interface
        sealed
        volatile
        delegate
        internal
        short
        void
        do
        is
        sizeof
        while
        double
        lock
        stackalloc
        else
        long
        static
        enum
        namespace
        string
        get
        partial
        set
        value
        where
        yield

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                Unit
        Boolean             System.Boolean
        String              System.String
        Int                 System.Int32
        Real                System.Double
        Byte                System.Byte
        UInt8               System.Byte
        UInt16              System.UInt16
        UInt32              System.UInt32
        UInt64              System.UInt64
        Int8                System.SByte
        Int16               System.Int16
        Int32               System.Int32
        Int64               System.Int64
        Float32             System.Single
        Float64             System.Double
        Type                System.Type
        Optional            Optional
        List                System.Collections.Generic.List
        Set                 System.Collections.Generic.HashSet
        Map                 System.Collections.Generic.Dictionary

#Constant A:Map<String, Optional<Int>>
    Pair
        Key
            1
        Value
            Some 2
    Pair
        Key
            1
        Value
            None $Empty

#Assembly
    System
    System.Core

#Import
    System
    System.Collections.Generic
    System.Linq
    System.Linq.Enumerable

#Template Test a:Int b:List<Mat{ \n\x7B\u007B\U0007B}ch>
    //====
    ${a}
    [[abcd${"123"}]]efgh
        $$
            Yield a.ToString()

        $End
    $$
        Yield a.ToString()

#Primitive Int
#Primitive String

#Alias Vector
    Tuple<Int, Int>

#Record Record1
    Field1      Int
    Field2      Int
    Field3      List<Int>

#TaggedUnion TaggedUnion1
    Alternative1    Record1
    Alternative2    String
    Alternative3    Int
    Alternative4    Unit

#Enum Enum1
    Literal1
    Literal2

#Template TestSyntax
    $$
        $Comment
            Test

        $Comment
            Test

        $End

        $String
            abc
            123

        Test (1, 2)
        Test(1, 2)
        Test (1, 2) (1, 2)
        Test(1, 2)(1, 2)

        namespace.namespace.Test().Test()()
        namespace.namespace.Test(1).Test.Test(1)(1)
        namespace.namespace.Test(1, 2).Test.Test.Test(1, 2)(1, 2)

        ParentClass<A, B>.Test.ChildClass<A, B>

        1 . 2

        A(B(
            C
            D
        ),
        E(
            F
        ), G)
        H(
            I
                J
        )

        A((B))
        A ((B))
        A (())

        (1, 2)
        (
            1
            2
        )
        Let Test1 =
            1
            2
        Let Test2:List<Int> =
        $End
        Let Test3:List<Int> = ()

        Yield "123"

        YieldMany ("123", "234")
        YieldMany
            ("123", "234")

        ##
            //${"123"}//

        Throw
        Throw "Invalid"

        Let a1 = 1

        Let (a2, _) = (1, 2)
        Let (
            a3:Int
            _:Int
        ) = (
            1
            2
        )
        Let (a4, _) =
            1
            2

        Let a5 = (1, 2)
        Let a6 = Tuple<Int, Int>
            1
            2

        Let a7 = Record1(Field1 1, Field2(2), Field3 (1, 2, 3))
        Let a8 = Record1
            Field1 1
            Field2(2)
            Field3 (1, 2, 3)
        Let a82:Record1 =
            Field1
                1
            Field2
                2
            Field3
                (1, 2, 3)

        Let a9 = TaggedUnion1.Alternative2("1")
        Let a10 = TaggedUnion1.Alternative2
            "1"
        Let a11:TaggedUnion1 = Alternative2("1")

        Let a12 = Enum1.Literal1
        Let a13:Enum1 = Literal1

        Let a14 = List<Int>(1, 2, 3)
        Let a15:List<Int> = (1, 2, 3)
        Let a16 = List<Int>
            1
            2
            3

        Let a17 = Map<Int, String>((1, "2"), (2, "3"), (3, "4"))
        Let a18 = Map<Int, String>
            (1, "2")
            (Int(2), String(3))
            (3, "4")

        Let a19 = List<String>
            $List String
                1
                a
                2
                b

        Let a20 = Map<Int, String>
            $Table Tuple<Int, String> Int String
                1   2
                2   3
                3   4

        Let a21 = Map<Int, Record1>
            $Table Tuple<Int, Record1> Int Record1
                1   (Field1 1, Field2 2, Field3 (1, 2, 3))
                2   (Field1 2, Field2 3, Field3 (1, 2, 3))
                3   (Field1 3, Field2 4, Field3 (1, 2, 3))

        Let a22 = (i:Int, j:Int) => i + j
        Let a23 =
            (i:Int, j:Int) =>
                i + j

        Var a24 = 1
        a24 += 2

        If a24 == 0
            Return

        If
            a24 == 0
                1
            a24 == 1
                2
            True
                3

        If ((a24 == 0) 1, (a24 == 1) 2, True 3)
        If (a24 == 0 1, a24 == 1 2, True 3)

        Match a9
            Alternative1(Record1(Field1 (Let v1), Field3 (1, Let v2, 3))) Where v1 > 3
                v1 + v2
            Alternative2(Let v)
                v
            Alternative3(_)
                0
            Alternative4
                0
            _
                Throw

        Match (
            a9
        )
            Alternative1((Field1 (Let v1), Field3 (1, Let v2, 3))) Where v1 > 3 (v1 + v2)
            Alternative2(Let v) v
            Alternative3(_) 0
            Alternative4 0

        Match a9 (Alternative1((Field1 (Let v1), Field3 (1, Let v2, 3))) Where v1 > 3 (v1 + v2), Alternative2(Let v2) v2, Alternative3(_) 0, Alternative4 0)

        Match a1
            0
                1
            1
                2
            (Let aa)
                aa

        Match a16
            (1, 2, Let v) v
            (1, Let v, _) v
            (Let v, _, _) v
            _ 0

        For b In a14
            Yield b
            Yield b

        For (
            b
        ) In (
            a14
        )
            Yield b
            Yield b

        For b In a14 (Yield b, Yield b)


        Var c = 0
        While c < 5
            Yield c.ToString()
            c += 1

        While True
            Continue

        While True
            While True
                Continue 2

        While True
            Break

        While True
            While True
                Break 2

        c = 0
        c += 1
        c -= 1
        (a1, a2) = (a2, a1)

        Let d1 = (a:Int, b:Int) => a + b
        Let d2 = a:Int => a * 2

        Let e = a21(1).Field1.ToString()

        Let f = ! False

        Let g1 = (1 + a) * 3
        Let g2 = *
            + 1 a
            3
        Let g3 =
            *
                +
                    1
                    a
                3

        Let h = Cast(1, String)

File
    Filters $Empty
    Sections
        SectionDef
            Type
                Primitive
                    Name Int
                    GenericParameters
                    $End
                    Description ""
        SectionDef
            Type
                Record
                    Name TestRecord
                    Version ""
                    GenericParameters
                    $End
                    Fields
                        VariableDef
                            Name A
                            Type TypeRef (Name Int) (Version "")
                            Description ""
                        VariableDef
                            Name B
                            Type TypeRef (Name Int) (Version "")
                            Description ""
                    Description ""
