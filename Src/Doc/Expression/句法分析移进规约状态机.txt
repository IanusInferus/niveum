句法分析移进规约状态机


句法分析通过对token进行LR分析来完成。


1.句法规则简记

终结符
0 ::= literal
i ::= identifier
+ ::= binary_operator
! ::= unary_operator
( ::= left_paren
) ::= right_paren
, ::= comma

非终结符
E
P
N

特殊标记
.               // 当前分析点
ε               // 占位符
#               // 文件结束符


2.生成式

可表示为如下

E'::= E        // E'0
E ::= 0        // E0
    | i(P)     // E1
    | i        // E2
    | (E)      // E3
    | !E       // E4
    | E+E      // E5
P ::= ε        // P0
    | N        // P1
N ::= E        // N0
    | N,E      // N1


3.状态项目集

定义Σ为
E ::= .0
    | .i(P)
    | .i
    | .(E)
    | .!E
    | .E+E

状态0
E' ::= .E
Σ

状态1
E ::= 0.

状态2
E ::= i.(P)
    | i.

状态3
E ::= !.E
Σ

状态4
E ::= (.E)
Σ

状态5
E'::= E.
E ::= E.+E

状态6
E ::= i(.P)
P ::= .
    | .N
N ::= .E
    | .N,E
Σ

状态7
E ::= !E.
    | E.+E

状态8
E ::= (E.)
    | E.+E

状态9
E ::= E+.E
Σ

状态10
N ::= E.
E ::= E.+E

状态11
E ::= i(P.)

状态12
P ::= N.
N ::= N.,E

状态13
E ::= (E).

状态14
E ::= E+E.
    | E.+E

状态15
E ::= i(P).

状态16
N ::= N,.E
Σ

状态17
N ::= N,E.
E ::= E.+E


4.状态转移表

  规则  0       i       +       !       (       )       ,       E       P       N       #
状态
0       1       2       x       3       4       x       x       5       x       x       x
1       =>E0    ..      ..      ..      ..      ..      ..      ..      ..      ..      ..
2       =>E2    ..      ..      ..      6       =>E2    ..      ..      ..      ..      ..
3       1       2       x       3       4       x       x       7       x       x       x
4       1       2       x       3       4       x       x       8       x       x       x
5       x       x       9       x       x       x       x       x       x       x       =>E'0,acc
6       1       2       x       3       4       =>P0    x       10      11      12      x
7       =>E4    ..      ..      ..      6       =>E4    ..      ..      ..      ..      ..
8       x       x       9       x       x       13      x       x       x       x       x
9       1       2       x       3       4       x       x       14      x       x       x
10      =>N0    ..      9       =>N0    ..      ..      ..      ..      ..      ..      ..
11      x       x       x       x       x       15      x       x       x       x       x
12      =>P1    ..      ..      ..      ..      ..      16      =>P1    ..      ..      ..
13      =>E3    ..      ..      ..      ..      ..      ..      ..      ..      ..      ..
14      =>E5    ..      9/E5    =>E5    ..      ..      ..      ..      ..      ..      ..
15      =>E1    ..      ..      ..      ..      ..      ..      ..      ..      ..      ..
16      1       2       x       3       4       x       x       17      x       x       x
17      =>N1    ..      9       ..      ..      ..      ..      ..      ..      ..      ..

表中每个状态转移项中：
数字表示移进到的状态，此时规则被消耗
=>E0表示按E0生成式归约为E
x表示解析失败
..表示重复左边的项
acc表示成功结束
状态14的9/E5表示根据情况选择移进到状态9或者按E5归约，在下一节细述


5.二目运算符优先级

优先级  运算符
0       * /
1       + -
2       < > <= >= == !=
3       && ||

解析时有一个二目运算符栈
当向状态9移进时，将当前二目运算符入栈
当=>E5归约的时候，将当前栈顶出栈

在状态14的9/E5选择时，
若
(优先级(当前运算符) == 3) && (优先级(当前运算符) == 优先级(栈顶)) && (当前运算符 != 栈顶)，则解析失败
优先级(当前运算符) >= 优先级(栈顶)，则=>E5
否则，移进到9


6.解析步骤和实例

对表达式
f(1 + a * b / c + 3) * 4

首先进行词法分析，得到
i(0+i+i+i+0)+0
| ||||||||| ||
f 1+a*b/c+3 *4

然后进行句法分析

状态栈              符号栈      中间规则    输入串                  状态转移项          二目运算符栈
0                   #                       f(1+a*b/c+3)*4#         2
0 2                 #i                       (1+a*b/c+3)*4#         6
0 2 6               #i(                       1+a*b/c+3)*4#         1
0 2 6 1             #i(0                       +a*b/c+3)*4#         =>E0
0 2 6               #i(         E              +a*b/c+3)*4#         10
0 2 6 10            #i(E                       +a*b/c+3)*4#         9                   1+
0 2 6 10 9          #i(E+                       a*b/c+3)*4#         2                   1+
0 2 6 10 9 2        #i(E+i                       *b/c+3)*4#         =>E2                1+
0 2 6 10 9          #i(E+       E                *b/c+3)*4#         14                  1+
0 2 6 10 9 14       #i(E+E                       *b/c+3)*4#         9                   1+ 0*
0 2 6 10 9 14 9     #i(E+E+                       b/c+3)*4#         2                   1+ 0*
0 2 6 10 9 14 9 2   #i(E+E+i                       /c+3)*4#         =>E2                1+ 0*
0 2 6 10 9 14 9     #i(E+E+     E                  /c+3)*4#         14                  1+ 0*
0 2 6 10 9 14 9 14  #i(E+E+E                       /c+3)*4#         =>E5                1+
0 2 6 10 9          #i(E+       E                  /c+3)*4#         14                  1+
0 2 6 10 9 14       #i(E+E                         /c+3)*4#         9                   1+ 0/
0 2 6 10 9 14 9     #i(E+E+                         c+3)*4#         2                   1+ 0/
0 2 6 10 9 14 9 2   #i(E+E+i                         +3)*4#         =>E2                1+ 0/
0 2 6 10 9 14 9     #i(E+E+     E                    +3)*4#         14                  1+ 0/
0 2 6 10 9 14 9 14  #i(E+E+E                         +3)*4#         =>E5                1+
0 2 6 10 9          #i(E+       E                    +3)*4#         14                  1+
0 2 6 10 9 14       #i(E+E                           +3)*4#         =>E5
0 2 6               #i(         E                    +3)*4#         14
0 2 6 10            #i(E                             +3)*4#         9                   1+
0 2 6 10 9          #i(E+                             3)*4#         1                   1+
0 2 6 10 9 1        #i(E+0                             )*4#         =>E0                1+
0 2 6 10 9          #i(E+       E                      )*4#         14                  1+
0 2 6 10 9 14       #i(E+E                             )*4#         =>E5
0 2 6               #i(         E                      )*4#         10
0 2 6 10            #i(E                               )*4#         =>N0
0 2 6               #i(         N                      )*4#         12
0 2 6 12            #i(N                               )*4#         =>P1
0 2 6               #i(         P                      )*4#         11
0 2 6 11            #i(P                               )*4#         15
0 2 6 11 15         #i(P)                               *4#         =>E1
0                   #           E                       *4#         5
0 5                 #E                                  *4#         9                   0*
0 5 9               #E+                                  4#         1                   0*
0 5 9 1             #E+0                                  #         =>E0                0*
0 5 9               #E+         E                         #         14                  0*
0 5 9 14            #E+E                                  #         =>E5
0                   #           E                         #         5
0 5                 #E                                    #         =>E',acc

最终生成的语法树如下
E'0
    E5 *
        E1
            i
                f
            P1
                N0
                    E5 +
                        E5 +
                            E0
                                0
                                    1
                            E5 /
                                E5 *
                                    E2
                                        i
                                            a
                                    E2
                                        i
                                            b
                                E2
                                    i
                                        c
                        E0
                            0
                                3
        E0
            0
                4
