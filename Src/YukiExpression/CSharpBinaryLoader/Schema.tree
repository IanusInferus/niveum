$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Yuki.Expression <Tree>
      Description: 表达式结构C#二进制加载器模板数据
      Version:     2013.03.13.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name MainWithNamespace
            //Parameters: ${Header}, ${NamespaceName}, ${Imports}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};

                    namespace [[${NamespaceName}]]
                    {
                        ${ComplexTypes}
                    }

                $End
        Template
            Name MainWithoutNamespace
            //Parameters: ${Header}, ${Imports}, ${ComplexTypes}
            Value
                $String
                    ${Header}
                    using ${Imports};

                    ${ComplexTypes}

                $End
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is varmatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    //Reference:

                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using Yuki.ExpressionSchema;
                    using Yuki.Expression;
                    using Int = System.Int32;
                    using Real = System.Double;
        Template
            Name Assembly
            //Parameters: ${Name}, ${Modules}, ${ModuleInitializes}
            Value
                $String
                    public class [[${Name}]]
                    {
                        ${Modules}

                        public [[${Name}]](Assembly a)
                        {
                            var _d_ = a.Modules.ToDictionary(_m_ => _m_.Name);
                            ${ModuleInitializes}
                        }
                    }
        Template
            Name Assembly_Module
            //Parameters: ${Name}
            Value
                $String
                    public [[${Name}]] [[${Name}]] { get; private set; }
        Template
            Name Assembly_ModuleInitialize
            //Parameters: ${Name}
            Value
                $String
                    [[${Name}]] = new [[${Name}]](_d_[@"${Name}"]);
        Template
            Name Module
            //Parameters: ${Name}, ${FunctionContexts}, ${FunctionInitializes}, ${FunctionCalls}
            Value
                $String
                    public class [[${Name}]]
                    {
                        ${FunctionContexts}

                        public [[${Name}]](ModuleDef md)
                        {
                            var fd = md.Functions.ToDictionary(_f_ => _f_.Name);
                            ${FunctionInitializes}
                        }

                        ${FunctionCalls}
                    }
        Template
            Name Module_FunctionContext
            //Parameters: ${FunctionName}, ${Parameters}, ${ReturnType}
            Value
                $String
                    private class [[FuncContext_${FunctionName}]]
                    {
                        ${Parameters}
                    }
                    private [[FuncContext_${FunctionName}]] [[Context_${FunctionName}]];
                    private Func<[[${ReturnType}]]> [[Func_${FunctionName}]];
        Template
            Name Module_FunctionContext_Parameter
            //Parameters: ${Name}, ${Type}
            Value
                $String
                    public [[${Type}]] [[${Name}]];
        Template
            Name Module_FunctionInitialize
            //Parameters: ${FunctionName}, ${Parameters}, ${ReturnType}
            Value
                $String
                    {
                        var vc = new VariableContext();
                        [[Context_${FunctionName}]] = new [[FuncContext_${FunctionName}]]();
                        ${Parameters}
                        var p = new VariableProviderCombiner(vc, new ExpressionRuntimeProvider());
                        var d = ExpressionEvaluator.Compile<[[${ReturnType}]]>(p, fd[@"${FunctionName}"].Body);
                        [[Func_${FunctionName}]] = () =>
                        {
                            return d();
                        };
                    }
        Template
            Name Module_FunctionInitialize_Parameter
            //Parameters: ${FunctionName}, ${Name}, ${Type}
            Value
                $String
                    vc.Replace(@"${Name}", null, PrimitiveType.[[${Type}]], vvc => (Func<[[${Type}]]>)(() => [[Context_${FunctionName}.${Name}]]));
        Template
            Name Module_FunctionCall
            //Parameters: ${FunctionName}, ${ParameterList}, ${Parameters}, ${ReturnType}
            Value
                $String
                    public [[${ReturnType}]] [[${FunctionName}]](${ParameterList})
                    {
                        ${Parameters}
                        return [[Func_${FunctionName}]]();
                    }
        Template
            Name Module_FunctionCall_ParameterList_Parameter
            //Parameters: ${Name}, ${Type}
            Value
                $String
                    [[${Type}]] [[${Name}]]
        Template
            Name Module_FunctionCall_Parameter
            //Parameters: ${FunctionName}, ${Name}
            Value
                $String
                    [[Context_${FunctionName}]].[[${Name}]] = [[${Name}]];
