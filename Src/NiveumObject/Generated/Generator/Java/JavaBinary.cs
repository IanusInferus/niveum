//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

#nullable enable
#pragma warning disable CS8618

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.JavaBinary
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> IReadableStream()
        {
            yield return "public abstract class IReadableStream";
            yield return "{";
            yield return "    public abstract byte ReadByte();";
            yield return "    public abstract byte[] ReadBytes(int Size);";
            yield return "";
            yield return "    public Unit ReadUnit()";
            yield return "    {";
            yield return "        return Unit.Value;";
            yield return "    }";
            yield return "    public Boolean ReadBoolean()";
            yield return "    {";
            yield return "        return ReadByte() != 0;";
            yield return "    }";
            yield return "";
            yield return "    public byte ReadUInt8()";
            yield return "    {";
            yield return "        return ReadByte();";
            yield return "    }";
            yield return "    public short ReadUInt16()";
            yield return "    {";
            yield return "        short o;";
            yield return "        o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));";
            yield return "        o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    public int ReadUInt32()";
            yield return "    {";
            yield return "        int o;";
            yield return "        o = (int) (this.ReadInt8()) & 0xFF;";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public long ReadUInt64()";
            yield return "    {";
            yield return "        long o;";
            yield return "        o = (long) (this.ReadInt8()) & 0xFF;";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public byte ReadInt8()";
            yield return "    {";
            yield return "        return ReadByte();";
            yield return "    }";
            yield return "    public short ReadInt16()";
            yield return "    {";
            yield return "        short o;";
            yield return "        o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));";
            yield return "        o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    public int ReadInt32()";
            yield return "    {";
            yield return "        int o;";
            yield return "        o = (int) (this.ReadInt8()) & 0xFF;";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);";
            yield return "        o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public long ReadInt64()";
            yield return "    {";
            yield return "        long o;";
            yield return "        o = (long) (this.ReadInt8()) & 0xFF;";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);";
            yield return "        o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "";
            yield return "    public float ReadFloat32()";
            yield return "    {";
            yield return "        return Float.intBitsToFloat(this.ReadInt32());";
            yield return "    }";
            yield return "    public double ReadFloat64()";
            yield return "    {";
            yield return "        return Double.longBitsToDouble(this.ReadInt64());";
            yield return "    }";
            yield return "";
            yield return "    public String ReadString()";
            yield return "    {";
            yield return "        int n = this.ReadInt32();";
            yield return "        byte[] s = new byte[n];";
            yield return "        for (int k = 0; k < n; k += 1)";
            yield return "        {";
            yield return "            s[k] = this.ReadInt8();";
            yield return "        }";
            yield return "        try";
            yield return "        {";
            yield return "            return new String(s, \"UTF-16LE\");";
            yield return "        }";
            yield return "        catch (java.io.UnsupportedEncodingException ex)";
            yield return "        {";
            yield return "            throw new RuntimeException(ex);";
            yield return "        }";
            yield return "    }";
            yield return "};";
        }
        public IEnumerable<String> IWritableStream()
        {
            yield return "public abstract class IWritableStream";
            yield return "{";
            yield return "    public abstract void WriteByte(byte b);";
            yield return "    public abstract void WriteBytes(byte[] l);";
            yield return "";
            yield return "    public void WriteUnit(Unit v)";
            yield return "    {";
            yield return "    }";
            yield return "    public void WriteBoolean(boolean v)";
            yield return "    {";
            yield return "        if (v)";
            yield return "        {";
            yield return "            WriteByte((byte)(0xFF));";
            yield return "        }";
            yield return "        else";
            yield return "        {";
            yield return "            WriteByte((byte)(0));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public void WriteUInt8(byte v)";
            yield return "    {";
            yield return "        WriteByte(v);";
            yield return "    }";
            yield return "    public void WriteUInt16(short v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    public void WriteUInt32(int v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 16) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    public void WriteUInt64(long v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 16) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 24) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 32) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 40) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 48) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "    public void WriteInt8(byte v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v));";
            yield return "    }";
            yield return "    public void WriteInt16(short v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    public void WriteInt32(int v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 16) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    public void WriteInt64(long v)";
            yield return "    {";
            yield return "        WriteByte((byte)(v & 0xFF));";
            yield return "        WriteByte((byte)((v >> 8) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 16) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 24) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 32) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 40) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 48) & 0xFF));";
            yield return "        WriteByte((byte)((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "";
            yield return "    public void WriteFloat32(float v)";
            yield return "    {";
            yield return "        WriteInt32(Float.floatToIntBits(v));";
            yield return "    }";
            yield return "    public void WriteFloat64(double v)";
            yield return "    {";
            yield return "        WriteInt64(Double.doubleToLongBits(v));";
            yield return "    }";
            yield return "";
            yield return "    public void WriteString(String v)";
            yield return "    {";
            yield return "        byte[] l;";
            yield return "        try";
            yield return "        {";
            yield return "            l = v.getBytes(\"UTF-16LE\");";
            yield return "        }";
            yield return "        catch (java.io.UnsupportedEncodingException ex)";
            yield return "        {";
            yield return "            throw new RuntimeException(ex);";
            yield return "        }";
            yield return "        WriteInt32(l.length);";
            yield return "        for (int k = 0; k < l.length; k += 1)";
            yield return "        {";
            yield return "            WriteByte(l[k]);";
            yield return "        }";
            yield return "    }";
            yield return "};";
        }
        public IEnumerable<String> BinaryTranslator(Schema Schema, String NamespaceName)
        {
            yield return "public final class BinaryTranslator";
            yield return "{";
            foreach (var _Line in Combine(Combine(Begin(), "    "), GetBinaryTranslatorSerializers(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Unit()
        {
            yield return "public static Unit UnitFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadUnit();";
            yield return "}";
            yield return "public static void UnitToBinary(IWritableStream s, Unit v)";
            yield return "{";
            yield return "    s.WriteUnit(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Boolean()
        {
            yield return "public static Boolean BooleanFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadBoolean();";
            yield return "}";
            yield return "public static void BooleanToBinary(IWritableStream s, Boolean v)";
            yield return "{";
            yield return "    s.WriteBoolean(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_String()
        {
            yield return "public static String StringFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadString();";
            yield return "}";
            yield return "public static void StringToBinary(IWritableStream s, String v)";
            yield return "{";
            yield return "    s.WriteString(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int()
        {
            yield return "public static int IntFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadInt32();";
            yield return "}";
            yield return "public static void IntToBinary(IWritableStream s, int v)";
            yield return "{";
            yield return "    s.WriteInt32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Real()
        {
            yield return "public static double RealFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadFloat64();";
            yield return "}";
            yield return "public static void RealToBinary(IWritableStream s, double v)";
            yield return "{";
            yield return "    s.WriteFloat64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Byte()
        {
            yield return "public static byte ByteFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadByte();";
            yield return "}";
            yield return "public static void ByteToBinary(IWritableStream s, byte v)";
            yield return "{";
            yield return "    s.WriteByte(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt8()
        {
            yield return "public static byte UInt8FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadUInt8();";
            yield return "}";
            yield return "public static void UInt8ToBinary(IWritableStream s, byte v)";
            yield return "{";
            yield return "    s.WriteUInt8(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt16()
        {
            yield return "public static short UInt16FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadUInt16();";
            yield return "}";
            yield return "public static void UInt16ToBinary(IWritableStream s, short v)";
            yield return "{";
            yield return "    s.WriteUInt16(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt32()
        {
            yield return "public static int UInt32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadUInt32();";
            yield return "}";
            yield return "public static void UInt32ToBinary(IWritableStream s, int v)";
            yield return "{";
            yield return "    s.WriteUInt32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt64()
        {
            yield return "public static long UInt64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadUInt64();";
            yield return "}";
            yield return "public static void UInt64ToBinary(IWritableStream s, long v)";
            yield return "{";
            yield return "    s.WriteUInt64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int8()
        {
            yield return "public static byte Int8FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadInt8();";
            yield return "}";
            yield return "public static void Int8ToBinary(IWritableStream s, byte v)";
            yield return "{";
            yield return "    s.WriteInt8(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int16()
        {
            yield return "public static short Int16FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadInt16();";
            yield return "}";
            yield return "public static void Int16ToBinary(IWritableStream s, short v)";
            yield return "{";
            yield return "    s.WriteInt16(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int32()
        {
            yield return "public static int Int32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadInt32();";
            yield return "}";
            yield return "public static void Int32ToBinary(IWritableStream s, int v)";
            yield return "{";
            yield return "    s.WriteInt32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int64()
        {
            yield return "public static long Int64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadInt64();";
            yield return "}";
            yield return "public static void Int64ToBinary(IWritableStream s, long v)";
            yield return "{";
            yield return "    s.WriteInt64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float32()
        {
            yield return "public static float Float32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadFloat32();";
            yield return "}";
            yield return "public static void Float32ToBinary(IWritableStream s, float v)";
            yield return "{";
            yield return "    s.WriteFloat32(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float64()
        {
            yield return "public static double Float64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return s.ReadFloat64();";
            yield return "}";
            yield return "public static void Float64ToBinary(IWritableStream s, double v)";
            yield return "{";
            yield return "    s.WriteFloat64(v);";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Type()
        {
            yield return "public static java.lang.reflect.Type TypeFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    throw new RuntimeException(\"NotSupported\");";
            yield return "}";
            yield return "public static void TypeToBinary(IWritableStream s, java.lang.reflect.Type v)";
            yield return "{";
            yield return "    throw new RuntimeException(\"NotSupported\");";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Alias(AliasDef a, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Alias(a.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(a.GetTypeSpec(), NamespaceName), a.Type, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Alias(String Name, String TypeString, TypeSpec ValueType, String NamespaceName)
        {
            var ValueSimpleName = ValueType.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    o.Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, o.Value);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Record(RecordDef r, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Record(String Name, String TypeString, List<VariableDef> Fields, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(f.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(TaggedUnionDef tu, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(String Name, String TypeString, String TagName, String TagTypeString, List<VariableDef> Alternatives, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(TagName, TagTypeString, "Int", "int", NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    o._Tag = "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "TagFromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o._Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    o."), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return o;";
                yield return "    " + "}";
            }
            yield return "    throw new RuntimeException(\"InvalidOperation\");";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "TagToBinary"))), "(s, o._Tag);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o._Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(a.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return;";
                yield return "    " + "}";
            }
            yield return "    throw new RuntimeException(\"InvalidOperation\");";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Enum(EnumDef e, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Enum(String Name, String TypeString, String UnderlyingSimpleName, String UnderlyingType, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), UnderlyingType), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), UnderlyingType), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "ToBinary"))), "(s, o);"))
            {
                yield return _Line;
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_ClientCommand(ClientCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Request", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Request", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(GetSuffixedTypeName(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeName(c.Name, c.Version, "ReplyTag", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName), c.InParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_ServerCommand(ServerCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Event", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Event", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Tuple(TypeSpec tp, String NamespaceName)
        {
            var SimpleName = tp.SimpleName(NamespaceName);
            var TypeString = GetTypeString(tp, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " t = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "t."), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "    return t;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " t)"))
            {
                yield return _Line;
            }
            yield return "{";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "ToBinary"))), "(s, t."), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), ");"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Optional(TypeSpec o, TaggedUnionDef GenericOptionalType, String NamespaceName)
        {
            var ElementType = o.GenericTypeSpec.ParameterValues.Single();
            var Alternatives = GenericOptionalType.Alternatives.Select(a => new VariableDef { Name = a.Name, Type = a.Type.OnGenericParameterRef ? ElementType : a.Type, Attributes = a.Attributes, Description = a.Description }).ToList();
            var SimpleName = o.SimpleName(NamespaceName);
            var TypeString = GetTypeString(o, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            yield return "    o._Tag = OptionalTagFromBinary(s);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o._Tag == OptionalTag."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    o."), GetEscapedIdentifier(a.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return o;";
                yield return "    " + "}";
            }
            yield return "    throw new RuntimeException(\"InvalidOperation\");";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    OptionalTagToBinary(s, o._Tag);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o._Tag == OptionalTag."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(a.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return;";
                yield return "    " + "}";
            }
            yield return "    throw new RuntimeException(\"InvalidOperation\");";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_List(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementType = l.GenericTypeSpec.ParameterValues.Single();
            var ElementSimpleName = ElementType.SimpleName(NamespaceName);
            var ElementTypeString = GetTypeString(l.GenericTypeSpec.ParameterValues.Single(), NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = IntFromBinary(s);";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " l = new "), TypeString), "(Length);"))
            {
                yield return _Line;
            }
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.size();";
            yield return "    IntToBinary(s, Length);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    for ("), ElementTypeString), " e : l)"))
            {
                yield return _Line;
            }
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Set(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementTypeString = GetTypeString(l.GenericTypeSpec.ParameterValues.Single(), NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = IntFromBinary(s);";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " l = new "), TypeString), "(Length);"))
            {
                yield return _Line;
            }
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.size();";
            yield return "    IntToBinary(s, Length);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    for ("), ElementTypeString), " e : l)"))
            {
                yield return _Line;
            }
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Map(TypeSpec l, String NamespaceName)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var KeyTypeString = GetTypeString(gp[0], NamespaceName);
            var KeySimpleName = gp[0].SimpleName(NamespaceName);
            var ValueSimpleName = gp[1].SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = IntFromBinary(s);";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), TypeString), " l = new "), TypeString), "(Length);"))
            {
                yield return _Line;
            }
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "        "), KeyTypeString), " Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.put(Key, "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.size();";
            yield return "    IntToBinary(s, Length);";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    for ("), KeyTypeString), " Key : l.keySet())"))
            {
                yield return _Line;
            }
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "ToBinary"))), "(s, Key);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, l.get(Key));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> WrapModule(String NamespaceName, List<String> Imports, IEnumerable<String> Contents)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            if (NamespaceName != "")
            {
                var n = String.Join(".", NamespaceName.Split('.').Select(NamespacePart => LowercaseCamelize(NamespacePart)));
                foreach (var _Line in Combine(Combine(Combine(Begin(), "package "), n), ";"))
                {
                    yield return _Line;
                }
                yield return "";
            }
            yield return "import niveum.lang.*;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "import "), Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), Contents))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
