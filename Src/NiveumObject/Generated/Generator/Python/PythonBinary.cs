//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

#nullable enable
#pragma warning disable CS8618

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.PythonBinary
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> Streams()
        {
            yield return "def _check_methods(C, *methods):";
            yield return "    mro = C.__mro__";
            yield return "    for method in methods:";
            yield return "        for B in mro:";
            yield return "            if method in B.__dict__:";
            yield return "                if B.__dict__[method] is None:";
            yield return "                    return NotImplemented";
            yield return "                break";
            yield return "        else:";
            yield return "            return NotImplemented";
            yield return "    return True";
            yield return "";
            yield return "class IReadableStream(metaclass=ABCMeta):";
            yield return "    __slots__ = ()";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def ReadByte(self) -> Byte:";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def ReadBytes(self, size: int) -> List[Byte]:";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def __enter__(self):";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def __exit__(self, exception_type, exception_value, traceback):";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @classmethod";
            yield return "    def __subclasshook__(cls, C):";
            yield return "        if cls is IReadableStream:";
            yield return "            return _check_methods(C, \"ReadByte\", \"ReadBytes\", \"__enter__\", \"__exit__\")";
            yield return "        return NotImplementedError";
            yield return "";
            yield return "class IWritableStream(metaclass=ABCMeta):";
            yield return "    __slots__ = ()";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def WriteByte(self, b: Byte) -> None:";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def WriteBytes(self, Buffer: List[Byte]) -> None:";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def __enter__(self):";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @abstractmethod";
            yield return "    def __exit__(self, exception_type, exception_value, traceback):";
            yield return "        raise NotImplementedError";
            yield return "";
            yield return "    @classmethod";
            yield return "    def __subclasshook__(cls, C):";
            yield return "        if cls is IReadableStream:";
            yield return "            return _check_methods(C, \"WriteByte\", \"WriteBytes\", \"__enter__\", \"__exit__\")";
            yield return "        return NotImplementedError";
            yield return "";
            yield return "class ReadStream:";
            yield return "    @staticmethod";
            yield return "    def ReadUnit(s: IReadableStream) -> Unit:";
            yield return "        return None";
            yield return "    @staticmethod";
            yield return "    def ReadBoolean(s: IReadableStream) -> Boolean:";
            yield return "        return s.ReadByte() != 0";
            yield return "    @staticmethod";
            yield return "    def ReadByte(s: IReadableStream) -> Byte:";
            yield return "        return s.ReadByte()";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def ReadUInt8(s: IReadableStream) -> UInt8:";
            yield return "        return s.ReadByte()";
            yield return "    @staticmethod";
            yield return "    def ReadUInt16(s: IReadableStream) -> UInt16:";
            yield return "        return struct.unpack('<H', s.ReadBytes(2))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadUInt32(s: IReadableStream) -> UInt32:";
            yield return "        return struct.unpack('<I', s.ReadBytes(4))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadUInt64(s: IReadableStream) -> UInt64:";
            yield return "        return struct.unpack('<Q', s.ReadBytes(8))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadInt8(s: IReadableStream) -> Int8:";
            yield return "        return struct.unpack('<b', s.ReadBytes(1))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadInt16(s: IReadableStream) -> Int16:";
            yield return "        return struct.unpack('<h', s.ReadBytes(2))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadInt32(s: IReadableStream) -> Int32:";
            yield return "        return struct.unpack('<i', s.ReadBytes(4))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadInt64(s: IReadableStream) -> Int64:";
            yield return "        return struct.unpack('<q', s.ReadBytes(8))[0]";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def ReadFloat32(s: IReadableStream) -> Float32:";
            yield return "        return struct.unpack('<f', s.ReadBytes(4))[0]";
            yield return "    @staticmethod";
            yield return "    def ReadFloat64(s: IReadableStream) -> Float64:";
            yield return "        return struct.unpack('<d', s.ReadBytes(8))[0]";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def ReadString(s: IReadableStream) -> String:";
            yield return "        n = ReadStream.ReadInt32(s)";
            yield return "        s = bytearray(s.ReadBytes(n)).decode('utf-16le')";
            yield return "        return s";
            yield return "";
            yield return "class WriteStream:";
            yield return "    @staticmethod";
            yield return "    def WriteUnit(s: IReadableStream, v: Unit) -> None:";
            yield return "        pass";
            yield return "    @staticmethod";
            yield return "    def WriteBoolean(s: IReadableStream, v: Boolean) -> None:";
            yield return "        if v:";
            yield return "            s.WriteByte(0xFF)";
            yield return "        else:";
            yield return "            s.WriteByte(0)";
            yield return "    @staticmethod";
            yield return "    def WriteByte(s: IReadableStream, v: Byte) -> None:";
            yield return "        s.WriteByte(v)";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def WriteUInt8(s: IReadableStream, v: UInt8) -> None:";
            yield return "        s.WriteByte(v)";
            yield return "    @staticmethod";
            yield return "    def WriteUInt16(s: IReadableStream, v: UInt16) -> None:";
            yield return "        s.WriteBytes(struct.pack('<H', v))";
            yield return "    @staticmethod";
            yield return "    def WriteUInt32(s: IReadableStream, v: UInt32) -> None:";
            yield return "        s.WriteBytes(struct.pack('<I', v))";
            yield return "    @staticmethod";
            yield return "    def WriteUInt64(s: IReadableStream, v: UInt64) -> None:";
            yield return "        s.WriteBytes(struct.pack('<Q', v))";
            yield return "    @staticmethod";
            yield return "    def WriteInt8(s: IReadableStream, v: Int8) -> None:";
            yield return "        s.WriteBytes(struct.pack('<b', v))";
            yield return "    @staticmethod";
            yield return "    def WriteInt16(s: IReadableStream, v: Int16) -> None:";
            yield return "        s.WriteBytes(struct.pack('<h', v))";
            yield return "    @staticmethod";
            yield return "    def WriteInt32(s: IReadableStream, v: Int32) -> None:";
            yield return "        s.WriteBytes(struct.pack('<i', v))";
            yield return "    @staticmethod";
            yield return "    def WriteInt64(s: IReadableStream, v: Int64) -> None:";
            yield return "        s.WriteBytes(struct.pack('<q', v))";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def WriteFloat32(s: IReadableStream, v: Float32) -> None:";
            yield return "        s.WriteBytes(struct.pack('<f', v))";
            yield return "    @staticmethod";
            yield return "    def WriteFloat64(s: IReadableStream, v: Float64) -> None:";
            yield return "        s.WriteBytes(struct.pack('<d', v))";
            yield return "";
            yield return "    @staticmethod";
            yield return "    def WriteString(s: IReadableStream, v: String) -> None:";
            yield return "        l = v.encode('utf-16le')";
            yield return "        WriteStream.WriteInt32(s, len(l))";
            yield return "        s.WriteBytes(l)";
            yield return "        return s";
            yield return "";
            yield return "class ByteArrayStream(IReadableStream, IWritableStream):";
            yield return "    def __init__(self) -> None:";
            yield return "        self._bytes = bytearray()";
            yield return "        self._position = 0";
            yield return "";
            yield return "    def ReadByte(self) -> int:";
            yield return "        if self._position + 1 > len(self._bytes):";
            yield return "            raise IndexError";
            yield return "        b = self._bytes[self._position]";
            yield return "        self._position += 1";
            yield return "        return b";
            yield return "";
            yield return "    def ReadBytes(self, size: int) -> List[Byte]:";
            yield return "        if size < 0:";
            yield return "            raise IndexError";
            yield return "        if self._position + size > len(self._bytes):";
            yield return "            raise IndexError";
            yield return "        if size == 0:";
            yield return "            return []";
            yield return "        l = self._bytes[self._position:(self._position + size)]";
            yield return "        self._position += size";
            yield return "        return l";
            yield return "";
            yield return "    def WriteByte(self, b: Byte) -> None:";
            yield return "        if self._position + 1 > len(self._bytes):";
            yield return "            self.SetLength(self.Length + 1)";
            yield return "        self._bytes[self._position] = b";
            yield return "        self._position += 1";
            yield return "";
            yield return "    def WriteBytes(self, Buffer: List[Byte]) -> None:";
            yield return "        size = len(Buffer)";
            yield return "        if size == 0:";
            yield return "            return";
            yield return "        if self._position + size > len(self._bytes):";
            yield return "            self.SetLength(self.Length + size)";
            yield return "        self._bytes[self._position:(self._position + size)] = Buffer";
            yield return "        self._position += size";
            yield return "";
            yield return "    @property";
            yield return "    def Position(self) -> int:";
            yield return "        return self._position";
            yield return "";
            yield return "    @Position.setter";
            yield return "    def Position(self, value: int):";
            yield return "        self._position = value";
            yield return "";
            yield return "    @property";
            yield return "    def Length(self) -> int:";
            yield return "        return len(self._bytes)";
            yield return "";
            yield return "    def SetLength(self, value: int):";
            yield return "        diff = value - len(self._bytes)";
            yield return "        if (diff == 0):";
            yield return "            return";
            yield return "        if (diff > 0):";
            yield return "            self._bytes.extend(bytearray(diff))";
            yield return "        else:";
            yield return "            del self._bytes[-diff:]";
            yield return "";
            yield return "    def __enter__(self):";
            yield return "        return self";
            yield return "";
            yield return "    def __exit__(self, exception_type, exception_value, traceback):";
            yield return "        pass";
        }
        public IEnumerable<String> BinaryTranslator(Schema Schema, String NamespaceName)
        {
            yield return "class BinaryTranslator:";
            foreach (var _Line in Combine(Combine(Begin(), "    "), GetBinaryTranslatorSerializers(Schema, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Unit()
        {
            yield return "@staticmethod";
            yield return "def UnitFromBinary(s: IReadableStream) -> Unit:";
            yield return "    return ReadStream.ReadUnit(s)";
            yield return "@staticmethod";
            yield return "def UnitToBinary(s: IWritableStream, v: Unit) -> None:";
            yield return "    WriteStream.WriteUnit(s, v)";
            yield return "@staticmethod";
            yield return "def UnitFromBytes(Bytes: List[Byte]) -> Unit:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.UnitFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def UnitToBytes(v: Unit) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.UnitToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Boolean()
        {
            yield return "@staticmethod";
            yield return "def BooleanFromBinary(s: IReadableStream) -> Boolean:";
            yield return "    return ReadStream.ReadBoolean(s)";
            yield return "@staticmethod";
            yield return "def BooleanToBinary(s: IWritableStream, v: Boolean) -> None:";
            yield return "    WriteStream.WriteBoolean(s, v)";
            yield return "@staticmethod";
            yield return "def BooleanFromBytes(Bytes: List[Byte]) -> Boolean:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.BooleanFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def BooleanToBytes(v: Boolean) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.BooleanToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_String()
        {
            yield return "@staticmethod";
            yield return "def StringFromBinary(s: IReadableStream) -> String:";
            yield return "    return ReadStream.ReadString(s)";
            yield return "@staticmethod";
            yield return "def StringToBinary(s: IWritableStream, v: String) -> None:";
            yield return "    WriteStream.WriteString(s, v)";
            yield return "@staticmethod";
            yield return "def StringFromBytes(Bytes: List[Byte]) -> String:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.StringFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def StringToBytes(v: String) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.StringToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int()
        {
            yield return "@staticmethod";
            yield return "def IntFromBinary(s: IReadableStream) -> Int:";
            yield return "    return ReadStream.ReadInt32(s)";
            yield return "@staticmethod";
            yield return "def IntToBinary(s: IWritableStream, v: Int) -> None:";
            yield return "    WriteStream.WriteInt32(s, v)";
            yield return "@staticmethod";
            yield return "def IntFromBytes(Bytes: List[Byte]) -> Int:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.IntFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def IntToBytes(v: Int) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.IntToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Real()
        {
            yield return "@staticmethod";
            yield return "def RealFromBinary(s: IReadableStream) -> Real:";
            yield return "    return ReadStream.ReadFloat64(s)";
            yield return "@staticmethod";
            yield return "def RealToBinary(s: IWritableStream, v: Real) -> None:";
            yield return "    WriteStream.WriteFloat64(s, v)";
            yield return "@staticmethod";
            yield return "def RealFromBytes(Bytes: List[Byte]) -> Real:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.RealFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def RealToBytes(v: Real) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.RealToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Byte()
        {
            yield return "@staticmethod";
            yield return "def ByteFromBinary(s: IReadableStream) -> Byte:";
            yield return "    return ReadStream.ReadByte(s)";
            yield return "@staticmethod";
            yield return "def ByteToBinary(s: IWritableStream, v: Byte) -> None:";
            yield return "    WriteStream.WriteByte(s, v)";
            yield return "@staticmethod";
            yield return "def ByteFromBytes(Bytes: List[Byte]) -> Byte:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.ByteFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def ByteToBytes(v: Byte) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.ByteToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt8()
        {
            yield return "@staticmethod";
            yield return "def UInt8FromBinary(s: IReadableStream) -> UInt8:";
            yield return "    return ReadStream.ReadUInt8(s)";
            yield return "@staticmethod";
            yield return "def UInt8ToBinary(s: IWritableStream, v: UInt8) -> None:";
            yield return "    WriteStream.WriteUInt8(s, v)";
            yield return "@staticmethod";
            yield return "def UInt8FromBytes(Bytes: List[Byte]) -> UInt8:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.UInt8FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def UInt8ToBytes(v: UInt8) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.UInt8ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt16()
        {
            yield return "@staticmethod";
            yield return "def UInt16FromBinary(s: IReadableStream) -> UInt16:";
            yield return "    return ReadStream.ReadUInt16(s)";
            yield return "@staticmethod";
            yield return "def UInt16ToBinary(s: IWritableStream, v: UInt16) -> None:";
            yield return "    WriteStream.WriteUInt16(s, v)";
            yield return "@staticmethod";
            yield return "def UInt16FromBytes(Bytes: List[Byte]) -> UInt16:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.UInt16FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def UInt16ToBytes(v: UInt16) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.UInt16ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt32()
        {
            yield return "@staticmethod";
            yield return "def UInt32FromBinary(s: IReadableStream) -> UInt32:";
            yield return "    return ReadStream.ReadUInt32(s)";
            yield return "@staticmethod";
            yield return "def UInt32ToBinary(s: IWritableStream, v: UInt32) -> None:";
            yield return "    WriteStream.WriteUInt32(s, v)";
            yield return "@staticmethod";
            yield return "def UInt32FromBytes(Bytes: List[Byte]) -> UInt32:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.UInt32FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def UInt32ToBytes(v: UInt32) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.UInt32ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt64()
        {
            yield return "@staticmethod";
            yield return "def UInt64FromBinary(s: IReadableStream) -> UInt64:";
            yield return "    return ReadStream.ReadUInt64(s)";
            yield return "@staticmethod";
            yield return "def UInt64ToBinary(s: IWritableStream, v: UInt64) -> None:";
            yield return "    WriteStream.WriteUInt64(s, v)";
            yield return "@staticmethod";
            yield return "def UInt64FromBytes(Bytes: List[Byte]) -> UInt64:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.UInt64FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def UInt64ToBytes(v: UInt64) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.UInt64ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int8()
        {
            yield return "@staticmethod";
            yield return "def Int8FromBinary(s: IReadableStream) -> Int8:";
            yield return "    return ReadStream.ReadInt8(s)";
            yield return "@staticmethod";
            yield return "def Int8ToBinary(s: IWritableStream, v: Int8) -> None:";
            yield return "    WriteStream.WriteInt8(s, v)";
            yield return "@staticmethod";
            yield return "def Int8FromBytes(Bytes: List[Byte]) -> Int8:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Int8FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Int8ToBytes(v: Int8) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Int8ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int16()
        {
            yield return "@staticmethod";
            yield return "def Int16FromBinary(s: IReadableStream) -> Int16:";
            yield return "    return ReadStream.ReadInt16(s)";
            yield return "@staticmethod";
            yield return "def Int16ToBinary(s: IWritableStream, v: Int16) -> None:";
            yield return "    WriteStream.WriteInt16(s, v)";
            yield return "@staticmethod";
            yield return "def Int16FromBytes(Bytes: List[Byte]) -> Int16:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Int16FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Int16ToBytes(v: Int16) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Int16ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int32()
        {
            yield return "@staticmethod";
            yield return "def Int32FromBinary(s: IReadableStream) -> Int32:";
            yield return "    return ReadStream.ReadInt32(s)";
            yield return "@staticmethod";
            yield return "def Int32ToBinary(s: IWritableStream, v: Int32) -> None:";
            yield return "    WriteStream.WriteInt32(s, v)";
            yield return "@staticmethod";
            yield return "def Int32FromBytes(Bytes: List[Byte]) -> Int32:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Int32FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Int32ToBytes(v: Int32) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Int32ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int64()
        {
            yield return "@staticmethod";
            yield return "def Int64FromBinary(s: IReadableStream) -> Int64:";
            yield return "    return ReadStream.ReadInt64(s)";
            yield return "@staticmethod";
            yield return "def Int64ToBinary(s: IWritableStream, v: Int64) -> None:";
            yield return "    WriteStream.WriteInt64(s, v)";
            yield return "@staticmethod";
            yield return "def Int64FromBytes(Bytes: List[Byte]) -> Int64:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Int64FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Int64ToBytes(v: Int64) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Int64ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float32()
        {
            yield return "@staticmethod";
            yield return "def Float32FromBinary(s: IReadableStream) -> Float32:";
            yield return "    return ReadStream.ReadFloat32(s)";
            yield return "@staticmethod";
            yield return "def Float32ToBinary(s: IWritableStream, v: Float32) -> None:";
            yield return "    WriteStream.WriteFloat32(s, v)";
            yield return "@staticmethod";
            yield return "def Float32FromBytes(Bytes: List[Byte]) -> Float32:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Float32FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Float32ToBytes(v: Float32) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Float32ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float64()
        {
            yield return "@staticmethod";
            yield return "def Float64FromBinary(s: IReadableStream) -> Float64:";
            yield return "    return ReadStream.ReadFloat64(s)";
            yield return "@staticmethod";
            yield return "def Float64ToBinary(s: IWritableStream, v: Float64) -> None:";
            yield return "    WriteStream.WriteFloat64(s, v)";
            yield return "@staticmethod";
            yield return "def Float64FromBytes(Bytes: List[Byte]) -> Float64:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.Float64FromBinary(bas)";
            yield return "@staticmethod";
            yield return "def Float64ToBytes(v: Float64) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.Float64ToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Type()
        {
            yield return "@staticmethod";
            yield return "def TypeFromBinary(s: IReadableStream) -> Type:";
            yield return "    raise NotImplementedError";
            yield return "@staticmethod";
            yield return "def TypeToBinary(s: IWritableStream, v: Type) -> None:";
            yield return "    raise NotImplementedError";
            yield return "@staticmethod";
            yield return "def TypeFromBytes(Bytes: List[Byte]) -> Type:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            yield return "        return BinaryTranslator.TypeFromBinary(bas)";
            yield return "@staticmethod";
            yield return "def TypeToBytes(v: Type) -> List[Byte]:";
            yield return "    with ByteArrayStream() as bas:";
            yield return "        BinaryTranslator.TypeToBinary(bas, v)";
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Alias(AliasDef a, String NamespaceName)
        {
            var TypeString = GetTypeString(a.GetTypeSpec(), NamespaceName);
            var Name = a.GetTypeSpec().SimpleName(NamespaceName);
            var ValueSimpleName = a.Type.SimpleName(NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(s: IWritableStream, o: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, o)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Record(RecordDef r, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Record(String Name, String TypeString, List<VariableDef> Fields, String NamespaceName)
        {
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), TypeString), "("))
            {
                yield return _Line;
            }
            int k = 0;
            foreach (var f in Fields)
            {
                if (k == Fields.Count - 1)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(f.Name)), " = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s)"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                else
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(f.Name)), " = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s),"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                k += 1;
            }
            yield return "    )";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(s: IWritableStream, o: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(f.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(TaggedUnionDef tu, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(String Name, String TypeString, String TagName, String TagTypeString, List<VariableDef> Alternatives, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(TagName, TagTypeString, "Int", "Int", NamespaceName)))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    Tag = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "TagFromBinary"))), "(s)"))
            {
                yield return _Line;
            }
            yield return "    Value = None";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), "):"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    Value = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s)"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    return "), TypeString), "(Tag, Value)"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    raise ValueError";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(s: IWritableStream, o: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "TagToBinary"))), "(s, o.Tag_)"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o.Tag_ == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), "):"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o.Value_)"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return";
            }
            yield return "    raise ValueError";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Enum(EnumDef e, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Enum(String Name, String TypeString, String UnderlyingSimpleName, String UnderlyingType, String NamespaceName)
        {
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return "), TypeString), "(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "FromBinary"))), "(s))"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(s: IWritableStream, o: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "ToBinary"))), "(s, "), UnderlyingType), "(o))"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Tuple(TypeSpec tp, String NamespaceName)
        {
            var SimpleName = tp.SimpleName(NamespaceName);
            var TypeString = GetTypeString(tp, NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), " = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "FromBinary"))), "(s)"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return ("), String.Join(", ", tp.Tuple.Select((t, k) => "Item" + k.ToString(System.Globalization.CultureInfo.InvariantCulture)))), ")"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(s: IWritableStream, t: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    ("), String.Join(", ", tp.Tuple.Select((t, k) => "Item" + k.ToString(System.Globalization.CultureInfo.InvariantCulture)))), ") = t"))
            {
                yield return _Line;
            }
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "ToBinary"))), "(s, "), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k))), ")"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Optional(TypeSpec o, TaggedUnionDef GenericOptionalType, String NamespaceName)
        {
            var ElementType = o.GenericTypeSpec.ParameterValues.Single();
            var SimpleName = o.SimpleName(NamespaceName);
            var TypeString = GetTypeString(o, NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    Tag = BinaryTranslator.IntFromBinary(s)";
            yield return "    if (Tag == 0):";
            yield return "        return None";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementType.SimpleName(NamespaceName)), "FromBinary"))), "(s)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(s: IWritableStream, o: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            yield return "    if (o == None):";
            yield return "        BinaryTranslator.IntToBinary(s, 0)";
            yield return "        return None";
            yield return "    BinaryTranslator.IntToBinary(s, 1)";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementType.SimpleName(NamespaceName)), "ToBinary"))), "(s, o)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_List(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementType = l.GenericTypeSpec.ParameterValues.Single();
            var ElementSimpleName = ElementType.SimpleName(NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    Length = BinaryTranslator.IntFromBinary(s)";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "l = s.ReadBytes(Length)";
            }
            else
            {
                yield return "    " + "l = []";
                yield return "    " + "for k in range(Length):";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    l.append(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s))"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return l";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(s: IWritableStream, l: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            yield return "    Length = len(l)";
            yield return "    BinaryTranslator.IntToBinary(s, Length)";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "s.WriteBytes(l)";
            }
            else
            {
                yield return "    " + "for k in range(Length):";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, l[k])"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Set(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    Length = BinaryTranslator.IntFromBinary(s)";
            yield return "    l = set()";
            yield return "    for k in range(Length):";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.add(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s))"))
            {
                yield return _Line;
            }
            yield return "    return l";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(s: IWritableStream, l: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            yield return "    Length = len(l)";
            yield return "    BinaryTranslator.IntToBinary(s, Length)";
            yield return "    for e in l:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> BinaryTranslator_Map(TypeSpec l, String NamespaceName)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var KeySimpleName = gp[0].SimpleName(NamespaceName);
            var ValueSimpleName = gp[1].SimpleName(NamespaceName);
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(s: IReadableStream) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    Length = BinaryTranslator.IntFromBinary(s)";
            yield return "    l = {}";
            yield return "    for k in range(Length):";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        Key = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "FromBinary"))), "(s)"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l[Key] = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s)"))
            {
                yield return _Line;
            }
            yield return "    return l";
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(s: IWritableStream, l: "), TypeString), ") -> None:"))
            {
                yield return _Line;
            }
            yield return "    Length = len(l)";
            yield return "    BinaryTranslator.IntToBinary(s, (Int)(Length))";
            yield return "    for Key, Value in l.items():";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "ToBinary"))), "(s, Key)"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, Value)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Bytes: List[Byte]) -> "), TypeString), ":"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            yield return "        bas.WriteBytes(Bytes)";
            yield return "        bas.Position = 0";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas)"))
            {
                yield return _Line;
            }
            yield return "@staticmethod";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "def "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "(o: "), TypeString), ") -> List[Byte]:"))
            {
                yield return _Line;
            }
            yield return "    with ByteArrayStream() as bas:";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o)"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0";
            yield return "        return bas.ReadBytes(bas.Length)";
        }
        public IEnumerable<String> Main(Schema Schema)
        {
            yield return "#!/usr/bin/python3";
            yield return "";
            yield return "#==========================================================================";
            yield return "#";
            yield return "#  Notice:      This file is automatically generated.";
            yield return "#               Please don't modify this file.";
            yield return "#";
            yield return "#==========================================================================";
            yield return "";
            yield return "from abc import ABCMeta, abstractmethod";
            yield return "import struct";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "from "), Schema.Imports), " import *"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), GetTypes(Schema)))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
