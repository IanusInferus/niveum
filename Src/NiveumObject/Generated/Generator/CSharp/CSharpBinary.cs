//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

#nullable enable
#pragma warning disable CS8618

using System;
using System.Collections.Generic;
using System.Linq;
using Firefly;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Niveum.ObjectSchema.CSharpBinary
{
    partial class Templates
    {
        private IEnumerable<String> Begin()
        {
            yield return "";
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, String Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Right;
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, Object Right)
        {
            foreach (var vLeft in Left)
            {
                yield return vLeft + Convert.ToString(Right, System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        private IEnumerable<String> Combine(IEnumerable<String> Left, IEnumerable<String> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + vRight;
                }
            }
        }
        private IEnumerable<String> Combine<T>(IEnumerable<String> Left, IEnumerable<T> Right)
        {
            foreach (var vLeft in Left)
            {
                foreach (var vRight in Right)
                {
                    yield return vLeft + Convert.ToString(vRight, System.Globalization.CultureInfo.InvariantCulture);
                }
            }
        }
        private IEnumerable<String> GetEscapedIdentifier(IEnumerable<String> IdentifierValues)
        {
            foreach (var Identifier in IdentifierValues)
            {
                yield return GetEscapedIdentifier(Identifier);
            }
        }
        public IEnumerable<String> BinarySerializationServer(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "public sealed class BinarySerializationServer";
            yield return "{";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, Byte[], Byte[]>> ClientCommands;";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, Byte[], Task<Byte[]>>> AsyncClientCommands;";
            yield return "";
            yield return "    private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>";
            yield return "    {";
            yield return "        public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)";
            yield return "        {";
            yield return "            if (!x.Key.Equals(y.Key)) { return false; }";
            yield return "            if (!x.Value.Equals(y.Value)) { return false; }";
            yield return "            return true;";
            yield return "        }";
            yield return "";
            yield return "        public int GetHashCode(KeyValuePair<TKey, TValue> obj)";
            yield return "        {";
            yield return "            var KeyHash = obj.Key.GetHashCode();";
            yield return "            var ValueHash = obj.Value.GetHashCode();";
            yield return "            return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public BinarySerializationServer()";
            yield return "    {";
            yield return "        ClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, Byte[], Byte[]>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            yield return "        AsyncClientCommands = new Dictionary<KeyValuePair<String, UInt32>, Func<IApplicationServer, UInt8[], Task<UInt8[]>>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (WithFirefly)
                    {
                        if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "AsyncClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), async (s, p) => BinaryTranslator.Serialize(await s."), GetEscapedIdentifier(Name)), "(BinaryTranslator.Deserialize<"), RequestTypeString), ">(p))));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                        else
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), (s, p) => BinaryTranslator.Serialize(s."), GetEscapedIdentifier(Name)), "(BinaryTranslator.Deserialize<"), RequestTypeString), ">(p))));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                    }
                    else
                    {
                        if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "AsyncClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), async (s, p) => BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToBytes"))), "(await s."), GetEscapedIdentifier(Name)), "(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromBytes"))), "(p))));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                        else
                        {
                            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ClientCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), (s, p) => BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "ToBytes"))), "(s."), GetEscapedIdentifier(Name)), "(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "FromBytes"))), "(p))));"))
                            {
                                yield return _Line == "" ? "" : "        " + _Line;
                            }
                        }
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public UInt64 Hash";
            yield return "    {";
            yield return "        get";
            yield return "        {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "            return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public Boolean HasCommand(String CommandName, UInt32 CommandHash)";
            yield return "    {";
            yield return "        return ClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));";
            yield return "    }";
            yield return "    public Boolean HasCommandAsync(String CommandName, UInt32 CommandHash)";
            yield return "    {";
            yield return "        return AsyncClientCommands.ContainsKey(new KeyValuePair<String, UInt32>(CommandName, CommandHash));";
            yield return "    }";
            yield return "";
            yield return "    public Byte[] ExecuteCommand(IApplicationServer s, String CommandName, UInt32 CommandHash, Byte[] Parameters)";
            yield return "    {";
            yield return "        var cmd = ClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];";
            yield return "        return cmd(s, Parameters);";
            yield return "    }";
            yield return "    public async Task<Byte[]> ExecuteCommandAsync(IApplicationServer s, String CommandName, UInt32 CommandHash, Byte[] Parameters)";
            yield return "    {";
            yield return "        var cmd = AsyncClientCommands[new KeyValuePair<String, UInt32>(CommandName, CommandHash)];";
            yield return "        return await cmd(s, Parameters);";
            yield return "    }";
            yield return "}";
            yield return "public sealed class BinarySerializationServerEventDispatcher";
            yield return "{";
            yield return "    public BinarySerializationServerEventDispatcher(IApplicationServer s)";
            yield return "    {";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (WithFirefly)
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "s."), GetEscapedIdentifier(Name)), " += e => OnServerEvent("), CommandNameString), ", 0x"), CommandHash), ", BinaryTranslator.Serialize(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "s."), GetEscapedIdentifier(Name)), " += e => OnServerEvent("), CommandNameString), ", 0x"), CommandHash), ", BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "ToBytes"))), "(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public delegate void ServerEventDelegate(String CommandName, UInt32 CommandHash, Byte[] Parameters);";
            yield return "    public event ServerEventDelegate ServerEvent;";
            yield return "    private void OnServerEvent(String CommandName, UInt32 CommandHash, Byte[] Parameters)";
            yield return "    {";
            yield return "        if (ServerEvent != null) { ServerEvent(CommandName, CommandHash, Parameters); }";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> IBinarySender()
        {
            yield return "public interface IBinarySender";
            yield return "{";
            yield return "    void Send(String CommandName, UInt32 CommandHash, Byte[] Parameters, Action<Exception> OnError);";
            yield return "}";
        }
        public IEnumerable<String> BinarySerializationClient(UInt64 Hash, List<TypeDef> Commands, ISchemaClosureGenerator SchemaClosureGenerator, String NamespaceName)
        {
            yield return "public sealed class BinarySerializationClient";
            yield return "{";
            yield return "    private class KeyValuePairEqualityComparer<TKey, TValue> : IEqualityComparer<KeyValuePair<TKey, TValue>>";
            yield return "    {";
            yield return "        public Boolean Equals(KeyValuePair<TKey, TValue> x, KeyValuePair<TKey, TValue> y)";
            yield return "        {";
            yield return "            if (!x.Key.Equals(y.Key)) { return false; }";
            yield return "            if (!x.Value.Equals(y.Value)) { return false; }";
            yield return "            return true;";
            yield return "        }";
            yield return "";
            yield return "        public int GetHashCode(KeyValuePair<TKey, TValue> obj)";
            yield return "        {";
            yield return "            var KeyHash = obj.Key.GetHashCode();";
            yield return "            var ValueHash = obj.Value.GetHashCode();";
            yield return "            return KeyHash ^ ((ValueHash << 9) | ((ValueHash >> (32 - 9)) & ((1 << 9) - 1)));";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    private class ClientCommandTriple";
            yield return "    {";
            yield return "        public UInt32 Hash;";
            yield return "        public Action<Byte[]> Callback;";
            yield return "        public Action<Exception> OnError;";
            yield return "    }";
            yield return "    private class ApplicationClient : IApplicationClient";
            yield return "    {";
            yield return "        public IBinarySender s;";
            yield return "        public Dictionary<String, Queue<ClientCommandTriple>> ClientCommandCallbacks;";
            yield return "";
            yield return "        public UInt64 Hash";
            yield return "        {";
            yield return "            get";
            yield return "            {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "                return 0x"), Hash.ToString("X16", System.Globalization.CultureInfo.InvariantCulture)), ";"))
            {
                yield return _Line;
            }
            yield return "            }";
            yield return "        }";
            yield return "";
            yield return "        public void NotifyErrorCommand(String CommandName, String Message)";
            yield return "        {";
            yield return "            var q = ClientCommandCallbacks[CommandName];";
            yield return "            var t = q.Dequeue();";
            yield return "            t.OnError(new InvalidOperationException(Message));";
            yield return "        }";
            yield return "";
            yield return "        private void AddCallback(String CommandName, UInt32 CommandHash, Action<Byte[]> Callback, Action<Exception> OnError)";
            yield return "        {";
            yield return "            if (ClientCommandCallbacks.ContainsKey(CommandName))";
            yield return "            {";
            yield return "                ClientCommandCallbacks[CommandName].Enqueue(new ClientCommandTriple { Hash = CommandHash, Callback = Callback, OnError = OnError });";
            yield return "            }";
            yield return "            else";
            yield return "            {";
            yield return "                var q = new Queue<ClientCommandTriple>();";
            yield return "                q.Enqueue(new ClientCommandTriple { Hash = CommandHash, Callback = Callback, OnError = OnError });";
            yield return "                ClientCommandCallbacks.Add(CommandName, q);";
            yield return "            }";
            yield return "        }";
            yield return "";
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ClientCommand.FullName());
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var RequestName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyName = GetSuffixedTypeName(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (WithFirefly)
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public Task<"), ReplyTypeString), "> "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " r)"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Source = new TaskCompletionSource<"), ReplyTypeString), ">();"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    var Request = BinaryTranslator.Serialize(r);";
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    AddCallback("), CommandNameString), ", 0x"), CommandHash), ", Parameters => Source.SetResult(BinaryTranslator.Deserialize<"), ReplyTypeString), ">(Parameters)), e => Source.SetException(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s.Send("), CommandNameString), ", 0x"), CommandHash), ", Request, e => Source.SetException(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    return Source.Task;";
                        yield return "        " + "}";
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public Task<"), ReplyTypeString), "> "), GetEscapedIdentifier(Name)), "("), RequestTypeString), " r)"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "{";
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Source = new TaskCompletionSource<"), ReplyTypeString), ">();"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Begin(), "    var Request = BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), RequestName), "ToBytes"))), "(r);"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "    AddCallback("), CommandNameString), ", 0x"), CommandHash), ", Parameters => Source.SetResult(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), ReplyName), "FromBytes"))), "(Parameters)), e => Source.SetException(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    s.Send("), CommandNameString), ", 0x"), CommandHash), ", Request, e => Source.SetException(e));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                        yield return "        " + "    return Source.Task;";
                        yield return "        " + "}";
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public event Action<"), EventTypeString), "> "), GetEscapedIdentifier(Name)), ";"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "public void "), GetEscapedIdentifier(Combine(Combine(Begin(), "Raise"), Name))), "("), EventTypeString), " e) { if ("), GetEscapedIdentifier(Name)), " != null) { "), GetEscapedIdentifier(Name)), "(e); } }"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    private ApplicationClient c;";
            yield return "    private Dictionary<KeyValuePair<String, UInt32>, Action<Byte[]>> ServerCommands;";
            yield return "";
            yield return "    public BinarySerializationClient(IBinarySender s)";
            yield return "    {";
            yield return "        c = new ApplicationClient();";
            yield return "        c.s = s;";
            yield return "        c.ClientCommandCallbacks = new Dictionary<String, Queue<ClientCommandTriple>>();";
            yield return "        ServerCommands = new Dictionary<KeyValuePair<String, UInt32>, Action<Byte[]>>(new KeyValuePairEqualityComparer<String, UInt32>());";
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    var CommandNameString = GetEscapedStringLiteral(c.ServerCommand.FullName());
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var EventName = GetSuffixedTypeName(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var CommandHash = ((UInt32)(SchemaClosureGenerator.GetSubSchema(new List<TypeDef> { c }, new List<TypeSpec> { }).GetNonversioned().GetNonattributed().Hash().Bits(31, 0))).ToString("X8", System.Globalization.CultureInfo.InvariantCulture);
                    if (WithFirefly)
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ServerCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), Parameters => c."), GetEscapedIdentifier(Combine(Combine(Begin(), "Raise"), Name))), "(BinaryTranslator.Deserialize<"), EventTypeString), ">(Parameters)));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                    else
                    {
                        foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "ServerCommands.Add(new KeyValuePair<String, UInt32>("), CommandNameString), ", 0x"), CommandHash), "), Parameters => c."), GetEscapedIdentifier(Combine(Combine(Begin(), "Raise"), Name))), "(BinaryTranslator."), GetEscapedIdentifier(Combine(Combine(Begin(), EventName), "FromBytes"))), "(Parameters)));"))
                        {
                            yield return _Line == "" ? "" : "        " + _Line;
                        }
                    }
                }
            }
            yield return "    }";
            yield return "";
            yield return "    public IApplicationClient GetApplicationClient()";
            yield return "    {";
            yield return "        return c;";
            yield return "    }";
            yield return "";
            yield return "    public void HandleResult(String CommandName, UInt32 CommandHash, Byte[] Parameters)";
            yield return "    {";
            yield return "        if (c.ClientCommandCallbacks.ContainsKey(CommandName))";
            yield return "        {";
            yield return "            var q = c.ClientCommandCallbacks[CommandName];";
            yield return "            if (q.Count == 0)";
            yield return "            {";
            yield return "                throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "            }";
            yield return "            var t = q.Peek();";
            yield return "            if (t.Hash != CommandHash)";
            yield return "            {";
            yield return "                throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "            }";
            yield return "            q.Dequeue();";
            yield return "            var Callback = t.Callback;";
            yield return "            Callback(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        var p = new KeyValuePair<String, UInt32>(CommandName, CommandHash);";
            yield return "        if (ServerCommands.ContainsKey(p))";
            yield return "        {";
            yield return "            var a = ServerCommands[p];";
            yield return "            a(Parameters);";
            yield return "            return;";
            yield return "        }";
            yield return "";
            yield return "        throw new InvalidOperationException(CommandName + \"@\" + CommandHash.ToString(\"X8\", System.Globalization.CultureInfo.InvariantCulture));";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Streams()
        {
            yield return "public interface IReadableStream : IDisposable";
            yield return "{";
            yield return "    Byte ReadByte();";
            yield return "    Byte[] ReadBytes(int Size);";
            yield return "}";
            yield return "public interface IWritableStream : IDisposable";
            yield return "{";
            yield return "    void WriteByte(Byte b);";
            yield return "    void WriteBytes(Byte[] Buffer);";
            yield return "}";
            yield return "";
            yield return "public static class ReadStream";
            yield return "{";
            yield return "    public static Unit ReadUnit(IReadableStream s)";
            yield return "    {";
            yield return "        return new Unit();";
            yield return "    }";
            yield return "    public static Boolean ReadBoolean(IReadableStream s)";
            yield return "    {";
            yield return "        return s.ReadByte() != 0;";
            yield return "    }";
            yield return "    public static Byte ReadByte(IReadableStream s)";
            yield return "    {";
            yield return "        return s.ReadByte();";
            yield return "    }";
            yield return "";
            yield return "    public static Byte ReadUInt8(IReadableStream s)";
            yield return "    {";
            yield return "        return s.ReadByte();";
            yield return "    }";
            yield return "    public static UInt16 ReadUInt16(IReadableStream s)";
            yield return "    {";
            yield return "        UInt16 o;";
            yield return "        o = (UInt16)((UInt16)(s.ReadByte()) & (UInt16)(0xFF));";
            yield return "        o = (UInt16)(o | (((UInt16)(s.ReadByte()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    public static UInt32 ReadUInt32(IReadableStream s)";
            yield return "    {";
            yield return "        UInt32 o;";
            yield return "        o = (UInt32)(s.ReadByte()) & 0xFF;";
            yield return "        o = o | (((UInt32)(s.ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | (((UInt32)(s.ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | (((UInt32)(s.ReadByte()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public static UInt64 ReadUInt64(IReadableStream s)";
            yield return "    {";
            yield return "        UInt64 o;";
            yield return "        o = (UInt64)(s.ReadByte()) & 0xFF;";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 24);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 32);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 40);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 48);";
            yield return "        o = o | (((UInt64)(s.ReadByte()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public static SByte ReadInt8(IReadableStream s)";
            yield return "    {";
            yield return "        return unchecked((SByte)(s.ReadByte()));";
            yield return "    }";
            yield return "    public static Int16 ReadInt16(IReadableStream s)";
            yield return "    {";
            yield return "        Int16 o;";
            yield return "        o = (Int16)((Int16)(s.ReadByte()) & (Int16)(0xFF));";
            yield return "        o = (Int16)(o | (Int16)(((Int16)(s.ReadByte()) & 0xFF) << 8));";
            yield return "        return o;";
            yield return "    }";
            yield return "    public static Int32 ReadInt32(IReadableStream s)";
            yield return "    {";
            yield return "        Int32 o;";
            yield return "        o = (Int32)(s.ReadByte()) & 0xFF;";
            yield return "        o = o | (((Int32)(s.ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | (((Int32)(s.ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | (((Int32)(s.ReadByte()) & 0xFF) << 24);";
            yield return "        return o;";
            yield return "    }";
            yield return "    public static Int64 ReadInt64(IReadableStream s)";
            yield return "    {";
            yield return "        Int64 o;";
            yield return "        o = (Int64)(s.ReadByte()) & 0xFF;";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 8);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 16);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 24);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 32);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 40);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 48);";
            yield return "        o = o | (((Int64)(s.ReadByte()) & 0xFF) << 56);";
            yield return "        return o;";
            yield return "    }";
            yield return "";
            yield return "    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]";
            yield return "    private struct FloatInt32";
            yield return "    {";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Single Float32Value;";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Int32 Int32Value;";
            yield return "    }";
            yield return "    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]";
            yield return "    private struct FloatInt64";
            yield return "    {";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Double Float64Value;";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Int64 Int64Value;";
            yield return "    }";
            yield return "    public static Single ReadFloat32(IReadableStream s)";
            yield return "    {";
            yield return "        var fi = new FloatInt32();";
            yield return "        fi.Int32Value = ReadInt32(s);";
            yield return "        return fi.Float32Value;";
            yield return "    }";
            yield return "    public static Double ReadFloat64(IReadableStream s)";
            yield return "    {";
            yield return "        var fi = new FloatInt64();";
            yield return "        fi.Int64Value = ReadInt64(s);";
            yield return "        return fi.Float64Value;";
            yield return "    }";
            yield return "";
            yield return "    public static String ReadString(IReadableStream s)";
            yield return "    {";
            yield return "        var Length = ReadInt32(s);";
            yield return "        var n = (int)(Length);";
            yield return "        var Bytes = new List<Byte>();";
            yield return "        for (int k = 0; k < n; k += 1)";
            yield return "        {";
            yield return "            Bytes.Add(s.ReadByte());";
            yield return "        }";
            yield return "        return System.Text.Encoding.Unicode.GetString(Bytes.ToArray());";
            yield return "    }";
            yield return "}";
            yield return "";
            yield return "public static class WriteStream";
            yield return "{";
            yield return "    public static void WriteUnit(IWritableStream s, Unit v)";
            yield return "    {";
            yield return "    }";
            yield return "    public static void WriteBoolean(IWritableStream s, Boolean v)";
            yield return "    {";
            yield return "        if (v)";
            yield return "        {";
            yield return "            s.WriteByte(0xFF);";
            yield return "        }";
            yield return "        else";
            yield return "        {";
            yield return "            s.WriteByte(0);";
            yield return "        }";
            yield return "    }";
            yield return "    public static void WriteByte(IWritableStream s, Byte v)";
            yield return "    {";
            yield return "        s.WriteByte(v);";
            yield return "    }";
            yield return "";
            yield return "    public static void WriteUInt8(IWritableStream s, Byte v)";
            yield return "    {";
            yield return "        s.WriteByte(v);";
            yield return "    }";
            yield return "    public static void WriteUInt16(IWritableStream s, UInt16 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    public static void WriteUInt32(IWritableStream s, UInt32 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 16) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    public static void WriteUInt64(IWritableStream s, UInt64 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 16) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 24) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 32) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 40) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 48) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "    public static void WriteInt8(IWritableStream s, SByte v)";
            yield return "    {";
            yield return "        s.WriteByte(unchecked((Byte)(v)));";
            yield return "    }";
            yield return "    public static void WriteInt16(IWritableStream s, Int16 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "    }";
            yield return "    public static void WriteInt32(IWritableStream s, Int32 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 16) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 24) & 0xFF));";
            yield return "    }";
            yield return "    public static void WriteInt64(IWritableStream s, Int64 v)";
            yield return "    {";
            yield return "        s.WriteByte((Byte)(v & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 8) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 16) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 24) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 32) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 40) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 48) & 0xFF));";
            yield return "        s.WriteByte((Byte)((v >> 56) & 0xFF));";
            yield return "    }";
            yield return "";
            yield return "    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]";
            yield return "    private struct FloatInt32";
            yield return "    {";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Single Float32Value;";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Int32 Int32Value;";
            yield return "    }";
            yield return "    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit)]";
            yield return "    private struct FloatInt64";
            yield return "    {";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Double Float64Value;";
            yield return "        [System.Runtime.InteropServices.FieldOffset(0)]";
            yield return "        public Int64 Int64Value;";
            yield return "    }";
            yield return "    public static void WriteFloat32(IWritableStream s, Single v)";
            yield return "    {";
            yield return "        var fi = new FloatInt32();";
            yield return "        fi.Float32Value = v;";
            yield return "        WriteInt32(s, fi.Int32Value);";
            yield return "    }";
            yield return "    public static void WriteFloat64(IWritableStream s, Double v)";
            yield return "    {";
            yield return "        var fi = new FloatInt64();";
            yield return "        fi.Float64Value = v;";
            yield return "        WriteInt64(s, fi.Int64Value);";
            yield return "    }";
            yield return "";
            yield return "    public static void WriteString(IWritableStream s, String v)";
            yield return "    {";
            yield return "        var Bytes = System.Text.Encoding.Unicode.GetBytes(v);";
            yield return "        WriteInt32(s, (Int32)(Bytes.Length));";
            yield return "        foreach (var b in Bytes)";
            yield return "        {";
            yield return "            s.WriteByte(b);";
            yield return "        }";
            yield return "    }";
            yield return "}";
            yield return "";
            yield return "public interface IReadableWritableStream : IReadableStream, IWritableStream";
            yield return "{";
            yield return "}";
            yield return "";
            yield return "public sealed class ByteArrayStream : IReadableWritableStream";
            yield return "{";
            yield return "    private List<Byte> Buffer;";
            yield return "    public int Position { get; set; }";
            yield return "";
            yield return "    public ByteArrayStream()";
            yield return "    {";
            yield return "        Buffer = new List<Byte>();";
            yield return "        Position = 0;";
            yield return "    }";
            yield return "    public void Dispose()";
            yield return "    {";
            yield return "    }";
            yield return "";
            yield return "    public Byte ReadByte()";
            yield return "    {";
            yield return "        if (Position + 1 > Buffer.Count) { throw new IndexOutOfRangeException(); }";
            yield return "        var b = Buffer[Position];";
            yield return "        Position += 1;";
            yield return "        return b;";
            yield return "    }";
            yield return "    public Byte[] ReadBytes(int Size)";
            yield return "    {";
            yield return "        if (Position + Size > Buffer.Count) { throw new IndexOutOfRangeException(); }";
            yield return "        var l = new Byte[Size];";
            yield return "        if (Size == 0) { return l; }";
            yield return "        Buffer.CopyTo(Position, l, 0, Size);";
            yield return "        Position += Size;";
            yield return "        return l;";
            yield return "    }";
            yield return "";
            yield return "    public void WriteByte(Byte b)";
            yield return "    {";
            yield return "        if (Position + 1 > Buffer.Count) { SetLength(Position + 1); }";
            yield return "        Buffer[Position] = b;";
            yield return "        Position += 1;";
            yield return "    }";
            yield return "    public void WriteBytes(Byte[] l)";
            yield return "    {";
            yield return "        var Size = l.Length;";
            yield return "        if (Size == 0) { return; }";
            yield return "        if (Position + Size > Buffer.Count) { SetLength(Position + Size); }";
            yield return "        for (var k = 0; k < Size; k += 1)";
            yield return "        {";
            yield return "            Buffer[Position + k] = l[k];";
            yield return "        }";
            yield return "        Position += Size;";
            yield return "    }";
            yield return "";
            yield return "    public int Length";
            yield return "    {";
            yield return "        get";
            yield return "        {";
            yield return "            return Buffer.Count;";
            yield return "        }";
            yield return "    }";
            yield return "";
            yield return "    public void SetLength(int Length)";
            yield return "    {";
            yield return "        if (Buffer.Count < Length)";
            yield return "        {";
            yield return "            var Diff = Length - Buffer.Count;";
            yield return "            for (var k = 0; k < Diff; k += 1)";
            yield return "            {";
            yield return "                Buffer.Add(0);";
            yield return "            }";
            yield return "        }";
            yield return "        else";
            yield return "        {";
            yield return "            Buffer.RemoveRange(Length, Buffer.Count - Length);";
            yield return "        }";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator(Schema Schema, String NamespaceName)
        {
            yield return "public static class BinaryTranslator";
            yield return "{";
            if (WithFirefly)
            {
                yield return "    " + "private static Object Lockee = new Object();";
                yield return "    " + "private static LinkedList<BinarySerializer> bsl = new LinkedList<BinarySerializer>();";
                yield return "    " + "private static BinarySerializer CreateNewSerializer()";
                yield return "    " + "{";
                yield return "    " + "    var s = new BinarySerializer();";
                yield return "    " + "    var st = new StringTranslator();";
                yield return "    " + "    s.PutReaderTranslator(st);";
                yield return "    " + "    s.PutWriterTranslator(st);";
                yield return "    " + "    s.PutCounterTranslator(st);";
                yield return "    " + "    return s;";
                yield return "    " + "}";
                yield return "    " + "";
                yield return "    " + "public static Byte[] Serialize<T>(T Value)";
                yield return "    " + "{";
                yield return "    " + "    BinarySerializer bs;";
                yield return "    " + "    lock (Lockee)";
                yield return "    " + "    {";
                yield return "    " + "        if (bsl.Count > 0)";
                yield return "    " + "        {";
                yield return "    " + "            bs = bsl.Last.Value;";
                yield return "    " + "            bsl.RemoveLast();";
                yield return "    " + "        }";
                yield return "    " + "        else";
                yield return "    " + "        {";
                yield return "    " + "            bs = CreateNewSerializer();";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "    try";
                yield return "    " + "    {";
                yield return "    " + "        using (var s = Streams.CreateMemoryStream())";
                yield return "    " + "        {";
                yield return "    " + "            bs.Write<T>(Value, s);";
                yield return "    " + "            s.Position = 0;";
                yield return "    " + "            return s.Read((int)(s.Length));";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "    finally";
                yield return "    " + "    {";
                yield return "    " + "        lock (Lockee)";
                yield return "    " + "        {";
                yield return "    " + "            bsl.AddLast(bs);";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "}";
                yield return "    " + "public static T Deserialize<T>(Byte[] Bytes)";
                yield return "    " + "{";
                yield return "    " + "    BinarySerializer bs;";
                yield return "    " + "    lock (Lockee)";
                yield return "    " + "    {";
                yield return "    " + "        if (bsl.Count > 0)";
                yield return "    " + "        {";
                yield return "    " + "            bs = bsl.Last.Value;";
                yield return "    " + "            bsl.RemoveLast();";
                yield return "    " + "        }";
                yield return "    " + "        else";
                yield return "    " + "        {";
                yield return "    " + "            bs = CreateNewSerializer();";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "    try";
                yield return "    " + "    {";
                yield return "    " + "        using (var s = new ByteArrayStream(Bytes))";
                yield return "    " + "        {";
                yield return "    " + "            return bs.Read<T>(s);";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "    finally";
                yield return "    " + "    {";
                yield return "    " + "        lock (Lockee)";
                yield return "    " + "        {";
                yield return "    " + "            bsl.AddLast(bs);";
                yield return "    " + "        }";
                yield return "    " + "    }";
                yield return "    " + "}";
                yield return "    " + "";
                yield return "    " + "private class StringTranslator : IProjectorToProjectorDomainTranslator<String, Byte[]>, IProjectorToProjectorRangeTranslator<String, Byte[]>";
                yield return "    " + "{";
                yield return "    " + "    public Func<String, R> TranslateProjectorToProjectorDomain<R>(Func<Byte[], R> Projector)";
                yield return "    " + "    {";
                yield return "    " + "        return s => Projector(TextEncoding.UTF16.GetBytes(s));";
                yield return "    " + "    }";
                yield return "    " + "";
                yield return "    " + "    public Func<D, String> TranslateProjectorToProjectorRange<D>(Func<D, Byte[]> Projector)";
                yield return "    " + "    {";
                yield return "    " + "        return k => TextEncoding.UTF16.GetString(Projector(k));";
                yield return "    " + "    }";
                yield return "    " + "}";
            }
            else
            {
                foreach (var _Line in Combine(Begin(), GetBinaryTranslatorSerializers(Schema, NamespaceName)))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Unit()
        {
            yield return "public static Unit UnitFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadUnit(s);";
            yield return "}";
            yield return "public static void UnitToBinary(IWritableStream s, Unit v)";
            yield return "{";
            yield return "    WriteStream.WriteUnit(s, v);";
            yield return "}";
            yield return "public static Unit UnitFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return UnitFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] UnitToBytes(Unit v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        UnitToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Boolean()
        {
            yield return "public static Boolean BooleanFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadBoolean(s);";
            yield return "}";
            yield return "public static void BooleanToBinary(IWritableStream s, Boolean v)";
            yield return "{";
            yield return "    WriteStream.WriteBoolean(s, v);";
            yield return "}";
            yield return "public static Boolean BooleanFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return BooleanFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] BooleanToBytes(Boolean v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        BooleanToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_String()
        {
            yield return "public static String StringFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadString(s);";
            yield return "}";
            yield return "public static void StringToBinary(IWritableStream s, String v)";
            yield return "{";
            yield return "    WriteStream.WriteString(s, v);";
            yield return "}";
            yield return "public static String StringFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return StringFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] StringToBytes(String v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        StringToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int()
        {
            yield return "public static Int IntFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return (Int)(ReadStream.ReadInt32(s));";
            yield return "}";
            yield return "public static void IntToBinary(IWritableStream s, Int v)";
            yield return "{";
            yield return "    WriteStream.WriteInt32(s, (Int32)(v));";
            yield return "}";
            yield return "public static Int IntFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return IntFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] IntToBytes(Int v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        IntToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Real()
        {
            yield return "public static Real RealFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadFloat64(s);";
            yield return "}";
            yield return "public static void RealToBinary(IWritableStream s, Real v)";
            yield return "{";
            yield return "    WriteStream.WriteFloat64(s, v);";
            yield return "}";
            yield return "public static Real RealFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return RealFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] RealToBytes(Real v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        RealToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Byte()
        {
            yield return "public static Byte ByteFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadByte(s);";
            yield return "}";
            yield return "public static void ByteToBinary(IWritableStream s, Byte v)";
            yield return "{";
            yield return "    WriteStream.WriteByte(s, v);";
            yield return "}";
            yield return "public static Byte ByteFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return ByteFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] ByteToBytes(Byte v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        ByteToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt8()
        {
            yield return "public static UInt8 UInt8FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadUInt8(s);";
            yield return "}";
            yield return "public static void UInt8ToBinary(IWritableStream s, UInt8 v)";
            yield return "{";
            yield return "    WriteStream.WriteUInt8(s, v);";
            yield return "}";
            yield return "public static UInt8 UInt8FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return UInt8FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] UInt8ToBytes(UInt8 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        UInt8ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt16()
        {
            yield return "public static UInt16 UInt16FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadUInt16(s);";
            yield return "}";
            yield return "public static void UInt16ToBinary(IWritableStream s, UInt16 v)";
            yield return "{";
            yield return "    WriteStream.WriteUInt16(s, v);";
            yield return "}";
            yield return "public static UInt16 UInt16FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return UInt16FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] UInt16ToBytes(UInt16 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        UInt16ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt32()
        {
            yield return "public static UInt32 UInt32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadUInt32(s);";
            yield return "}";
            yield return "public static void UInt32ToBinary(IWritableStream s, UInt32 v)";
            yield return "{";
            yield return "    WriteStream.WriteUInt32(s, v);";
            yield return "}";
            yield return "public static UInt32 UInt32FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return UInt32FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] UInt32ToBytes(UInt32 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        UInt32ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_UInt64()
        {
            yield return "public static UInt64 UInt64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadUInt64(s);";
            yield return "}";
            yield return "public static void UInt64ToBinary(IWritableStream s, UInt64 v)";
            yield return "{";
            yield return "    WriteStream.WriteUInt64(s, v);";
            yield return "}";
            yield return "public static UInt64 UInt64FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return UInt64FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] UInt64ToBytes(UInt64 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        UInt64ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int8()
        {
            yield return "public static Int8 Int8FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadInt8(s);";
            yield return "}";
            yield return "public static void Int8ToBinary(IWritableStream s, Int8 v)";
            yield return "{";
            yield return "    WriteStream.WriteInt8(s, v);";
            yield return "}";
            yield return "public static Int8 Int8FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Int8FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Int8ToBytes(Int8 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Int8ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int16()
        {
            yield return "public static Int16 Int16FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadInt16(s);";
            yield return "}";
            yield return "public static void Int16ToBinary(IWritableStream s, Int16 v)";
            yield return "{";
            yield return "    WriteStream.WriteInt16(s, v);";
            yield return "}";
            yield return "public static Int16 Int16FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Int16FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Int16ToBytes(Int16 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Int16ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int32()
        {
            yield return "public static Int32 Int32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadInt32(s);";
            yield return "}";
            yield return "public static void Int32ToBinary(IWritableStream s, Int32 v)";
            yield return "{";
            yield return "    WriteStream.WriteInt32(s, v);";
            yield return "}";
            yield return "public static Int32 Int32FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Int32FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Int32ToBytes(Int32 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Int32ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Int64()
        {
            yield return "public static Int64 Int64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadInt64(s);";
            yield return "}";
            yield return "public static void Int64ToBinary(IWritableStream s, Int64 v)";
            yield return "{";
            yield return "    WriteStream.WriteInt64(s, v);";
            yield return "}";
            yield return "public static Int64 Int64FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Int64FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Int64ToBytes(Int64 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Int64ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float32()
        {
            yield return "public static Float32 Float32FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadFloat32(s);";
            yield return "}";
            yield return "public static void Float32ToBinary(IWritableStream s, Float32 v)";
            yield return "{";
            yield return "    WriteStream.WriteFloat32(s, v);";
            yield return "}";
            yield return "public static Float32 Float32FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Float32FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Float32ToBytes(Float32 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Float32ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Float64()
        {
            yield return "public static Float64 Float64FromBinary(IReadableStream s)";
            yield return "{";
            yield return "    return ReadStream.ReadFloat64(s);";
            yield return "}";
            yield return "public static void Float64ToBinary(IWritableStream s, Float64 v)";
            yield return "{";
            yield return "    WriteStream.WriteFloat64(s, v);";
            yield return "}";
            yield return "public static Float64 Float64FromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return Float64FromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] Float64ToBytes(Float64 v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        Float64ToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Primitive_Type()
        {
            yield return "public static Type TypeFromBinary(IReadableStream s)";
            yield return "{";
            yield return "    throw new NotSupportedException();";
            yield return "}";
            yield return "public static void TypeToBinary(IWritableStream s, Type v)";
            yield return "{";
            yield return "    throw new NotSupportedException();";
            yield return "}";
            yield return "public static Type TypeFromBytes(Byte[] Bytes)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            yield return "        return TypeFromBinary(bas);";
            yield return "    }";
            yield return "}";
            yield return "public static Byte[] TypeToBytes(Type v)";
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        TypeToBinary(bas, v);";
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Alias(AliasDef a, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Alias(a.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(a.GetTypeSpec(), NamespaceName), a.Type, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Alias(String Name, String TypeString, TypeSpec ValueType, String NamespaceName)
        {
            var ValueSimpleName = ValueType.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    o.Value = "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, o.Value);"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Record(RecordDef r, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Record(String Name, String TypeString, List<VariableDef> Fields, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var o = new "), TypeString), "();"))
            {
                yield return _Line;
            }
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "o."), GetEscapedIdentifier(f.Name)), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "    return o;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var f in Fields)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), f.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(f.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(TaggedUnionDef tu, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_TaggedUnion(String Name, String TypeString, String TagName, String TagTypeString, List<VariableDef> Alternatives, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(TagName, TagTypeString, "Int", "Int", NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var _Tag = "), GetEscapedIdentifier(Combine(Combine(Begin(), TagName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (_Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "return "), TypeString), "."), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "();"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                else
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "return "), TypeString), "."), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "("), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s));"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), TagName), "ToBinary"))), "(s, o._Tag);"))
            {
                yield return _Line;
            }
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "if (o._Tag == "), TagTypeString), "."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(a.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Enum(EnumDef e, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Enum(String Name, String TypeString, String UnderlyingSimpleName, String UnderlyingType, String NamespaceName)
        {
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    return ("), TypeString), ")("), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), UnderlyingSimpleName), "ToBinary"))), "(s, ("), UnderlyingType), ")(o));"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), Name), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_ClientCommand(ClientCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Request", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Request", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Begin(), BinaryTranslator_TaggedUnion(GetSuffixedTypeName(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeName(c.Name, c.Version, "ReplyTag", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName), c.InParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_ServerCommand(ServerCommandDef c, String NamespaceName)
        {
            foreach (var _Line in Combine(Begin(), BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Event", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Event", NamespaceName), c.OutParameters, NamespaceName)))
            {
                yield return _Line;
            }
        }
        public IEnumerable<String> BinaryTranslator_Tuple(TypeSpec tp, String NamespaceName)
        {
            var SimpleName = tp.SimpleName(NamespaceName);
            var TypeString = GetTypeString(tp, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            var ItemNames = new List<String>{};
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "var "), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k + 1))), " = "), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "FromBinary"))), "(s);"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    ItemNames.Add("Item" + (k + 1).ToString(System.Globalization.CultureInfo.InvariantCulture));
                    k += 1;
                }
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return Tuple.Create("), String.Join(", ", ItemNames)), ");"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " t)"))
            {
                yield return _Line;
            }
            yield return "{";
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Begin(), GetEscapedIdentifier(Combine(Combine(Begin(), t.SimpleName(NamespaceName)), "ToBinary"))), "(s, t."), GetEscapedIdentifier(Combine(Combine(Begin(), "Item"), k + 1))), ");"))
                    {
                        yield return _Line == "" ? "" : "    " + _Line;
                    }
                    k += 1;
                }
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Optional(TypeSpec o, TaggedUnionDef GenericOptionalType, String NamespaceName)
        {
            var ElementType = o.GenericTypeSpec.ParameterValues.Single();
            var Alternatives = GenericOptionalType.Alternatives.Select(a => new VariableDef { Name = a.Name, Type = a.Type.OnGenericParameterRef ? ElementType : a.Type, Attributes = a.Attributes, Description = a.Description }).ToList();
            var SimpleName = o.SimpleName(NamespaceName);
            var TypeString = GetTypeString(o, NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    var _Tag = OptionalTagFromBinary(s);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (_Tag == OptionalTag."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "return "), TypeString), "."), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "();"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                else
                {
                    foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Combine(Combine(Begin(), "return "), TypeString), "."), GetEscapedIdentifier(Combine(Combine(Begin(), "Create"), a.Name))), "("), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "FromBinary"))), "(s));"))
                    {
                        yield return _Line == "" ? "" : "        " + _Line;
                    }
                }
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    OptionalTagToBinary(s, o._Tag);";
            foreach (var a in Alternatives)
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "if (o._Tag == OptionalTag."), GetEscapedIdentifier(a.Name)), ")"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), a.Type.SimpleName(NamespaceName)), "ToBinary"))), "(s, o."), GetEscapedIdentifier(a.Name)), ");"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "    return;";
                yield return "    " + "}";
            }
            yield return "    throw new InvalidOperationException();";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_List(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementType = l.GenericTypeSpec.ParameterValues.Single();
            var ElementSimpleName = ElementType.SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = (int)(IntFromBinary(s));";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "var l = new List<Byte>(s.ReadBytes(Length));";
            }
            else
            {
                foreach (var _Line in Combine(Combine(Combine(Begin(), "var l = new "), TypeString), "(Length);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "for (int k = 0; k < Length; k += 1)";
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    l.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.Count;";
            yield return "    IntToBinary(s, (Int)(Length));";
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                yield return "    " + "s.WriteBytes(l.ToArray());";
            }
            else
            {
                yield return "    " + "foreach (var e in l)";
                yield return "    " + "{";
                foreach (var _Line in Combine(Combine(Combine(Begin(), "    "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
                {
                    yield return _Line == "" ? "" : "    " + _Line;
                }
                yield return "    " + "}";
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Set(TypeSpec l, String NamespaceName)
        {
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var ElementTypeString = GetTypeString(l.GenericTypeSpec.ParameterValues.Single(), NamespaceName);
            var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = (int)(IntFromBinary(s));";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var l = new List<"), ElementTypeString), ">(Length);"))
            {
                yield return _Line;
            }
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.Add("), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    return new "), TypeString), "(l);"))
            {
                yield return _Line;
            }
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.Count;";
            yield return "    IntToBinary(s, (Int)(Length));";
            yield return "    foreach (var e in l)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ElementSimpleName), "ToBinary"))), "(s, e);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> BinaryTranslator_Map(TypeSpec l, String NamespaceName)
        {
            var gp = l.GenericTypeSpec.ParameterValues;
            if (gp.Count != 2)
            {
                throw new ArgumentException();
            }
            var SimpleName = l.SimpleName(NamespaceName);
            var TypeString = GetTypeString(l, NamespaceName);
            var KeySimpleName = gp[0].SimpleName(NamespaceName);
            var ValueSimpleName = gp[1].SimpleName(NamespaceName);
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(IReadableStream s)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = (Int)(IntFromBinary(s));";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "    var l = new "), TypeString), "(Length);"))
            {
                yield return _Line;
            }
            yield return "    for (int k = 0; k < Length; k += 1)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        var Key = "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "FromBinary"))), "(s);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        l.Add(Key, "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "FromBinary"))), "(s));"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "    return l;";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static void "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(IWritableStream s, "), TypeString), " l)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    int Length = l.Count;";
            yield return "    IntToBinary(s, (Int)(Length));";
            yield return "    foreach (var p in l)";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), KeySimpleName), "ToBinary"))), "(s, p.Key);"))
            {
                yield return _Line;
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), ValueSimpleName), "ToBinary"))), "(s, p.Value);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static "), TypeString), " "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBytes"))), "(Byte[] Bytes)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            yield return "        bas.WriteBytes(Bytes);";
            yield return "        bas.Position = 0;";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        return "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "FromBinary"))), "(bas);"))
            {
                yield return _Line;
            }
            yield return "    }";
            yield return "}";
            foreach (var _Line in Combine(Combine(Combine(Combine(Combine(Begin(), "public static Byte[] "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBytes"))), "("), TypeString), " o)"))
            {
                yield return _Line;
            }
            yield return "{";
            yield return "    using (var bas = new ByteArrayStream())";
            yield return "    {";
            foreach (var _Line in Combine(Combine(Combine(Begin(), "        "), GetEscapedIdentifier(Combine(Combine(Begin(), SimpleName), "ToBinary"))), "(bas, o);"))
            {
                yield return _Line;
            }
            yield return "        bas.Position = 0;";
            yield return "        return bas.ReadBytes(bas.Length);";
            yield return "    }";
            yield return "}";
        }
        public IEnumerable<String> Main(Schema Schema, String NamespaceName, Boolean EnableNullableDeclaration)
        {
            yield return "//==========================================================================";
            yield return "//";
            yield return "//  Notice:      This file is automatically generated.";
            yield return "//               Please don't modify this file.";
            yield return "//";
            yield return "//==========================================================================";
            yield return "";
            if (EnableNullableDeclaration)
            {
                yield return "#nullable disable";
                yield return "";
            }
            yield return "using System;";
            yield return "using System.Collections.Generic;";
            var Commands = Schema.Types.Where(t => t.OnClientCommand || t.OnServerCommand).ToList();
            if (Commands.Count > 0)
            {
                yield return "using System.Threading.Tasks;";
            }
            if (WithFirefly)
            {
                yield return "using Firefly;";
                yield return "using Firefly.Streaming;";
                yield return "using Firefly.Mapping;";
                yield return "using Firefly.Mapping.Binary;";
                yield return "using Firefly.TextEncoding;";
            }
            foreach (var _Line in Combine(Combine(Combine(Begin(), "using "), Schema.Imports), ";"))
            {
                yield return _Line;
            }
            yield return "";
            foreach (var _Line in Combine(Begin(), GetTypes(Schema, NamespaceName)))
            {
                yield return _Line;
            }
            yield return "";
        }
    }
}
