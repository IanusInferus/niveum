$Comment
    ==========================================================================

      File:        CSharp.tree
      Location:    Niveum.Object <Tree>
      Description: 对象类型结构C#模板
      Version:     2022.11.01.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.CSharp

#Import
    System
    System.Collections.Generic
    System.Linq

#Constant Keywords:List<String>
    $List String
        abstract
        event
        new
        struct
        as
        explicit
        null
        switch
        base
        extern
        object
        this
        bool
        false
        operator
        throw
        break
        finally
        out
        true
        byte
        fixed
        override
        try
        case
        float
        params
        typeof
        catch
        for
        private
        uint
        char
        foreach
        protected
        ulong
        checked
        goto
        public
        unchecked
        class
        if
        readonly
        unsafe
        const
        implicit
        ref
        ushort
        continue
        in
        return
        using
        decimal
        int
        sbyte
        virtual
        default
        interface
        sealed
        volatile
        delegate
        internal
        short
        void
        do
        is
        sizeof
        while
        double
        lock
        stackalloc
        else
        long
        static
        enum
        namespace
        string
        get
        partial
        set
        value
        where
        yield

#Constant PrimitiveMapping:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Unit                Unit
        Boolean             System.Boolean
        String              System.String
        Int                 System.Int32
        Real                System.Double
        Byte                System.Byte
        UInt8               System.Byte
        UInt16              System.UInt16
        UInt32              System.UInt32
        UInt64              System.UInt64
        Int8                System.SByte
        Int16               System.Int16
        Int32               System.Int32
        Int64               System.Int64
        Float32             System.Single
        Float64             System.Double
        Type                System.Type
        Optional            Optional
        List                System.Collections.Generic.List
        Set                 System.Collections.Generic.HashSet
        Map                 System.Collections.Generic.Dictionary

#Constant PrimitiveMappingEnum:Map<String, String>
    $Table KeyValuePairOfStringAndString Key Value
        Int                 int
        Byte                byte
        UInt8               byte
        UInt16              ushort
        UInt32              uint
        UInt64              ulong
        Int8                sbyte
        Int16               short
        Int32               int
        Int64               long

#Template SingleLineXmlComment Description:String
    /// <summary>${Description}</summary>

#Template MultiLineXmlComment Description:List<String>
    /// <summary>
    /// ${Description}
    /// </summary>

#Template Primitive Name:String PlatformName:String
    using [[${Name}]] = ${PlatformName};

#Template Primitive_Unit
    public class AliasAttribute : Attribute {}
    public class RecordAttribute : Attribute {}
    public class TaggedUnionAttribute : Attribute {}
    public class TagAttribute : Attribute {}
    public class TupleAttribute : Attribute {}

    [Record]
    public struct Unit {}

#Template Primitive_Optional
    public enum OptionalTag
    {
        None = 0,
        Some = 1
    }
    [TaggedUnion]
    public struct Optional<T>
    {
        [Tag] public OptionalTag _Tag;

        public Unit None;
        public T Some;

        public static Optional<T> CreateNone() { return new Optional<T> { _Tag = OptionalTag.None, None = new Unit() }; }
        public static Optional<T> CreateSome(T Value) { return new Optional<T> { _Tag = OptionalTag.Some, Some = Value }; }

        public Boolean OnNone { get { return _Tag == OptionalTag.None; } }
        public Boolean OnSome { get { return _Tag == OptionalTag.Some; } }

        public static Optional<T> Empty { get { return CreateNone(); } }
        public static implicit operator Optional<T>(T v)
        {
            if (v == null)
            {
                return CreateNone();
            }
            else
            {
                return CreateSome(v);
            }
        }
        public static explicit operator T(Optional<T> v)
        {
            if (v.OnNone)
            {
                throw new InvalidOperationException();
            }
            return v.Some;
        }
        public static Boolean operator ==(Optional<T> Left, Optional<T> Right)
        {
            return Equals(Left, Right);
        }
        public static Boolean operator !=(Optional<T> Left, Optional<T> Right)
        {
            return !Equals(Left, Right);
        }
        public static Boolean operator ==(Optional<T>? Left, Optional<T>? Right)
        {
            return Equals(Left, Right);
        }
        public static Boolean operator !=(Optional<T>? Left, Optional<T>? Right)
        {
            return !Equals(Left, Right);
        }
        public override Boolean Equals(Object obj)
        {
            if (obj == null) { return Equals(this, null); }
            if (obj.GetType() != typeof(Optional<T>)) { return false; }
            var o = (Optional<T>)(obj);
            return Equals(this, o);
        }
        public override Int32 GetHashCode()
        {
            if (OnNone) { return 0; }
            return Some.GetHashCode();
        }

        private static Boolean Equals(Optional<T> Left, Optional<T> Right)
        {
            if (Left.OnNone && Right.OnNone)
            {
                return true;
            }
            if (Left.OnNone || Right.OnNone)
            {
                return false;
            }
            return Left.Some.Equals(Right.Some);
        }
        private static Boolean Equals(Optional<T>? Left, Optional<T>? Right)
        {
            if ((!Left.HasValue || Left.Value.OnNone) && (!Right.HasValue || Right.Value.OnNone))
            {
                return true;
            }
            if (!Left.HasValue || Left.Value.OnNone || !Right.HasValue || Right.Value.OnNone)
            {
                return false;
            }
            return Equals(Left.Value, Right.Value);
        }

        public T Value
        {
            get
            {
                if (OnSome)
                {
                    return Some;
                }
                else
                {
                    throw new InvalidOperationException();
                }
            }
        }
        public T ValueOrDefault(T Default)
        {
            if (OnSome)
            {
                return Some;
            }
            else
            {
                return Default;
            }
        }

        public override String ToString()
        {
            if (OnSome)
            {
                return Some.ToString();
            }
            else
            {
                return "-";
            }
        }
    }

#Template Alias a:AliasDef
    $$
        var Name = GetEscapedIdentifier(a.DefinitionName()) + GetGenericParameters(a.GenericParameters);
        var Type = GetTypeString(a.Type, a.NamespaceName());
    ${GetXmlComment(a.Description)}
    [Alias]
    public sealed class ${Name}
    {
        public ${Type} Value;

        public static implicit operator ${Name}(${Type} o)
        {
            return new ${Name} {Value = o};
        }
        public static implicit operator ${Type}(${Name} c)
        {
            return c.Value;
        }
    }

#Template Record r:RecordDef
    $$
        var Name = GetEscapedIdentifier(r.DefinitionName()) + GetGenericParameters(r.GenericParameters);
    ${GetXmlComment(r.Description)}
    [Record]
    public sealed class ${Name}
    {
        $$
            foreach (var f in r.Fields)
            {
                ##
                    ${GetXmlComment(f.Description)}
                    public ${GetTypeString(f.Type, r.NamespaceName())} [[${f.Name}]];
            }
    }

#Template TaggedUnion tu:TaggedUnionDef
    $$
        var Name = GetEscapedIdentifier(tu.DefinitionName()) + GetGenericParameters(tu.GenericParameters);
        var TagName = GetEscapedIdentifier(GetSuffixedTypeName(tu.Name, tu.Version, "Tag", tu.NamespaceName()));
    public enum ${TagName}
    {
        $$
            var k = 0;
            foreach (var a in tu.Alternatives)
            {
                if (k == tu.Alternatives.Count - 1)
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        [[${a.Name}]] = ${k}
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        [[${a.Name}]] = ${k},
                }
                k += 1;
            }
    }
    ${GetXmlComment(tu.Description)}
    [TaggedUnion]
    public sealed class ${Name}
    {
        [Tag] public ${TagName} _Tag;

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    public ${GetTypeString(a.Type, tu.NamespaceName())} [[${a.Name}]];
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                if (a.Type.OnTypeRef && a.Type.TypeRef.NameMatches("Unit"))
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        public static ${Name} [[Create${a.Name}]]() { return new ${Name} { _Tag = ${TagName}.[[${a.Name}]], [[${a.Name}]] = default(Unit) }; }
                }
                else
                {
                    ##
                        ${GetXmlComment(a.Description)}
                        public static ${Name} [[Create${a.Name}]](${GetTypeString(a.Type, tu.NamespaceName())} Value) { return new ${Name} { _Tag = ${TagName}.[[${a.Name}]], [[${a.Name}]] = Value }; }
                }
            }

        $$
            foreach (var a in tu.Alternatives)
            {
                ##
                    ${GetXmlComment(a.Description)}
                    public Boolean [[On${a.Name}]] { get { return _Tag == ${TagName}.[[${a.Name}]]; } }
            }
    }

#Template Enum e:EnumDef
    $$
        var Name = GetEscapedIdentifier(e.DefinitionName());
        var ParserName = GetEscapedIdentifier(GetSuffixedTypeName(e.Name, e.Version, "Parser", e.NamespaceName()));
        var WriterName = GetEscapedIdentifier(GetSuffixedTypeName(e.Name, e.Version, "Writer", e.NamespaceName()));
    ${GetXmlComment(e.Description)}
    public enum ${Name} : ${GetEnumTypeString(e.UnderlyingType, e.NamespaceName())}
    {
        $$
            var k = 0;
            foreach (var l in e.Literals)
            {
                if (k == e.Literals.Count - 1)
                {
                    ##
                        ${GetXmlComment(l.Description)}
                        [[${l.Name}]] = ${l.Value}
                }
                else
                {
                    ##
                        ${GetXmlComment(l.Description)}
                        [[${l.Name}]] = ${l.Value},
                }
                k += 1;
            }
    }
    ${GetXmlComment(e.Description)}
    public static class ${ParserName}
    {
        private static Dictionary<String, ${Name}> d = new Dictionary<String, ${Name}>();
        static ${ParserName}()
        {
            $$
                var LiteralDict = e.Literals.ToDictionary(l => l.Name);
                var LiteralNameAdds = e.Literals.Select(l => new { Name = l.Name, NameOrDescription = l.Name });
                var LiteralDescriptionAdds = e.Literals.GroupBy(l => l.Description).Where(l => l.Count() == 1).Select(l => l.Single()).Where(l => !LiteralDict.ContainsKey(l.Description)).Select(l => new { Name = l.Name, NameOrDescription = l.Description });
                foreach (var l in LiteralNameAdds.Concat(LiteralDescriptionAdds))
                {
                    ##
                        d.Add(${GetEscapedStringLiteral(l.NameOrDescription)}, ${Name}.[[${l.Name}]]);
                }
        }
        public static ${Name}? TryParse(String Value)
        {
            if (d.ContainsKey(Value)) { return d[Value]; }
            return null;
        }
    }
    ${GetXmlComment(e.Description)}
    public static class ${WriterName}
    {
        private static Dictionary<${Name}, String> d = new Dictionary<${Name}, String>();
        static ${WriterName}()
        {
            $$
                foreach (var l in e.Literals)
                {
                    ##
                        if (!d.ContainsKey(${Name}.[[${l.Name}]])) { d.Add(${Name}.[[${l.Name}]], ${GetEscapedStringLiteral(l.Description)}); }
                }
        }
        public static String GetDescription(${Name} Value)
        {
            return d[Value];
        }
    }

#Template ClientCommand c:ClientCommandDef
    $$
        var RequestRef = GetSuffixedTypeRef(c.Name, c.Version, "Request");
        var ReplyRef = GetSuffixedTypeRef(c.Name, c.Version, "Reply");
        var Request = new RecordDef { Name = RequestRef.Name, Version = RequestRef.Version, GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
        var Reply = new TaggedUnionDef { Name = ReplyRef.Name, Version = ReplyRef.Version, GenericParameters = new List<VariableDef> { }, Alternatives = c.InParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Request)}
    ${TaggedUnion(Reply)}

#Template ServerCommand c:ServerCommandDef
    $$
        var EventRef = GetSuffixedTypeRef(c.Name, c.Version, "Event");
        var Event = new RecordDef { Name = EventRef.Name, Version = EventRef.Version, GenericParameters = new List<VariableDef> { }, Fields = c.OutParameters, Attributes = c.Attributes, Description = c.Description };
    ${Record(Event)}

#Template IApplicationServer Commands:List<TypeDef> NamespaceName:String
    public interface IApplicationServer
    {
        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ClientCommand.Description;
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    if (c.ClientCommand.Attributes.Any(a => a.Key == "Async"))
                    {
                        ##
                            ${GetXmlComment(Description)}
                            Task<${ReplyTypeString}> [[${Name}]](${RequestTypeString} r);
                    }
                    else
                    {
                        ##
                            ${GetXmlComment(Description)}
                            ${ReplyTypeString} [[${Name}]]([[${RequestTypeString}]] r);
                    }
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        event Action<${EventTypeString}> [[${Name}]];
                }
            }
    }

#Template IApplicationClient Commands:List<TypeDef> NamespaceName:String
    public interface IApplicationClient
    {
        UInt64 Hash { get; }
        void NotifyErrorCommand(String CommandName, String Message);

        $$
            foreach (var c in Commands)
            {
                if (c.OnClientCommand)
                {
                    var Name = c.ClientCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ClientCommand.Description;
                    var RequestTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Request", NamespaceName);
                    var ReplyTypeString = GetSuffixedTypeString(c.ClientCommand.Name, c.ClientCommand.Version, "Reply", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        Task<${ReplyTypeString}> [[${Name}]](${RequestTypeString} r);
                }
                else if (c.OnServerCommand)
                {
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        event Action<${EventTypeString}> [[${Name}]];
                }
            }
    }

#Template IEventPump Commands:List<TypeDef> NamespaceName:String
    public interface IEventPump
    {
        $$
            foreach (var c in Commands)
            {
                if (c.OnServerCommand)
                {
                    if (c.ServerCommand.Version != "") { continue; }
                    var Name = c.ServerCommand.GetTypeSpec().SimpleName(NamespaceName);
                    var Description = c.ServerCommand.Description;
                    var EventTypeString = GetSuffixedTypeString(c.ServerCommand.Name, c.ServerCommand.Version, "Event", NamespaceName);
                    ##
                        ${GetXmlComment(Description)}
                        Action<${EventTypeString}> [[${Name}]] { get; }
                }
            }
    }

#Template WrapNamespace NamespaceName:String Contents:IEnumerable<String>
    $$
        if (NamespaceName == "")
        {
            ##
                ${Contents}
        }
        else
        {
            ##
                namespace [[${NamespaceName}]]
                {
                    ${Contents}
                }
        }

#Template Main Schema:Schema NamespaceName:String EnableNullableDeclaration:Boolean
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    $$
        if (EnableNullableDeclaration)
        {
            ##
                #nullable disable

            $End
        }
    using System;
    using System.Collections.Generic;
    $$
        var Commands = Schema.Types.Where(t => t.OnClientCommand || t.OnServerCommand).ToList();
        if (Commands.Count > 0)
        {
            ##
                using System.Threading.Tasks;
        }
    using ${Schema.Imports};

    ${GetTypes(Schema, NamespaceName)}

$End
