$Comment
    ==========================================================================

      File:        JavaBinary.tree
      Location:    Niveum.Object <Tree>
      Description: 对象类型结构Java二进制模板
      Version:     2025.08.07.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.JavaBinary

#Import
    System
    System.Collections.Generic
    System.Linq
    Firefly

#Template IReadableStream
    public abstract class IReadableStream
    {
        public abstract byte ReadByte();
        public abstract byte[] ReadBytes(int Size);

        public Unit ReadUnit()
        {
            return Unit.Value;
        }
        public Boolean ReadBoolean()
        {
            return ReadByte() != 0;
        }

        public byte ReadUInt8()
        {
            return ReadByte();
        }
        public short ReadUInt16()
        {
            short o;
            o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));
            o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));
            return o;
        }
        public int ReadUInt32()
        {
            int o;
            o = (int) (this.ReadInt8()) & 0xFF;
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);
            return o;
        }
        public long ReadUInt64()
        {
            long o;
            o = (long) (this.ReadInt8()) & 0xFF;
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);
            return o;
        }
        public byte ReadInt8()
        {
            return ReadByte();
        }
        public short ReadInt16()
        {
            short o;
            o = (short) ((short) (this.ReadInt8()) & (short) (0xFF));
            o = (short) (o | (((short) (this.ReadInt8()) & 0xFF) << 8));
            return o;
        }
        public int ReadInt32()
        {
            int o;
            o = (int) (this.ReadInt8()) & 0xFF;
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 8);
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 16);
            o = o | (((int) (this.ReadInt8()) & 0xFF) << 24);
            return o;
        }
        public long ReadInt64()
        {
            long o;
            o = (long) (this.ReadInt8()) & 0xFF;
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 8);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 16);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 24);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 32);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 40);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 48);
            o = o | (((long) (this.ReadInt8()) & 0xFF) << 56);
            return o;
        }

        public float ReadFloat32()
        {
            return Float.intBitsToFloat(this.ReadInt32());
        }
        public double ReadFloat64()
        {
            return Double.longBitsToDouble(this.ReadInt64());
        }

        public long ReadSize()
        {
            var Lower = this.ReadInt32();
            if ((Lower & 0x80000000) == 0)
            {
                return Lower;
            }
            var Upper = this.ReadInt32();
            if ((Upper & 0x80000000) != 0)
            {
                throw new RuntimeException("InvalidOperation");
            }
            return (((long)Upper) << 31) | (long)Lower;
        }

        public String ReadString()
        {
            long LongLength = this.ReadSize();
            if (LongLength > 0x7FFFFFFF) { throw new RuntimeException("InvalidOperation"); }
            int n = (int)LongLength;
            byte[] s = new byte[n];
            for (int k = 0; k < n; k += 1)
            {
                s[k] = this.ReadInt8();
            }
            try
            {
                return new String(s, "UTF-16LE");
            }
            catch (java.io.UnsupportedEncodingException ex)
            {
                throw new RuntimeException(ex);
            }
        }
    };

#Template IWritableStream
    public abstract class IWritableStream
    {
        public abstract void WriteByte(byte b);
        public abstract void WriteBytes(byte[] l);

        public void WriteUnit(Unit v)
        {
        }
        public void WriteBoolean(boolean v)
        {
            if (v)
            {
                WriteByte((byte)(0xFF));
            }
            else
            {
                WriteByte((byte)(0));
            }
        }

        public void WriteUInt8(byte v)
        {
            WriteByte(v);
        }
        public void WriteUInt16(short v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
        }
        public void WriteUInt32(int v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
            WriteByte((byte)((v >> 16) & 0xFF));
            WriteByte((byte)((v >> 24) & 0xFF));
        }
        public void WriteUInt64(long v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
            WriteByte((byte)((v >> 16) & 0xFF));
            WriteByte((byte)((v >> 24) & 0xFF));
            WriteByte((byte)((v >> 32) & 0xFF));
            WriteByte((byte)((v >> 40) & 0xFF));
            WriteByte((byte)((v >> 48) & 0xFF));
            WriteByte((byte)((v >> 56) & 0xFF));
        }
        public void WriteInt8(byte v)
        {
            WriteByte((byte)(v));
        }
        public void WriteInt16(short v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
        }
        public void WriteInt32(int v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
            WriteByte((byte)((v >> 16) & 0xFF));
            WriteByte((byte)((v >> 24) & 0xFF));
        }
        public void WriteInt64(long v)
        {
            WriteByte((byte)(v & 0xFF));
            WriteByte((byte)((v >> 8) & 0xFF));
            WriteByte((byte)((v >> 16) & 0xFF));
            WriteByte((byte)((v >> 24) & 0xFF));
            WriteByte((byte)((v >> 32) & 0xFF));
            WriteByte((byte)((v >> 40) & 0xFF));
            WriteByte((byte)((v >> 48) & 0xFF));
            WriteByte((byte)((v >> 56) & 0xFF));
        }

        public void WriteFloat32(float v)
        {
            WriteInt32(Float.floatToIntBits(v));
        }
        public void WriteFloat64(double v)
        {
            WriteInt64(Double.doubleToLongBits(v));
        }

        public void WriteSize(long v)
        {
            if ((v < 0) || (v > 0x3FFFFFFFFFFFFFFFL))
            {
                throw new RuntimeException("InvalidOperation");
            }
            var Lower = (int)((long)(v) & 0x7FFFFFFF);
            var Upper = (int)(((long)(v) >> 31) & 0x7FFFFFFF);
            if (Upper != 0)
            {
                Lower |= 0x80000000;
                WriteInt32(Lower);
                WriteInt32(Upper);
            }
            else
            {
                WriteInt32(Lower);
            }
        }

        public void WriteString(String v)
        {
            byte[] l;
            try
            {
                l = v.getBytes("UTF-16LE");
            }
            catch (java.io.UnsupportedEncodingException ex)
            {
                throw new RuntimeException(ex);
            }
            WriteInt32(l.length);
            for (int k = 0; k < l.length; k += 1)
            {
                WriteByte(l[k]);
            }
        }
    };

#Template BinaryTranslator Schema:Schema NamespaceName:String
    public final class BinaryTranslator
    {
        ${GetBinaryTranslatorSerializers(Schema, NamespaceName)}
    }

#Template BinaryTranslator_Primitive_Unit
    public static Unit UnitFromBinary(IReadableStream s)
    {
        return s.ReadUnit();
    }
    public static void UnitToBinary(IWritableStream s, Unit v)
    {
        s.WriteUnit(v);
    }

#Template BinaryTranslator_Primitive_Boolean
    public static Boolean BooleanFromBinary(IReadableStream s)
    {
        return s.ReadBoolean();
    }
    public static void BooleanToBinary(IWritableStream s, Boolean v)
    {
        s.WriteBoolean(v);
    }

#Template BinaryTranslator_Primitive_String
    public static String StringFromBinary(IReadableStream s)
    {
        return s.ReadString();
    }
    public static void StringToBinary(IWritableStream s, String v)
    {
        s.WriteString(v);
    }

#Template BinaryTranslator_Primitive_Int
    public static int IntFromBinary(IReadableStream s)
    {
        return s.ReadInt32();
    }
    public static void IntToBinary(IWritableStream s, int v)
    {
        s.WriteInt32(v);
    }

#Template BinaryTranslator_Primitive_Real
    public static double RealFromBinary(IReadableStream s)
    {
        return s.ReadFloat64();
    }
    public static void RealToBinary(IWritableStream s, double v)
    {
        s.WriteFloat64(v);
    }

#Template BinaryTranslator_Primitive_Byte
    public static byte ByteFromBinary(IReadableStream s)
    {
        return s.ReadByte();
    }
    public static void ByteToBinary(IWritableStream s, byte v)
    {
        s.WriteByte(v);
    }

#Template BinaryTranslator_Primitive_UInt8
    public static byte UInt8FromBinary(IReadableStream s)
    {
        return s.ReadUInt8();
    }
    public static void UInt8ToBinary(IWritableStream s, byte v)
    {
        s.WriteUInt8(v);
    }

#Template BinaryTranslator_Primitive_UInt16
    public static short UInt16FromBinary(IReadableStream s)
    {
        return s.ReadUInt16();
    }
    public static void UInt16ToBinary(IWritableStream s, short v)
    {
        s.WriteUInt16(v);
    }

#Template BinaryTranslator_Primitive_UInt32
    public static int UInt32FromBinary(IReadableStream s)
    {
        return s.ReadUInt32();
    }
    public static void UInt32ToBinary(IWritableStream s, int v)
    {
        s.WriteUInt32(v);
    }

#Template BinaryTranslator_Primitive_UInt64
    public static long UInt64FromBinary(IReadableStream s)
    {
        return s.ReadUInt64();
    }
    public static void UInt64ToBinary(IWritableStream s, long v)
    {
        s.WriteUInt64(v);
    }

#Template BinaryTranslator_Primitive_Int8
    public static byte Int8FromBinary(IReadableStream s)
    {
        return s.ReadInt8();
    }
    public static void Int8ToBinary(IWritableStream s, byte v)
    {
        s.WriteInt8(v);
    }

#Template BinaryTranslator_Primitive_Int16
    public static short Int16FromBinary(IReadableStream s)
    {
        return s.ReadInt16();
    }
    public static void Int16ToBinary(IWritableStream s, short v)
    {
        s.WriteInt16(v);
    }

#Template BinaryTranslator_Primitive_Int32
    public static int Int32FromBinary(IReadableStream s)
    {
        return s.ReadInt32();
    }
    public static void Int32ToBinary(IWritableStream s, int v)
    {
        s.WriteInt32(v);
    }

#Template BinaryTranslator_Primitive_Int64
    public static long Int64FromBinary(IReadableStream s)
    {
        return s.ReadInt64();
    }
    public static void Int64ToBinary(IWritableStream s, long v)
    {
        s.WriteInt64(v);
    }

#Template BinaryTranslator_Primitive_Float32
    public static float Float32FromBinary(IReadableStream s)
    {
        return s.ReadFloat32();
    }
    public static void Float32ToBinary(IWritableStream s, float v)
    {
        s.WriteFloat32(v);
    }

#Template BinaryTranslator_Primitive_Float64
    public static double Float64FromBinary(IReadableStream s)
    {
        return s.ReadFloat64();
    }
    public static void Float64ToBinary(IWritableStream s, double v)
    {
        s.WriteFloat64(v);
    }

#Template BinaryTranslator_Primitive_Type
    public static java.lang.reflect.Type TypeFromBinary(IReadableStream s)
    {
        throw new RuntimeException("NotSupported");
    }
    public static void TypeToBinary(IWritableStream s, java.lang.reflect.Type v)
    {
        throw new RuntimeException("NotSupported");
    }

#Template BinaryTranslator_Alias a:AliasDef NamespaceName:String
    ${BinaryTranslator_Alias(a.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(a.GetTypeSpec(), NamespaceName), a.Type, NamespaceName)}

#Template BinaryTranslator_Alias Name:String TypeString:String ValueType:TypeSpec NamespaceName:String
    $$
        var ValueSimpleName = ValueType.SimpleName(NamespaceName);
    public static ${TypeString} [[${Name}FromBinary]](IReadableStream s)
    {
        ${TypeString} o = new ${TypeString}();
        o.Value = [[${ValueSimpleName}FromBinary]](s);
        return o;
    }
    public static void [[${Name}ToBinary]](IWritableStream s, ${TypeString} o)
    {
        [[${ValueSimpleName}ToBinary]](s, o.Value);
    }

#Template BinaryTranslator_Record r:RecordDef NamespaceName:String
    ${BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)}

#Template BinaryTranslator_Record Name:String TypeString:String Fields:List<VariableDef> NamespaceName:String
    public static ${TypeString} [[${Name}FromBinary]](IReadableStream s)
    {
        ${TypeString} o = new ${TypeString}();
        $$
            foreach (var f in Fields)
            {
                ##
                    o.[[${f.Name}]] = [[${f.Type.SimpleName(NamespaceName)}FromBinary]](s);
            }
        return o;
    }
    public static void [[${Name}ToBinary]](IWritableStream s, ${TypeString} o)
    {
        $$
            foreach (var f in Fields)
            {
                ##
                    [[${f.Type.SimpleName(NamespaceName)}ToBinary]](s, o.[[${f.Name}]]);
            }
    }

#Template BinaryTranslator_TaggedUnion tu:TaggedUnionDef NamespaceName:String
    ${BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)}

#Template BinaryTranslator_TaggedUnion Name:String TypeString:String TagName:String TagTypeString:String Alternatives:List<VariableDef> NamespaceName:String
    ${BinaryTranslator_Enum(TagName, TagTypeString, "Int", "int", NamespaceName)}
    public static ${TypeString} [[${Name}FromBinary]](IReadableStream s)
    {
        ${TypeString} o = new ${TypeString}();
        o._Tag = [[${Name}TagFromBinary]](s);
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (o._Tag == ${TagTypeString}.[[${a.Name}]])
                    {
                        o.[[${a.Name}]] = [[${a.Type.SimpleName(NamespaceName)}FromBinary]](s);
                        return o;
                    }
            }
        throw new RuntimeException("InvalidOperation");
    }
    public static void [[${Name}ToBinary]](IWritableStream s, ${TypeString} o)
    {
        [[${Name}TagToBinary]](s, o._Tag);
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (o._Tag == ${TagTypeString}.[[${a.Name}]])
                    {
                        [[${a.Type.SimpleName(NamespaceName)}ToBinary]](s, o.[[${a.Name}]]);
                        return;
                    }
            }
        throw new RuntimeException("InvalidOperation");
    }

#Template BinaryTranslator_Enum e:EnumDef NamespaceName:String
    ${BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)}

#Template BinaryTranslator_Enum Name:String TypeString:String UnderlyingSimpleName:String UnderlyingType:String NamespaceName:String
    public static ${UnderlyingType} [[${Name}FromBinary]](IReadableStream s)
    {
        return [[${UnderlyingSimpleName}FromBinary]](s);
    }
    public static void [[${Name}ToBinary]](IWritableStream s, ${UnderlyingType} o)
    {
        [[${UnderlyingSimpleName}ToBinary]](s, o);
    }

#Template BinaryTranslator_ClientCommand c:ClientCommandDef NamespaceName:String
    ${BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Request", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Request", NamespaceName), c.OutParameters, NamespaceName)}
    ${BinaryTranslator_TaggedUnion(GetSuffixedTypeName(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Reply", NamespaceName), GetSuffixedTypeName(c.Name, c.Version, "ReplyTag", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "ReplyTag", NamespaceName), c.InParameters, NamespaceName)}

#Template BinaryTranslator_ServerCommand c:ServerCommandDef NamespaceName:String
    ${BinaryTranslator_Record(GetSuffixedTypeName(c.Name, c.Version, "Event", NamespaceName), GetSuffixedTypeString(c.Name, c.Version, "Event", NamespaceName), c.OutParameters, NamespaceName)}

#Template BinaryTranslator_Tuple tp:TypeSpec NamespaceName:String
    $$
        var SimpleName = tp.SimpleName(NamespaceName);
        var TypeString = GetTypeString(tp, NamespaceName);
    public static ${TypeString} [[${SimpleName}FromBinary]](IReadableStream s)
    {
        ${TypeString} t = new ${TypeString}();
        $$
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    ##
                        t.[[Item${k}]] = [[${t.SimpleName(NamespaceName)}FromBinary]](s);
                    k += 1;
                }
            }
        return t;
    }
    public static void [[${SimpleName}ToBinary]](IWritableStream s, ${TypeString} t)
    {
        $$
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    ##
                        [[${t.SimpleName(NamespaceName)}ToBinary]](s, t.[[Item${k}]]);
                    k += 1;
                }
            }
    }

#Template BinaryTranslator_Optional o:TypeSpec GenericOptionalType:TaggedUnionDef NamespaceName:String
    $$
        var ElementType = o.GenericTypeSpec.ParameterValues.Single();
        var Alternatives = GenericOptionalType.Alternatives.Select(a => new VariableDef { Name = a.Name, Type = a.Type.OnGenericParameterRef ? ElementType : a.Type, Attributes = a.Attributes, Description = a.Description }).ToList();
        var SimpleName = o.SimpleName(NamespaceName);
        var TypeString = GetTypeString(o, NamespaceName);
    public static ${TypeString} [[${SimpleName}FromBinary]](IReadableStream s)
    {
        ${TypeString} o = new ${TypeString}();
        o._Tag = OptionalTagFromBinary(s);
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (o._Tag == OptionalTag.[[${a.Name}]])
                    {
                        o.[[${a.Name}]] = [[${a.Type.SimpleName(NamespaceName)}FromBinary]](s);
                        return o;
                    }
            }
        throw new RuntimeException("InvalidOperation");
    }
    public static void [[${SimpleName}ToBinary]](IWritableStream s, ${TypeString} o)
    {
        OptionalTagToBinary(s, o._Tag);
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (o._Tag == OptionalTag.[[${a.Name}]])
                    {
                        [[${a.Type.SimpleName(NamespaceName)}ToBinary]](s, o.[[${a.Name}]]);
                        return;
                    }
            }
        throw new RuntimeException("InvalidOperation");
    }

#Template BinaryTranslator_List l:TypeSpec NamespaceName:String
    $$
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var ElementType = l.GenericTypeSpec.ParameterValues.Single();
        var ElementSimpleName = ElementType.SimpleName(NamespaceName);
        var ElementTypeString = GetTypeString(l.GenericTypeSpec.ParameterValues.Single(), NamespaceName);
    public static ${TypeString} [[${SimpleName}FromBinary]](IReadableStream s)
    {
        long LongLength = s.ReadSize();
        if (LongLength > 0x7FFFFFFF) { throw new RuntimeException("InvalidOperation"); }
        int Length = (int)(LongLength);
        ${TypeString} l = new ${TypeString}(Length);
        for (int k = 0; k < Length; k += 1)
        {
            l.add([[${ElementSimpleName}FromBinary]](s));
        }
        return l;
    }
    public static void [[${SimpleName}ToBinary]](IWritableStream s, ${TypeString} l)
    {
        s.WriteSize(l.size());
        for (${ElementTypeString} e : l)
        {
            [[${ElementSimpleName}ToBinary]](s, e);
        }
    }

#Template BinaryTranslator_Set l:TypeSpec NamespaceName:String
    $$
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var ElementTypeString = GetTypeString(l.GenericTypeSpec.ParameterValues.Single(), NamespaceName);
        var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
    public static ${TypeString} [[${SimpleName}FromBinary]](IReadableStream s)
    {
        long LongLength = s.ReadSize();
        if (LongLength > 0x7FFFFFFF) { throw new RuntimeException("InvalidOperation"); }
        int Length = (int)(LongLength);
        ${TypeString} l = new ${TypeString}(Length);
        for (int k = 0; k < Length; k += 1)
        {
            l.add([[${ElementSimpleName}FromBinary]](s));
        }
        return l;
    }
    public static void [[${SimpleName}ToBinary]](IWritableStream s, ${TypeString} l)
    {
        s.WriteSize(l.size());
        for (${ElementTypeString} e : l)
        {
            [[${ElementSimpleName}ToBinary]](s, e);
        }
    }

#Template BinaryTranslator_Map l:TypeSpec NamespaceName:String
    $$
        var gp = l.GenericTypeSpec.ParameterValues;
        if (gp.Count != 2)
        {
            throw new ArgumentException();
        }
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var KeyTypeString = GetTypeString(gp[0], NamespaceName);
        var KeySimpleName = gp[0].SimpleName(NamespaceName);
        var ValueSimpleName = gp[1].SimpleName(NamespaceName);
    public static ${TypeString} [[${SimpleName}FromBinary]](IReadableStream s)
    {
        long LongLength = s.ReadSize();
        if (LongLength > 0x7FFFFFFF) { throw new RuntimeException("InvalidOperation"); }
        int Length = (int)(LongLength);
        ${TypeString} l = new ${TypeString}(Length);
        for (int k = 0; k < Length; k += 1)
        {
            ${KeyTypeString} Key = [[${KeySimpleName}FromBinary]](s);
            l.put(Key, [[${ValueSimpleName}FromBinary]](s));
        }
        return l;
    }
    public static void [[${SimpleName}ToBinary]](IWritableStream s, ${TypeString} l)
    {
        s.WriteSize(l.size());
        for (${KeyTypeString} Key : l.keySet())
        {
            [[${KeySimpleName}ToBinary]](s, Key);
            [[${ValueSimpleName}ToBinary]](s, l.get(Key));
        }
    }

#Template WrapModule NamespaceName:String Imports:List<String> Contents:IEnumerable<String>
    //==========================================================================
    //
    //  Notice:      This file is automatically generated.
    //               Please don't modify this file.
    //
    //==========================================================================

    $$
        if (NamespaceName != "")
        {
            var n = String.Join(".", NamespaceName.Split('.').Select(NamespacePart => LowercaseCamelize(NamespacePart)));
            ##
                package ${n};

            $End
        }
    import niveum.lang.*;
    import ${Imports};

    ${Contents}

$End
