$Comment
    ==========================================================================

      File:        PythonBinary.tree
      Location:    Niveum.Object <Tree>
      Description: 对象类型结构Python二进制通讯模板
      Version:     2025.08.07.
      Copyright(C) F.R.C.

    ==========================================================================

#Option
    EnableEmbeddedExpr True

#Namespace Niveum.ObjectSchema.PythonBinary

#Import
    System
    System.Collections.Generic
    System.Linq
    Firefly

#Template Streams
    def _check_methods(C, *methods):
        mro = C.__mro__
        for method in methods:
            for B in mro:
                if method in B.__dict__:
                    if B.__dict__[method] is None:
                        return NotImplemented
                    break
            else:
                return NotImplemented
        return True

    class IReadableStream(metaclass=ABCMeta):
        __slots__ = ()

        @abstractmethod
        def ReadByte(self) -> Byte:
            raise NotImplementedError

        @abstractmethod
        def ReadBytes(self, size: int) -> List[Byte]:
            raise NotImplementedError

        @abstractmethod
        def __enter__(self):
            raise NotImplementedError

        @abstractmethod
        def __exit__(self, exception_type, exception_value, traceback):
            raise NotImplementedError

        @classmethod
        def __subclasshook__(cls, C):
            if cls is IReadableStream:
                return _check_methods(C, "ReadByte", "ReadBytes", "__enter__", "__exit__")
            return NotImplementedError

    class IWritableStream(metaclass=ABCMeta):
        __slots__ = ()

        @abstractmethod
        def WriteByte(self, b: Byte) -> None:
            raise NotImplementedError

        @abstractmethod
        def WriteBytes(self, Buffer: List[Byte]) -> None:
            raise NotImplementedError

        @abstractmethod
        def __enter__(self):
            raise NotImplementedError

        @abstractmethod
        def __exit__(self, exception_type, exception_value, traceback):
            raise NotImplementedError

        @classmethod
        def __subclasshook__(cls, C):
            if cls is IReadableStream:
                return _check_methods(C, "WriteByte", "WriteBytes", "__enter__", "__exit__")
            return NotImplementedError

    class ReadStream:
        @staticmethod
        def ReadUnit(s: IReadableStream) -> Unit:
            return None
        @staticmethod
        def ReadBoolean(s: IReadableStream) -> Boolean:
            return s.ReadByte() != 0
        @staticmethod
        def ReadByte(s: IReadableStream) -> Byte:
            return s.ReadByte()

        @staticmethod
        def ReadUInt8(s: IReadableStream) -> UInt8:
            return s.ReadByte()
        @staticmethod
        def ReadUInt16(s: IReadableStream) -> UInt16:
            return struct.unpack('<H', s.ReadBytes(2))[0]
        @staticmethod
        def ReadUInt32(s: IReadableStream) -> UInt32:
            return struct.unpack('<I', s.ReadBytes(4))[0]
        @staticmethod
        def ReadUInt64(s: IReadableStream) -> UInt64:
            return struct.unpack('<Q', s.ReadBytes(8))[0]
        @staticmethod
        def ReadInt8(s: IReadableStream) -> Int8:
            return struct.unpack('<b', s.ReadBytes(1))[0]
        @staticmethod
        def ReadInt16(s: IReadableStream) -> Int16:
            return struct.unpack('<h', s.ReadBytes(2))[0]
        @staticmethod
        def ReadInt32(s: IReadableStream) -> Int32:
            return struct.unpack('<i', s.ReadBytes(4))[0]
        @staticmethod
        def ReadInt64(s: IReadableStream) -> Int64:
            return struct.unpack('<q', s.ReadBytes(8))[0]

        @staticmethod
        def ReadFloat32(s: IReadableStream) -> Float32:
            return struct.unpack('<f', s.ReadBytes(4))[0]
        @staticmethod
        def ReadFloat64(s: IReadableStream) -> Float64:
            return struct.unpack('<d', s.ReadBytes(8))[0]

        @staticmethod
        def ReadSize(s: 'IReadableStream') -> int:
            lower = ReadStream.ReadUInt32(s)
            if (lower & 0x80000000) == 0:
                return lower
            upper = ReadStream.ReadUInt32(s)
            if (upper & 0x80000000) != 0:
                raise IndexError
            return ((upper << 31) | (lower & 0x7FFFFFFF))

        @staticmethod
        def ReadString(s: IReadableStream) -> String:
            n = ReadStream.ReadSize(s)
            s = bytearray(s.ReadBytes(n)).decode('utf-16le')
            return s

    class WriteStream:
        @staticmethod
        def WriteUnit(s: IWritableStream, v: Unit) -> None:
            pass
        @staticmethod
        def WriteBoolean(s: IWritableStream, v: Boolean) -> None:
            if v:
                s.WriteByte(0xFF)
            else:
                s.WriteByte(0)
        @staticmethod
        def WriteByte(s: IWritableStream, v: Byte) -> None:
            s.WriteByte(v)

        @staticmethod
        def WriteUInt8(s: IWritableStream, v: UInt8) -> None:
            s.WriteByte(v)
        @staticmethod
        def WriteUInt16(s: IWritableStream, v: UInt16) -> None:
            s.WriteBytes(struct.pack('<H', v))
        @staticmethod
        def WriteUInt32(s: IWritableStream, v: UInt32) -> None:
            s.WriteBytes(struct.pack('<I', v))
        @staticmethod
        def WriteUInt64(s: IWritableStream, v: UInt64) -> None:
            s.WriteBytes(struct.pack('<Q', v))
        @staticmethod
        def WriteInt8(s: IWritableStream, v: Int8) -> None:
            s.WriteBytes(struct.pack('<b', v))
        @staticmethod
        def WriteInt16(s: IWritableStream, v: Int16) -> None:
            s.WriteBytes(struct.pack('<h', v))
        @staticmethod
        def WriteInt32(s: IWritableStream, v: Int32) -> None:
            s.WriteBytes(struct.pack('<i', v))
        @staticmethod
        def WriteInt64(s: IWritableStream, v: Int64) -> None:
            s.WriteBytes(struct.pack('<q', v))

        @staticmethod
        def WriteFloat32(s: IWritableStream, v: Float32) -> None:
            s.WriteBytes(struct.pack('<f', v))
        @staticmethod
        def WriteFloat64(s: IWritableStream, v: Float64) -> None:
            s.WriteBytes(struct.pack('<d', v))

        @staticmethod
        def WriteSize(s: IWritableStream, v: int) -> None:
            if v < 0 or v > 0x3FFFFFFFFFFFFFFF:
                raise IndexError

            lower = int(v & 0x7FFFFFFF)
            upper = int((v >> 31) & 0x7FFFFFFF)

            if upper != 0:
                lower |= 0x80000000
                WriteStream.WriteUInt32(s, lower)
                WriteStream.WriteUInt32(s, upper)
            else:
                WriteStream.WriteUInt32(s, lower)

        @staticmethod
        def WriteString(s: IWritableStream, v: String) -> None:
            l = v.encode('utf-16le')
            WriteStream.WriteSize(s, len(l))
            s.WriteBytes(l)
            return s

    class ByteArrayStream(IReadableStream, IWritableStream):
        def __init__(self) -> None:
            self._bytes = bytearray()
            self._position = 0

        def ReadByte(self) -> int:
            if self._position + 1 > len(self._bytes):
                raise IndexError
            b = self._bytes[self._position]
            self._position += 1
            return b

        def ReadBytes(self, size: int) -> List[Byte]:
            if size < 0:
                raise IndexError
            if self._position + size > len(self._bytes):
                raise IndexError
            if size == 0:
                return []
            l = self._bytes[self._position:(self._position + size)]
            self._position += size
            return l

        def WriteByte(self, b: Byte) -> None:
            if self._position + 1 > len(self._bytes):
                self.SetLength(self.Length + 1)
            self._bytes[self._position] = b
            self._position += 1

        def WriteBytes(self, Buffer: List[Byte]) -> None:
            size = len(Buffer)
            if size == 0:
                return
            if self._position + size > len(self._bytes):
                self.SetLength(self.Length + size)
            self._bytes[self._position:(self._position + size)] = Buffer
            self._position += size

        @property
        def Position(self) -> int:
            return self._position

        @Position.setter
        def Position(self, value: int):
            self._position = value

        @property
        def Length(self) -> int:
            return len(self._bytes)

        def SetLength(self, value: int):
            diff = value - len(self._bytes)
            if (diff == 0):
                return
            if (diff > 0):
                self._bytes.extend(bytearray(diff))
            else:
                del self._bytes[-diff:]

        def __enter__(self):
            return self

        def __exit__(self, exception_type, exception_value, traceback):
            pass

#Template BinaryTranslator Schema:Schema NamespaceName:String
    class BinaryTranslator:
        ${GetBinaryTranslatorSerializers(Schema, NamespaceName)}

#Template BinaryTranslator_Primitive_Unit
    @staticmethod
    def UnitFromBinary(s: IReadableStream) -> Unit:
        return ReadStream.ReadUnit(s)
    @staticmethod
    def UnitToBinary(s: IWritableStream, v: Unit) -> None:
        WriteStream.WriteUnit(s, v)
    @staticmethod
    def UnitFromBytes(Bytes: List[Byte]) -> Unit:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.UnitFromBinary(bas)
    @staticmethod
    def UnitToBytes(v: Unit) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.UnitToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Boolean
    @staticmethod
    def BooleanFromBinary(s: IReadableStream) -> Boolean:
        return ReadStream.ReadBoolean(s)
    @staticmethod
    def BooleanToBinary(s: IWritableStream, v: Boolean) -> None:
        WriteStream.WriteBoolean(s, v)
    @staticmethod
    def BooleanFromBytes(Bytes: List[Byte]) -> Boolean:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.BooleanFromBinary(bas)
    @staticmethod
    def BooleanToBytes(v: Boolean) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.BooleanToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_String
    @staticmethod
    def StringFromBinary(s: IReadableStream) -> String:
        return ReadStream.ReadString(s)
    @staticmethod
    def StringToBinary(s: IWritableStream, v: String) -> None:
        WriteStream.WriteString(s, v)
    @staticmethod
    def StringFromBytes(Bytes: List[Byte]) -> String:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.StringFromBinary(bas)
    @staticmethod
    def StringToBytes(v: String) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.StringToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Int
    @staticmethod
    def IntFromBinary(s: IReadableStream) -> Int:
        return ReadStream.ReadInt32(s)
    @staticmethod
    def IntToBinary(s: IWritableStream, v: Int) -> None:
        WriteStream.WriteInt32(s, v)
    @staticmethod
    def IntFromBytes(Bytes: List[Byte]) -> Int:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.IntFromBinary(bas)
    @staticmethod
    def IntToBytes(v: Int) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.IntToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Real
    @staticmethod
    def RealFromBinary(s: IReadableStream) -> Real:
        return ReadStream.ReadFloat64(s)
    @staticmethod
    def RealToBinary(s: IWritableStream, v: Real) -> None:
        WriteStream.WriteFloat64(s, v)
    @staticmethod
    def RealFromBytes(Bytes: List[Byte]) -> Real:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.RealFromBinary(bas)
    @staticmethod
    def RealToBytes(v: Real) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.RealToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Byte
    @staticmethod
    def ByteFromBinary(s: IReadableStream) -> Byte:
        return ReadStream.ReadByte(s)
    @staticmethod
    def ByteToBinary(s: IWritableStream, v: Byte) -> None:
        WriteStream.WriteByte(s, v)
    @staticmethod
    def ByteFromBytes(Bytes: List[Byte]) -> Byte:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.ByteFromBinary(bas)
    @staticmethod
    def ByteToBytes(v: Byte) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.ByteToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_UInt8
    @staticmethod
    def UInt8FromBinary(s: IReadableStream) -> UInt8:
        return ReadStream.ReadUInt8(s)
    @staticmethod
    def UInt8ToBinary(s: IWritableStream, v: UInt8) -> None:
        WriteStream.WriteUInt8(s, v)
    @staticmethod
    def UInt8FromBytes(Bytes: List[Byte]) -> UInt8:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.UInt8FromBinary(bas)
    @staticmethod
    def UInt8ToBytes(v: UInt8) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.UInt8ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_UInt16
    @staticmethod
    def UInt16FromBinary(s: IReadableStream) -> UInt16:
        return ReadStream.ReadUInt16(s)
    @staticmethod
    def UInt16ToBinary(s: IWritableStream, v: UInt16) -> None:
        WriteStream.WriteUInt16(s, v)
    @staticmethod
    def UInt16FromBytes(Bytes: List[Byte]) -> UInt16:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.UInt16FromBinary(bas)
    @staticmethod
    def UInt16ToBytes(v: UInt16) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.UInt16ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_UInt32
    @staticmethod
    def UInt32FromBinary(s: IReadableStream) -> UInt32:
        return ReadStream.ReadUInt32(s)
    @staticmethod
    def UInt32ToBinary(s: IWritableStream, v: UInt32) -> None:
        WriteStream.WriteUInt32(s, v)
    @staticmethod
    def UInt32FromBytes(Bytes: List[Byte]) -> UInt32:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.UInt32FromBinary(bas)
    @staticmethod
    def UInt32ToBytes(v: UInt32) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.UInt32ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_UInt64
    @staticmethod
    def UInt64FromBinary(s: IReadableStream) -> UInt64:
        return ReadStream.ReadUInt64(s)
    @staticmethod
    def UInt64ToBinary(s: IWritableStream, v: UInt64) -> None:
        WriteStream.WriteUInt64(s, v)
    @staticmethod
    def UInt64FromBytes(Bytes: List[Byte]) -> UInt64:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.UInt64FromBinary(bas)
    @staticmethod
    def UInt64ToBytes(v: UInt64) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.UInt64ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Int8
    @staticmethod
    def Int8FromBinary(s: IReadableStream) -> Int8:
        return ReadStream.ReadInt8(s)
    @staticmethod
    def Int8ToBinary(s: IWritableStream, v: Int8) -> None:
        WriteStream.WriteInt8(s, v)
    @staticmethod
    def Int8FromBytes(Bytes: List[Byte]) -> Int8:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Int8FromBinary(bas)
    @staticmethod
    def Int8ToBytes(v: Int8) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Int8ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Int16
    @staticmethod
    def Int16FromBinary(s: IReadableStream) -> Int16:
        return ReadStream.ReadInt16(s)
    @staticmethod
    def Int16ToBinary(s: IWritableStream, v: Int16) -> None:
        WriteStream.WriteInt16(s, v)
    @staticmethod
    def Int16FromBytes(Bytes: List[Byte]) -> Int16:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Int16FromBinary(bas)
    @staticmethod
    def Int16ToBytes(v: Int16) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Int16ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Int32
    @staticmethod
    def Int32FromBinary(s: IReadableStream) -> Int32:
        return ReadStream.ReadInt32(s)
    @staticmethod
    def Int32ToBinary(s: IWritableStream, v: Int32) -> None:
        WriteStream.WriteInt32(s, v)
    @staticmethod
    def Int32FromBytes(Bytes: List[Byte]) -> Int32:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Int32FromBinary(bas)
    @staticmethod
    def Int32ToBytes(v: Int32) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Int32ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Int64
    @staticmethod
    def Int64FromBinary(s: IReadableStream) -> Int64:
        return ReadStream.ReadInt64(s)
    @staticmethod
    def Int64ToBinary(s: IWritableStream, v: Int64) -> None:
        WriteStream.WriteInt64(s, v)
    @staticmethod
    def Int64FromBytes(Bytes: List[Byte]) -> Int64:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Int64FromBinary(bas)
    @staticmethod
    def Int64ToBytes(v: Int64) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Int64ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Float32
    @staticmethod
    def Float32FromBinary(s: IReadableStream) -> Float32:
        return ReadStream.ReadFloat32(s)
    @staticmethod
    def Float32ToBinary(s: IWritableStream, v: Float32) -> None:
        WriteStream.WriteFloat32(s, v)
    @staticmethod
    def Float32FromBytes(Bytes: List[Byte]) -> Float32:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Float32FromBinary(bas)
    @staticmethod
    def Float32ToBytes(v: Float32) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Float32ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Float64
    @staticmethod
    def Float64FromBinary(s: IReadableStream) -> Float64:
        return ReadStream.ReadFloat64(s)
    @staticmethod
    def Float64ToBinary(s: IWritableStream, v: Float64) -> None:
        WriteStream.WriteFloat64(s, v)
    @staticmethod
    def Float64FromBytes(Bytes: List[Byte]) -> Float64:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.Float64FromBinary(bas)
    @staticmethod
    def Float64ToBytes(v: Float64) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.Float64ToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Primitive_Type
    @staticmethod
    def TypeFromBinary(s: IReadableStream) -> Type:
        raise NotImplementedError
    @staticmethod
    def TypeToBinary(s: IWritableStream, v: Type) -> None:
        raise NotImplementedError
    @staticmethod
    def TypeFromBytes(Bytes: List[Byte]) -> Type:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.TypeFromBinary(bas)
    @staticmethod
    def TypeToBytes(v: Type) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.TypeToBinary(bas, v)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Alias a:AliasDef NamespaceName:String
    $$
        var TypeString = GetTypeString(a.GetTypeSpec(), NamespaceName);
        var Name = a.GetTypeSpec().SimpleName(NamespaceName);
        var ValueSimpleName = a.Type.SimpleName(NamespaceName);
    @staticmethod
    def [[${Name}FromBinary]](s: IReadableStream) -> ${TypeString}:
        return BinaryTranslator.[[${ValueSimpleName}FromBinary]](s)
    @staticmethod
    def [[${Name}ToBinary]](s: IWritableStream, o: ${TypeString}) -> None:
        BinaryTranslator.[[${ValueSimpleName}ToBinary]](s, o)
    @staticmethod
    def [[${Name}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${Name}FromBinary]](bas)
    @staticmethod
    def [[${Name}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${Name}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Record r:RecordDef NamespaceName:String
    ${BinaryTranslator_Record(r.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(r.GetTypeSpec(), NamespaceName), r.Fields, NamespaceName)}

#Template BinaryTranslator_Record Name:String TypeString:String Fields:List<VariableDef> NamespaceName:String
    @staticmethod
    def [[${Name}FromBinary]](s: IReadableStream) -> ${TypeString}:
        return ${TypeString}(
            $$
                int k = 0;
                foreach (var f in Fields)
                {
                    if (k == Fields.Count - 1)
                    {
                        ##
                            [[${f.Name}]] = BinaryTranslator.[[${f.Type.SimpleName(NamespaceName)}FromBinary]](s)
                    }
                    else
                    {
                        ##
                            [[${f.Name}]] = BinaryTranslator.[[${f.Type.SimpleName(NamespaceName)}FromBinary]](s),
                    }
                    k += 1;
                }
        )
    @staticmethod
    def [[${Name}ToBinary]](s: IWritableStream, o: ${TypeString}) -> None:
        $$
            foreach (var f in Fields)
            {
                ##
                    BinaryTranslator.[[${f.Type.SimpleName(NamespaceName)}ToBinary]](s, o.[[${f.Name}]])
            }
    @staticmethod
    def [[${Name}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${Name}FromBinary]](bas)
    @staticmethod
    def [[${Name}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${Name}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_TaggedUnion tu:TaggedUnionDef NamespaceName:String
    ${BinaryTranslator_TaggedUnion(tu.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(tu.GetTypeSpec(), NamespaceName), GetSuffixedTypeName(tu.Name, tu.Version, "Tag", NamespaceName), GetSuffixedTypeString(tu.Name, tu.Version, "Tag", NamespaceName), tu.Alternatives, NamespaceName)}

#Template BinaryTranslator_TaggedUnion Name:String TypeString:String TagName:String TagTypeString:String Alternatives:List<VariableDef> NamespaceName:String
    ${BinaryTranslator_Enum(TagName, TagTypeString, "Int", "Int", NamespaceName)}
    @staticmethod
    def [[${Name}FromBinary]](s: IReadableStream) -> ${TypeString}:
        Tag = BinaryTranslator.[[${Name}TagFromBinary]](s)
        Value = None
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (Tag == ${TagTypeString}.[[${a.Name}]]):
                        Value = BinaryTranslator.[[${a.Type.SimpleName(NamespaceName)}FromBinary]](s)
                        return ${TypeString}(Tag, Value)
            }
        raise ValueError
    @staticmethod
    def [[${Name}ToBinary]](s: IWritableStream, o: ${TypeString}) -> None:
        BinaryTranslator.[[${Name}TagToBinary]](s, o.Tag_)
        $$
            foreach (var a in Alternatives)
            {
                ##
                    if (o.Tag_ == ${TagTypeString}.[[${a.Name}]]):
                        BinaryTranslator.[[${a.Type.SimpleName(NamespaceName)}ToBinary]](s, o.Value_)
                        return
            }
        raise ValueError
    @staticmethod
    def [[${Name}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${Name}FromBinary]](bas)
    @staticmethod
    def [[${Name}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${Name}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Enum e:EnumDef NamespaceName:String
    ${BinaryTranslator_Enum(e.GetTypeSpec().SimpleName(NamespaceName), GetTypeString(e.GetTypeSpec(), NamespaceName), e.UnderlyingType.SimpleName(NamespaceName), GetTypeString(e.UnderlyingType, NamespaceName), NamespaceName)}

#Template BinaryTranslator_Enum Name:String TypeString:String UnderlyingSimpleName:String UnderlyingType:String NamespaceName:String
    @staticmethod
    def [[${Name}FromBinary]](s: IReadableStream) -> ${TypeString}:
        return ${TypeString}(BinaryTranslator.[[${UnderlyingSimpleName}FromBinary]](s))
    @staticmethod
    def [[${Name}ToBinary]](s: IWritableStream, o: ${TypeString}) -> None:
        BinaryTranslator.[[${UnderlyingSimpleName}ToBinary]](s, ${UnderlyingType}(o))
    @staticmethod
    def [[${Name}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${Name}FromBinary]](bas)
    @staticmethod
    def [[${Name}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${Name}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Tuple tp:TypeSpec NamespaceName:String
    $$
        var SimpleName = tp.SimpleName(NamespaceName);
        var TypeString = GetTypeString(tp, NamespaceName);
    @staticmethod
    def [[${SimpleName}FromBinary]](s: IReadableStream) -> ${TypeString}:
        $$
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    ##
                        [[Item${k}]] = BinaryTranslator.[[${t.SimpleName(NamespaceName)}FromBinary]](s)
                    k += 1;
                }
            }
        return (${String.Join(", ", tp.Tuple.Select((t, k) => "Item" + k.ToString(System.Globalization.CultureInfo.InvariantCulture)))})
    @staticmethod
    def [[${SimpleName}ToBinary]](s: IWritableStream, t: ${TypeString}) -> None:
        (${String.Join(", ", tp.Tuple.Select((t, k) => "Item" + k.ToString(System.Globalization.CultureInfo.InvariantCulture)))}) = t
        $$
            {
                int k = 0;
                foreach (var t in tp.Tuple)
                {
                    ##
                        BinaryTranslator.[[${t.SimpleName(NamespaceName)}ToBinary]](s, [[Item${k}]])
                    k += 1;
                }
            }
    @staticmethod
    def [[${SimpleName}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${SimpleName}FromBinary]](bas)
    @staticmethod
    def [[${SimpleName}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${SimpleName}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Optional o:TypeSpec GenericOptionalType:TaggedUnionDef NamespaceName:String
    $$
        var ElementType = o.GenericTypeSpec.ParameterValues.Single();
        var SimpleName = o.SimpleName(NamespaceName);
        var TypeString = GetTypeString(o, NamespaceName);
    @staticmethod
    def [[${SimpleName}FromBinary]](s: IReadableStream) -> ${TypeString}:
        Tag = BinaryTranslator.IntFromBinary(s)
        if (Tag == 0):
            return None
        return BinaryTranslator.[[${ElementType.SimpleName(NamespaceName)}FromBinary]](s)
    @staticmethod
    def [[${SimpleName}ToBinary]](s: IWritableStream, o: ${TypeString}) -> None:
        if (o == None):
            BinaryTranslator.IntToBinary(s, 0)
            return None
        BinaryTranslator.IntToBinary(s, 1)
        BinaryTranslator.[[${ElementType.SimpleName(NamespaceName)}ToBinary]](s, o)
    @staticmethod
    def [[${SimpleName}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${SimpleName}FromBinary]](bas)
    @staticmethod
    def [[${SimpleName}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${SimpleName}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_List l:TypeSpec NamespaceName:String
    $$
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var ElementType = l.GenericTypeSpec.ParameterValues.Single();
        var ElementSimpleName = ElementType.SimpleName(NamespaceName);
    @staticmethod
    def [[${SimpleName}FromBinary]](s: IReadableStream) -> ${TypeString}:
        Length = ReadStream.ReadSize(s)
        $$
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                ##
                    l = s.ReadBytes(Length)
            }
            else
            {
                ##
                    l = []
                    for k in range(Length):
                        l.append(BinaryTranslator.[[${ElementSimpleName}FromBinary]](s))
            }
        return l
    @staticmethod
    def [[${SimpleName}ToBinary]](s: IWritableStream, l: ${TypeString}) -> None:
        WriteStream.WriteSize(s, len(l))
        $$
            if (ElementType.OnTypeRef && ElementType.TypeRef.NameMatches("Byte", "UInt8"))
            {
                ##
                    s.WriteBytes(l)
            }
            else
            {
                ##
                    for k in range(Length):
                        BinaryTranslator.[[${ElementSimpleName}ToBinary]](s, l[k])
            }
    @staticmethod
    def [[${SimpleName}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${SimpleName}FromBinary]](bas)
    @staticmethod
    def [[${SimpleName}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${SimpleName}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Set l:TypeSpec NamespaceName:String
    $$
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var ElementSimpleName = l.GenericTypeSpec.ParameterValues.Single().SimpleName(NamespaceName);
    @staticmethod
    def [[${SimpleName}FromBinary]](s: IReadableStream) -> ${TypeString}:
        Length = ReadStream.ReadSize(s)
        l = set()
        for k in range(Length):
            l.add(BinaryTranslator.[[${ElementSimpleName}FromBinary]](s))
        return l
    @staticmethod
    def [[${SimpleName}ToBinary]](s: IWritableStream, l: ${TypeString}) -> None:
        WriteStream.WriteSize(s, len(l))
        for e in l:
            BinaryTranslator.[[${ElementSimpleName}ToBinary]](s, e)
    @staticmethod
    def [[${SimpleName}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${SimpleName}FromBinary]](bas)
    @staticmethod
    def [[${SimpleName}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${SimpleName}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template BinaryTranslator_Map l:TypeSpec NamespaceName:String
    $$
        var gp = l.GenericTypeSpec.ParameterValues;
        if (gp.Count != 2)
        {
            throw new ArgumentException();
        }
        var SimpleName = l.SimpleName(NamespaceName);
        var TypeString = GetTypeString(l, NamespaceName);
        var KeySimpleName = gp[0].SimpleName(NamespaceName);
        var ValueSimpleName = gp[1].SimpleName(NamespaceName);
    @staticmethod
    def [[${SimpleName}FromBinary]](s: IReadableStream) -> ${TypeString}:
        Length = ReadStream.ReadSize(s)
        l = {}
        for k in range(Length):
            Key = BinaryTranslator.[[${KeySimpleName}FromBinary]](s)
            l[Key] = BinaryTranslator.[[${ValueSimpleName}FromBinary]](s)
        return l
    @staticmethod
    def [[${SimpleName}ToBinary]](s: IWritableStream, l: ${TypeString}) -> None:
        WriteStream.WriteSize(s, len(l))
        for Key, Value in l.items():
            BinaryTranslator.[[${KeySimpleName}ToBinary]](s, Key)
            BinaryTranslator.[[${ValueSimpleName}ToBinary]](s, Value)
    @staticmethod
    def [[${SimpleName}FromBytes]](Bytes: List[Byte]) -> ${TypeString}:
        with ByteArrayStream() as bas:
            bas.WriteBytes(Bytes)
            bas.Position = 0
            return BinaryTranslator.[[${SimpleName}FromBinary]](bas)
    @staticmethod
    def [[${SimpleName}ToBytes]](o: ${TypeString}) -> List[Byte]:
        with ByteArrayStream() as bas:
            BinaryTranslator.[[${SimpleName}ToBinary]](bas, o)
            bas.Position = 0
            return bas.ReadBytes(bas.Length)

#Template Main Schema:Schema
    #!/usr/bin/python3

    #==========================================================================
    #
    #  Notice:      This file is automatically generated.
    #               Please don't modify this file.
    #
    #==========================================================================

    from abc import ABCMeta, abstractmethod
    import struct
    from ${Schema.Imports} import *

    ${GetTypes(Schema)}

$End
