//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Nivea.Template.Syntax
{
    /// <summary>词</summary>
    [Record]
    public sealed class Token
    {
        /// <summary>原始文本</summary>
        public String OriginalText;
        /// <summary>词类型</summary>
        public TokenType Type;
        /// <summary>是否是一行的起始</summary>
        public Boolean IsLeadingToken;
        /// <summary>是否在非缩进空格后</summary>
        public Boolean IsAfterSpace;
    }
    public enum TokenTypeTag
    {
        /// <summary>直接</summary>
        Direct = 0,
        /// <summary>双引号引用</summary>
        Quoted = 1,
        /// <summary>双双引号引用</summary>
        Escaped = 2,
        /// <summary>左括号</summary>
        LeftParenthesis = 3,
        /// <summary>右括号</summary>
        RightParenthesis = 4,
        /// <summary>逗号</summary>
        Comma = 5,
        /// <summary>预处理指令</summary>
        PreprocessDirective = 6,
        /// <summary>运算符</summary>
        Operator = 7,
        /// <summary>单行注释</summary>
        SingleLineComment = 8
    }
    /// <summary>词类型</summary>
    [TaggedUnion]
    public sealed class TokenType
    {
        [Tag] public TokenTypeTag _Tag;

        /// <summary>直接</summary>
        public String Direct;
        /// <summary>双引号引用</summary>
        public String Quoted;
        /// <summary>双双引号引用</summary>
        public String Escaped;
        /// <summary>左括号</summary>
        public Unit LeftParenthesis;
        /// <summary>右括号</summary>
        public Unit RightParenthesis;
        /// <summary>逗号</summary>
        public Unit Comma;
        /// <summary>预处理指令</summary>
        public String PreprocessDirective;
        /// <summary>运算符</summary>
        public String Operator;
        /// <summary>单行注释</summary>
        public String SingleLineComment;

        /// <summary>直接</summary>
        public static TokenType CreateDirect(String Value) { return new TokenType { _Tag = TokenTypeTag.Direct, Direct = Value }; }
        /// <summary>双引号引用</summary>
        public static TokenType CreateQuoted(String Value) { return new TokenType { _Tag = TokenTypeTag.Quoted, Quoted = Value }; }
        /// <summary>双双引号引用</summary>
        public static TokenType CreateEscaped(String Value) { return new TokenType { _Tag = TokenTypeTag.Escaped, Escaped = Value }; }
        /// <summary>左括号</summary>
        public static TokenType CreateLeftParenthesis() { return new TokenType { _Tag = TokenTypeTag.LeftParenthesis, LeftParenthesis = default(Unit) }; }
        /// <summary>右括号</summary>
        public static TokenType CreateRightParenthesis() { return new TokenType { _Tag = TokenTypeTag.RightParenthesis, RightParenthesis = default(Unit) }; }
        /// <summary>逗号</summary>
        public static TokenType CreateComma() { return new TokenType { _Tag = TokenTypeTag.Comma, Comma = default(Unit) }; }
        /// <summary>预处理指令</summary>
        public static TokenType CreatePreprocessDirective(String Value) { return new TokenType { _Tag = TokenTypeTag.PreprocessDirective, PreprocessDirective = Value }; }
        /// <summary>运算符</summary>
        public static TokenType CreateOperator(String Value) { return new TokenType { _Tag = TokenTypeTag.Operator, Operator = Value }; }
        /// <summary>单行注释</summary>
        public static TokenType CreateSingleLineComment(String Value) { return new TokenType { _Tag = TokenTypeTag.SingleLineComment, SingleLineComment = Value }; }

        /// <summary>直接</summary>
        public Boolean OnDirect { get { return _Tag == TokenTypeTag.Direct; } }
        /// <summary>双引号引用</summary>
        public Boolean OnQuoted { get { return _Tag == TokenTypeTag.Quoted; } }
        /// <summary>双双引号引用</summary>
        public Boolean OnEscaped { get { return _Tag == TokenTypeTag.Escaped; } }
        /// <summary>左括号</summary>
        public Boolean OnLeftParenthesis { get { return _Tag == TokenTypeTag.LeftParenthesis; } }
        /// <summary>右括号</summary>
        public Boolean OnRightParenthesis { get { return _Tag == TokenTypeTag.RightParenthesis; } }
        /// <summary>逗号</summary>
        public Boolean OnComma { get { return _Tag == TokenTypeTag.Comma; } }
        /// <summary>预处理指令</summary>
        public Boolean OnPreprocessDirective { get { return _Tag == TokenTypeTag.PreprocessDirective; } }
        /// <summary>运算符</summary>
        public Boolean OnOperator { get { return _Tag == TokenTypeTag.Operator; } }
        /// <summary>单行注释</summary>
        public Boolean OnSingleLineComment { get { return _Tag == TokenTypeTag.SingleLineComment; } }
    }
    /// <summary>括号类型</summary>
    public enum ParenthesisType : int
    {
        /// <summary>尖括号</summary>
        Angle = 0,
        /// <summary>方括号</summary>
        Bracket = 1,
        /// <summary>花括号</summary>
        Brace = 2
    }
}
