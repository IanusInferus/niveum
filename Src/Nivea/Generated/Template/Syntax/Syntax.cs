//==========================================================================
//
//  Notice:      This file is automatically generated.
//               Please don't modify this file.
//
//==========================================================================

using System;
using System.Collections.Generic;
using Nivea.Template.Semantics;
using Boolean = System.Boolean;
using String = System.String;
using Type = System.Type;
using Int = System.Int32;
using Real = System.Double;
using Byte = System.Byte;
using UInt8 = System.Byte;
using UInt16 = System.UInt16;
using UInt32 = System.UInt32;
using UInt64 = System.UInt64;
using Int8 = System.SByte;
using Int16 = System.Int16;
using Int32 = System.Int32;
using Int64 = System.Int64;
using Float32 = System.Single;
using Float64 = System.Double;

namespace Nivea.Template.Syntax
{
    public enum ExprNodeTag
    {
        /// <summary>直接</summary>
        Direct = 0,
        /// <summary>字面量</summary>
        Literal = 1,
        /// <summary>运算符</summary>
        Operator = 2,
        /// <summary>内嵌模板</summary>
        Template = 3,
        /// <summary>内嵌模板生成</summary>
        YieldTemplate = 4,
        /// <summary>茎</summary>
        Stem = 5,
        /// <summary>待定序列</summary>
        Undetermined = 6,
        /// <summary>成员</summary>
        Member = 7
    }
    /// <summary>表达式结点</summary>
    [TaggedUnion]
    public sealed class ExprNode
    {
        [Tag] public ExprNodeTag _Tag;
    
        /// <summary>直接</summary>
        public String Direct;
        /// <summary>字面量</summary>
        public String Literal;
        /// <summary>运算符</summary>
        public String Operator;
        /// <summary>内嵌模板</summary>
        public List<TemplateExpr> Template;
        /// <summary>内嵌模板生成</summary>
        public List<TemplateExpr> YieldTemplate;
        /// <summary>茎</summary>
        public ExprNodeStem Stem;
        /// <summary>待定序列</summary>
        public ExprNodeUndetermined Undetermined;
        /// <summary>成员</summary>
        public ExprNodeMember Member;
    
        /// <summary>直接</summary>
        public static ExprNode CreateDirect(String Value) { return new ExprNode { _Tag = ExprNodeTag.Direct, Direct = Value }; }
        /// <summary>字面量</summary>
        public static ExprNode CreateLiteral(String Value) { return new ExprNode { _Tag = ExprNodeTag.Literal, Literal = Value }; }
        /// <summary>运算符</summary>
        public static ExprNode CreateOperator(String Value) { return new ExprNode { _Tag = ExprNodeTag.Operator, Operator = Value }; }
        /// <summary>内嵌模板</summary>
        public static ExprNode CreateTemplate(List<TemplateExpr> Value) { return new ExprNode { _Tag = ExprNodeTag.Template, Template = Value }; }
        /// <summary>内嵌模板生成</summary>
        public static ExprNode CreateYieldTemplate(List<TemplateExpr> Value) { return new ExprNode { _Tag = ExprNodeTag.YieldTemplate, YieldTemplate = Value }; }
        /// <summary>茎</summary>
        public static ExprNode CreateStem(ExprNodeStem Value) { return new ExprNode { _Tag = ExprNodeTag.Stem, Stem = Value }; }
        /// <summary>待定序列</summary>
        public static ExprNode CreateUndetermined(ExprNodeUndetermined Value) { return new ExprNode { _Tag = ExprNodeTag.Undetermined, Undetermined = Value }; }
        /// <summary>成员</summary>
        public static ExprNode CreateMember(ExprNodeMember Value) { return new ExprNode { _Tag = ExprNodeTag.Member, Member = Value }; }
    
        /// <summary>直接</summary>
        public Boolean OnDirect { get { return _Tag == ExprNodeTag.Direct; } }
        /// <summary>字面量</summary>
        public Boolean OnLiteral { get { return _Tag == ExprNodeTag.Literal; } }
        /// <summary>运算符</summary>
        public Boolean OnOperator { get { return _Tag == ExprNodeTag.Operator; } }
        /// <summary>内嵌模板</summary>
        public Boolean OnTemplate { get { return _Tag == ExprNodeTag.Template; } }
        /// <summary>内嵌模板生成</summary>
        public Boolean OnYieldTemplate { get { return _Tag == ExprNodeTag.YieldTemplate; } }
        /// <summary>茎</summary>
        public Boolean OnStem { get { return _Tag == ExprNodeTag.Stem; } }
        /// <summary>待定序列</summary>
        public Boolean OnUndetermined { get { return _Tag == ExprNodeTag.Undetermined; } }
        /// <summary>成员</summary>
        public Boolean OnMember { get { return _Tag == ExprNodeTag.Member; } }
    }
    /// <summary>表达式结点茎</summary>
    [Record]
    public sealed class ExprNodeStem
    {
        /// <summary>头部</summary>
        public Optional<ExprNode> Head;
        /// <summary>子结点列表</summary>
        public List<ExprNode> Nodes;
        /// <summary>是否可以和前面的结点合并（作为子结点时）</summary>
        public Boolean CanMerge;
    }
    /// <summary>表达式结点待定序列</summary>
    [Record]
    public sealed class ExprNodeUndetermined
    {
        /// <summary>结点列表</summary>
        public List<ExprNode> Nodes;
    }
    /// <summary>成员</summary>
    [Record]
    public sealed class ExprNodeMember
    {
        /// <summary>父结点</summary>
        public ExprNode Parent;
        /// <summary>子结点</summary>
        public ExprNode Child;
    }
    public enum StackNodeTag
    {
        /// <summary>结点</summary>
        Node = 0,
        /// <summary>词</summary>
        Token = 1
    }
    /// <summary>栈结点</summary>
    [TaggedUnion]
    public sealed class StackNode
    {
        [Tag] public StackNodeTag _Tag;
    
        /// <summary>结点</summary>
        public ExprNode Node;
        /// <summary>词</summary>
        public Token Token;
    
        /// <summary>结点</summary>
        public static StackNode CreateNode(ExprNode Value) { return new StackNode { _Tag = StackNodeTag.Node, Node = Value }; }
        /// <summary>词</summary>
        public static StackNode CreateToken(Token Value) { return new StackNode { _Tag = StackNodeTag.Token, Token = Value }; }
    
        /// <summary>结点</summary>
        public Boolean OnNode { get { return _Tag == StackNodeTag.Node; } }
        /// <summary>词</summary>
        public Boolean OnToken { get { return _Tag == StackNodeTag.Token; } }
    }
}
